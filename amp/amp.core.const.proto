syntax = "proto3";

// package amp is an implementation-independent API for a pluggable client-server UI/UX system,
// featuring support and integration for files, media, and communication.
//
// Welcome to art.media.platform (c) 2023 ("Amp"): a runtime model and specification to securely share and experience digital media under their own agreed terms and permissions,
//   something we can all agree on.
package amp;

// Tells protoc that a .proto file importing amp.proto what package import to use within Go.
option go_package = "github.com/art-media-platform/amp.SDK/amp";

// import "github.com/gogo/protobuf/gogoproto/gogo.proto";  // https://stackoverflow.com/questions/43026449/gogo-proto-file-not-found

option csharp_namespace = "Amp";


//option tags = "core.tags.proto";

/*
const Std {
	CellGlyphs   = "amp.cell-property.Tags.glyphs";
	CellLinks    = "amp.cell-property.Tags.links";
}

LoginSpec           = amp.AttrSpec.With("Login").ID
	LoginChallengeSpec  = amp.AttrSpec.With("LoginChallenge").ID
	LoginResponseSpec   = amp.AttrSpec.With("LoginResponse").ID
	LoginCheckpointSpec = amp.AttrSpec.With("LoginCheckpoint").ID

	CellChildren   = amp.AttrSpec.With("children.Tag.ID") // ID suffix denotes SeriesIndex is used to store a CellID
	CellProperties = amp.AttrSpec.With("cell-properties")
	LaunchURL      = amp.AttrSpec.With("LaunchURL").ID

	CellProperty   = tag.Expr{}.With("cell-property")
	TextTag        = CellProperty.With("text.Tag")
	CellLabel      = TextTag.With("label").ID
	CellCaption    = TextTag.With("caption").ID
	CellSynopsis   = TextTag.With("synopsis").ID
	CellCollection = TextTag.With("collection").ID
	CellAuthor     = TextTag.With("author").ID

	CellPropertyTagID = CellProperty.With("Tag.ID")
	OrderByPlayID     = CellPropertyTagID.With("order-by.play").ID
	OrderByTimeID     = CellPropertyTagID.With("order-by.time").ID
	OrderByGeoID      = CellPropertyTagID.With("order-by.geo").ID
	OrderByAreaID     = CellPropertyTagID.With("order-by.area").ID

	CellTags   = CellProperty.With("Tags")
	CellLinks  = CellTags.With("links").ID
	CellGlyphs = CellTags.With("glyphs").ID

	CellTag   = CellProperty.With("Tag")
	CellMedia = CellTag.With("content.media").ID
	CellCover = CellTag.With("content.cover").ID
	CellVis   = CellTag.With("content.vis").ID

	CellFileInfo = CellProperty.With("FileInfo").ID

}


const {ConstFamilyName} {

    ident = {int}{float}{string}{tag};
}

scope {TagExpr} {

    literal1.literal2.literal3
}

tag {TagIdentExpr} {

    ({TagIdentExpr} = {ProtoFieldIndex};)* // option -- private

}

Tag {
   Expr = "gjgj"
   x1 =
   x2 =
   x3 =
}

outputs: Tag, TagID, .cs .go .c
*/