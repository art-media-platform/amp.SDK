// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: amp.core.proto

// package amp is an implementation-independent API for a pluggable client-server UI/UX system,
// featuring support and integration for files, media, and communication.
//
// Welcome to art.media.platform (c) 2023 ("amp"): a runtime model and specification to securely share and experience digital media under their own agreed terms and permissions,
//   something we can all agree on.

package amp

import (
	bytes "bytes"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Const int32

const (
	Const_Defs Const = 0
	// By convention, the bootstrap ("head") cell ID for a TxMsg.
	Const_HeadCellSeed Const = 55
	// DefaultServicePort  is the default TCP port used to expose amp.Host service.
	Const_DefaultServicePort Const = 5192
	// Byte size and version of a TxMsg encoding -- values are little endian
	// A TxPreamble has the following layout:
	//   Bytes  00:03 -- TxPreamble marker ('amp')
	//          03:04 -- Const_TxPreamble_Version
	//          04:08 -- sizeof(TxPreamble, TxHeader, serialized []TxOp)
	//          08:12 -- TxMsg.DataStore size
	//          12:16 -- Reserved
	Const_TxPreamble_Size Const = 16
	// Version of the TxPreamble -- first byte
	Const_TxPreamble_Version Const = 51
	// The first byte of the TxPreamble is the header size and version and
	// the following 3 bytes of a serialized TxMsg ("amp")
	Const_TxPreamble_Marker Const = 6385008
	// בְּרֵאשִׁ֖ית בָּרָ֣א אֱלֹהִ֑ים אֵ֥ת הַשָּׁמַ֖יִם וְאֵ֥ת הָאָֽרֶץ
	// Oh Lord, please bless this project, those who fight for it, and those who lay their life on Your altar.
	Const_Invocation Const = 3773
)

var Const_name = map[int32]string{
	0:       "Const_Defs",
	55:      "Const_HeadCellSeed",
	5192:    "Const_DefaultServicePort",
	16:      "Const_TxPreamble_Size",
	51:      "Const_TxPreamble_Version",
	6385008: "Const_TxPreamble_Marker",
	3773:    "Const_Invocation",
}

var Const_value = map[string]int32{
	"Const_Defs":               0,
	"Const_HeadCellSeed":       55,
	"Const_DefaultServicePort": 5192,
	"Const_TxPreamble_Size":    16,
	"Const_TxPreamble_Version": 51,
	"Const_TxPreamble_Marker":  6385008,
	"Const_Invocation":         3773,
}

func (Const) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ab24c3800b7c0c17, []int{0}
}

// TxOpCode specifies a particular cell transaction operation.
type TxOpCode int32

const (
	TxOpCode_Nil           TxOpCode = 0
	TxOpCode_UpsertElement TxOpCode = 2
	TxOpCode_DeleteElement TxOpCode = 4
)

var TxOpCode_name = map[int32]string{
	0: "TxOpCode_Nil",
	2: "TxOpCode_UpsertElement",
	4: "TxOpCode_DeleteElement",
}

var TxOpCode_value = map[string]int32{
	"TxOpCode_Nil":           0,
	"TxOpCode_UpsertElement": 2,
	"TxOpCode_DeleteElement": 4,
}

func (TxOpCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ab24c3800b7c0c17, []int{1}
}

// TxField maps a fixed count of int64 payload fields.enum
//
// Why not as a proto message?  Because compression is much better since values mostly repeat.
type TxField int32

const (
	TxField_Nil       TxField = 0
	TxField_CellID_0  TxField = 1
	TxField_CellID_1  TxField = 2
	TxField_CellID_2  TxField = 3
	TxField_AttrID_0  TxField = 4
	TxField_AttrID_1  TxField = 5
	TxField_AttrID_2  TxField = 6
	TxField_ItemID_0  TxField = 7
	TxField_ItemID_1  TxField = 8
	TxField_ItemID_2  TxField = 9
	TxField_EditID_0  TxField = 10
	TxField_EditID_1  TxField = 11
	TxField_EditID_2  TxField = 12
	TxField_NumFields TxField = 13
	TxField_MaxFields TxField = 24
)

var TxField_name = map[int32]string{
	0:  "TxField_Nil",
	1:  "TxField_CellID_0",
	2:  "TxField_CellID_1",
	3:  "TxField_CellID_2",
	4:  "TxField_AttrID_0",
	5:  "TxField_AttrID_1",
	6:  "TxField_AttrID_2",
	7:  "TxField_ItemID_0",
	8:  "TxField_ItemID_1",
	9:  "TxField_ItemID_2",
	10: "TxField_EditID_0",
	11: "TxField_EditID_1",
	12: "TxField_EditID_2",
	13: "TxField_NumFields",
	24: "TxField_MaxFields",
}

var TxField_value = map[string]int32{
	"TxField_Nil":       0,
	"TxField_CellID_0":  1,
	"TxField_CellID_1":  2,
	"TxField_CellID_2":  3,
	"TxField_AttrID_0":  4,
	"TxField_AttrID_1":  5,
	"TxField_AttrID_2":  6,
	"TxField_ItemID_0":  7,
	"TxField_ItemID_1":  8,
	"TxField_ItemID_2":  9,
	"TxField_EditID_0":  10,
	"TxField_EditID_1":  11,
	"TxField_EditID_2":  12,
	"TxField_NumFields": 13,
	"TxField_MaxFields": 24,
}

func (TxField) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ab24c3800b7c0c17, []int{2}
}

type SelectOp int32

const (
	SelectOp_Neutral SelectOp = 0
	SelectOp_Include SelectOp = 1
	SelectOp_Exclude SelectOp = 2
)

var SelectOp_name = map[int32]string{
	0: "SelectOp_Neutral",
	1: "SelectOp_Include",
	2: "SelectOp_Exclude",
}

var SelectOp_value = map[string]int32{
	"SelectOp_Neutral": 0,
	"SelectOp_Include": 1,
	"SelectOp_Exclude": 2,
}

func (SelectOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ab24c3800b7c0c17, []int{3}
}

// OpStatus allows a sender to express the status of a request.
type OpStatus int32

const (
	// op or request has not yet initiated
	OpStatus_NotStarted OpStatus = 0
	// op or request is in progress
	OpStatus_Syncing OpStatus = 1
	// updating, processing, or suspended -- signifies opaque working state
	OpStatus_Busy OpStatus = 2
	// Sent by the host to signal that the op up to date and the client state is stable / synchronized.
	// This typically drives UI updates or other dependencies requiring a stable state.
	OpStatus_Synced OpStatus = 3
	// From the client to host, this signals to close / cancel the op associated with ReqID.
	// From the host to client, this signals that the given request ID has been closed / discarded.
	OpStatus_Closed OpStatus = 7
)

var OpStatus_name = map[int32]string{
	0: "OpStatus_NotStarted",
	1: "OpStatus_Syncing",
	2: "OpStatus_Busy",
	3: "OpStatus_Synced",
	7: "OpStatus_Closed",
}

var OpStatus_value = map[string]int32{
	"OpStatus_NotStarted": 0,
	"OpStatus_Syncing":    1,
	"OpStatus_Busy":       2,
	"OpStatus_Synced":     3,
	"OpStatus_Closed":     7,
}

func (OpStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ab24c3800b7c0c17, []int{4}
}

type StateSync int32

const (
	// If set, a pin request will not send any state responses to the client.
	// This is useful when only writing to a cell and no state updates are needed.
	StateSync_None StateSync = 0
	// If set, a pin request will be automatically closed once state is pushed / synchronized.
	// This is useful when only a snapshot of the cell is needed.
	StateSync_CloseOnSync StateSync = 1
	// If set, a pin request will remain open even after state is synced.
	// In this mode, he client will receive any state updates until the request is explicitly closed.
	StateSync_Maintain StateSync = 2
)

var StateSync_name = map[int32]string{
	0: "StateSync_None",
	1: "StateSync_CloseOnSync",
	2: "StateSync_Maintain",
}

var StateSync_value = map[string]int32{
	"StateSync_None":        0,
	"StateSync_CloseOnSync": 1,
	"StateSync_Maintain":    2,
}

func (StateSync) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ab24c3800b7c0c17, []int{5}
}

type Enable int32

const (
	Enable_LatentOff Enable = 0
	Enable_LatentOn  Enable = 1
	Enable_ActiveOn  Enable = 2
	Enable_ActiveOff Enable = 3
)

var Enable_name = map[int32]string{
	0: "Enable_LatentOff",
	1: "Enable_LatentOn",
	2: "Enable_ActiveOn",
	3: "Enable_ActiveOff",
}

var Enable_value = map[string]int32{
	"Enable_LatentOff": 0,
	"Enable_LatentOn":  1,
	"Enable_ActiveOn":  2,
	"Enable_ActiveOff": 3,
}

func (Enable) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ab24c3800b7c0c17, []int{6}
}

type UriScheme int32

const (
	UriScheme_Nil  UriScheme = 0
	UriScheme_Path UriScheme = 2
	UriScheme_Http UriScheme = 4
	UriScheme_Data UriScheme = 5
	UriScheme_File UriScheme = 6
	UriScheme_Amp  UriScheme = 9
)

var UriScheme_name = map[int32]string{
	0: "UriScheme_Nil",
	2: "UriScheme_Path",
	4: "UriScheme_Http",
	5: "UriScheme_Data",
	6: "UriScheme_File",
	9: "UriScheme_Amp",
}

var UriScheme_value = map[string]int32{
	"UriScheme_Nil":  0,
	"UriScheme_Path": 2,
	"UriScheme_Http": 4,
	"UriScheme_Data": 5,
	"UriScheme_File": 6,
	"UriScheme_Amp":  9,
}

func (UriScheme) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ab24c3800b7c0c17, []int{7}
}

// Grid specifies a standard lattice or coordinate convention.
type Grid int32

const (
	Grid_Ortho                 Grid = 0
	Grid_Cylinder              Grid = 5
	Grid_Sphere                Grid = 6
	Grid_Tile                  Grid = 7
	Grid_EquallaterialRhomboid Grid = 16
	Grid_TrapezoDodecahedron   Grid = 17
)

var Grid_name = map[int32]string{
	0:  "Grid_Ortho",
	5:  "Grid_Cylinder",
	6:  "Grid_Sphere",
	7:  "Grid_Tile",
	16: "Grid_EquallaterialRhomboid",
	17: "Grid_TrapezoDodecahedron",
}

var Grid_value = map[string]int32{
	"Grid_Ortho":                 0,
	"Grid_Cylinder":              5,
	"Grid_Sphere":                6,
	"Grid_Tile":                  7,
	"Grid_EquallaterialRhomboid": 16,
	"Grid_TrapezoDodecahedron":   17,
}

func (Grid) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ab24c3800b7c0c17, []int{8}
}

type Swizzle int32

const (
	Swizzle_UTC16_Geo_Local Swizzle = 0
	Swizzle_Geo_Local_UTC16 Swizzle = 1
)

var Swizzle_name = map[int32]string{
	0: "Swizzle_UTC16_Geo_Local",
	1: "Swizzle_Geo_Local_UTC16",
}

var Swizzle_value = map[string]int32{
	"Swizzle_UTC16_Geo_Local": 0,
	"Swizzle_Geo_Local_UTC16": 1,
}

func (Swizzle) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ab24c3800b7c0c17, []int{9}
}

// Units specifies a standard units convention.
type Units int32

const (
	Units_Unspecified Units = 0
	Units_Operations  Units = 1
	Units_Bytes       Units = 2
	Units_Pixels      Units = 3
	Units_Plank       Units = 5
	Units_Nanometers  Units = 7
	Units_Millimeters Units = 10
	Units_Meters      Units = 11
	Units_LightYears  Units = 16
)

var Units_name = map[int32]string{
	0:  "Units_Unspecified",
	1:  "Units_Operations",
	2:  "Units_Bytes",
	3:  "Units_Pixels",
	5:  "Units_Plank",
	7:  "Units_Nanometers",
	10: "Units_Millimeters",
	11: "Units_Meters",
	16: "Units_LightYears",
}

var Units_value = map[string]int32{
	"Units_Unspecified": 0,
	"Units_Operations":  1,
	"Units_Bytes":       2,
	"Units_Pixels":      3,
	"Units_Plank":       5,
	"Units_Nanometers":  7,
	"Units_Millimeters": 10,
	"Units_Meters":      11,
	"Units_LightYears":  16,
}

func (Units) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ab24c3800b7c0c17, []int{10}
}

// CryptoKitID identifies an encryption suite that implements ski.CryptoKit
type CryptoKitID int32

const (
	CryptoKit_Nil             CryptoKitID = 0
	CryptoKit_SecretBox_NaCl  CryptoKitID = 100
	CryptoKit_AsymMsg_NaCl    CryptoKitID = 101
	CryptoKit_Signing_NaCl    CryptoKitID = 102
	CryptoKit_Signing_ED25519 CryptoKitID = 202
)

var CryptoKitID_name = map[int32]string{
	0:   "CryptoKit_Nil",
	100: "CryptoKit_SecretBox_NaCl",
	101: "CryptoKit_AsymMsg_NaCl",
	102: "CryptoKit_Signing_NaCl",
	202: "CryptoKit_Signing_ED25519",
}

var CryptoKitID_value = map[string]int32{
	"CryptoKit_Nil":             0,
	"CryptoKit_SecretBox_NaCl":  100,
	"CryptoKit_AsymMsg_NaCl":    101,
	"CryptoKit_Signing_NaCl":    102,
	"CryptoKit_Signing_ED25519": 202,
}

func (CryptoKitID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ab24c3800b7c0c17, []int{11}
}

// ErrCode expresses status and error codes.
type ErrCode int32

const (
	ErrCode_Nil                        ErrCode = 0
	ErrCode_Unnamed                    ErrCode = -23001
	ErrCode_AssertFailed               ErrCode = -23002
	ErrCode_UnsupportedOp              ErrCode = -23003
	ErrCode_Unimplemented              ErrCode = -23004
	ErrCode_Timeout                    ErrCode = -23005
	ErrCode_ShuttingDown               ErrCode = -23006
	ErrCode_NotConnected               ErrCode = -23007
	ErrCode_AuthFailed                 ErrCode = -23008
	ErrCode_LoginFailed                ErrCode = -23009
	ErrCode_SessionExpired             ErrCode = -23010
	ErrCode_NotReady                   ErrCode = -23011
	ErrCode_RequestNotFound            ErrCode = -23020
	ErrCode_RequestClosed              ErrCode = -23021
	ErrCode_BadRequest                 ErrCode = -23022
	ErrCode_InvalidURI                 ErrCode = -23023
	ErrCode_BadValue                   ErrCode = -23024
	ErrCode_InvalidTag                 ErrCode = -23025
	ErrCode_AttrNotFound               ErrCode = -23026
	ErrCode_NothingToCommit            ErrCode = -23027
	ErrCode_CommitFailed               ErrCode = -23028
	ErrCode_StoreNotFound              ErrCode = -23029
	ErrCode_StorageFailure             ErrCode = -23030
	ErrCode_AppNotFound                ErrCode = -23031
	ErrCode_MalformedTx                ErrCode = -23032
	ErrCode_BadSchema                  ErrCode = -23040
	ErrCode_DataFailure                ErrCode = -23041
	ErrCode_ExportErr                  ErrCode = -23042
	ErrCode_PinFailed                  ErrCode = -23043
	ErrCode_CellNotFound               ErrCode = -23044
	ErrCode_ProviderErr                ErrCode = -23045
	ErrCode_ViolatesAppendOnly         ErrCode = -23050
	ErrCode_InsufficientPermissions    ErrCode = -23051
	ErrCode_CryptoKitAlreadyRegistered ErrCode = -23100
	ErrCode_UnrecognizedCryptoKit      ErrCode = -23101
	ErrCode_DecryptFailed              ErrCode = -23102
	ErrCode_VerifySignatureFailed      ErrCode = -23103
	ErrCode_BadKeyFormat               ErrCode = -23104
	ErrCode_KeyGenerationFailed        ErrCode = -23105
	ErrCode_KeyringNotFound            ErrCode = -23106
	ErrCode_KeyEntryNotFound           ErrCode = -23107
	ErrCode_HashKitNotFound            ErrCode = -23108
	ErrCode_SessionNotReady            ErrCode = -23109
	ErrCode_UnrecognizedCryptOp        ErrCode = -23110
	ErrCode_MarshalFailed              ErrCode = -23111
	ErrCode_UnmarshalFailed            ErrCode = -23112
)

var ErrCode_name = map[int32]string{
	0:      "ErrCode_Nil",
	-23001: "ErrCode_Unnamed",
	-23002: "ErrCode_AssertFailed",
	-23003: "ErrCode_UnsupportedOp",
	-23004: "ErrCode_Unimplemented",
	-23005: "ErrCode_Timeout",
	-23006: "ErrCode_ShuttingDown",
	-23007: "ErrCode_NotConnected",
	-23008: "ErrCode_AuthFailed",
	-23009: "ErrCode_LoginFailed",
	-23010: "ErrCode_SessionExpired",
	-23011: "ErrCode_NotReady",
	-23020: "ErrCode_RequestNotFound",
	-23021: "ErrCode_RequestClosed",
	-23022: "ErrCode_BadRequest",
	-23023: "ErrCode_InvalidURI",
	-23024: "ErrCode_BadValue",
	-23025: "ErrCode_InvalidTag",
	-23026: "ErrCode_AttrNotFound",
	-23027: "ErrCode_NothingToCommit",
	-23028: "ErrCode_CommitFailed",
	-23029: "ErrCode_StoreNotFound",
	-23030: "ErrCode_StorageFailure",
	-23031: "ErrCode_AppNotFound",
	-23032: "ErrCode_MalformedTx",
	-23040: "ErrCode_BadSchema",
	-23041: "ErrCode_DataFailure",
	-23042: "ErrCode_ExportErr",
	-23043: "ErrCode_PinFailed",
	-23044: "ErrCode_CellNotFound",
	-23045: "ErrCode_ProviderErr",
	-23050: "ErrCode_ViolatesAppendOnly",
	-23051: "ErrCode_InsufficientPermissions",
	-23100: "ErrCode_CryptoKitAlreadyRegistered",
	-23101: "ErrCode_UnrecognizedCryptoKit",
	-23102: "ErrCode_DecryptFailed",
	-23103: "ErrCode_VerifySignatureFailed",
	-23104: "ErrCode_BadKeyFormat",
	-23105: "ErrCode_KeyGenerationFailed",
	-23106: "ErrCode_KeyringNotFound",
	-23107: "ErrCode_KeyEntryNotFound",
	-23108: "ErrCode_HashKitNotFound",
	-23109: "ErrCode_SessionNotReady",
	-23110: "ErrCode_UnrecognizedCryptOp",
	-23111: "ErrCode_MarshalFailed",
	-23112: "ErrCode_UnmarshalFailed",
}

var ErrCode_value = map[string]int32{
	"ErrCode_Nil":                        0,
	"ErrCode_Unnamed":                    -23001,
	"ErrCode_AssertFailed":               -23002,
	"ErrCode_UnsupportedOp":              -23003,
	"ErrCode_Unimplemented":              -23004,
	"ErrCode_Timeout":                    -23005,
	"ErrCode_ShuttingDown":               -23006,
	"ErrCode_NotConnected":               -23007,
	"ErrCode_AuthFailed":                 -23008,
	"ErrCode_LoginFailed":                -23009,
	"ErrCode_SessionExpired":             -23010,
	"ErrCode_NotReady":                   -23011,
	"ErrCode_RequestNotFound":            -23020,
	"ErrCode_RequestClosed":              -23021,
	"ErrCode_BadRequest":                 -23022,
	"ErrCode_InvalidURI":                 -23023,
	"ErrCode_BadValue":                   -23024,
	"ErrCode_InvalidTag":                 -23025,
	"ErrCode_AttrNotFound":               -23026,
	"ErrCode_NothingToCommit":            -23027,
	"ErrCode_CommitFailed":               -23028,
	"ErrCode_StoreNotFound":              -23029,
	"ErrCode_StorageFailure":             -23030,
	"ErrCode_AppNotFound":                -23031,
	"ErrCode_MalformedTx":                -23032,
	"ErrCode_BadSchema":                  -23040,
	"ErrCode_DataFailure":                -23041,
	"ErrCode_ExportErr":                  -23042,
	"ErrCode_PinFailed":                  -23043,
	"ErrCode_CellNotFound":               -23044,
	"ErrCode_ProviderErr":                -23045,
	"ErrCode_ViolatesAppendOnly":         -23050,
	"ErrCode_InsufficientPermissions":    -23051,
	"ErrCode_CryptoKitAlreadyRegistered": -23100,
	"ErrCode_UnrecognizedCryptoKit":      -23101,
	"ErrCode_DecryptFailed":              -23102,
	"ErrCode_VerifySignatureFailed":      -23103,
	"ErrCode_BadKeyFormat":               -23104,
	"ErrCode_KeyGenerationFailed":        -23105,
	"ErrCode_KeyringNotFound":            -23106,
	"ErrCode_KeyEntryNotFound":           -23107,
	"ErrCode_HashKitNotFound":            -23108,
	"ErrCode_SessionNotReady":            -23109,
	"ErrCode_UnrecognizedCryptOp":        -23110,
	"ErrCode_MarshalFailed":              -23111,
	"ErrCode_UnmarshalFailed":            -23112,
}

func (ErrCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ab24c3800b7c0c17, []int{12}
}

type LogLevel int32

const (
	LogLevel_Error LogLevel = 0
	LogLevel_Warn  LogLevel = 2
	LogLevel_Info  LogLevel = 4
)

var LogLevel_name = map[int32]string{
	0: "LogLevel_Error",
	2: "LogLevel_Warn",
	4: "LogLevel_Info",
}

var LogLevel_value = map[string]int32{
	"LogLevel_Error": 0,
	"LogLevel_Warn":  2,
	"LogLevel_Info":  4,
}

func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ab24c3800b7c0c17, []int{13}
}

// TxHeader contains information for a TxMsg
type TxHeader struct {
	// communicates request status / completion.
	Status OpStatus `protobuf:"varint,1,opt,name=Status,proto3,enum=amp.OpStatus" json:"Status,omitempty"`
	// The number of TxOps in this TxHeader
	OpCount uint64 `protobuf:"varint,2,opt,name=OpCount,proto3" json:"OpCount,omitempty"`
	// Epoch that this Tx was created within.
	Epoch *Tag `protobuf:"bytes,3,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
	// A universally unique, securely generated tag.ID assigned when is Tx originates.
	// Also serves as context ID for subsequent requests and responses.
	TxID_0 int64  `protobuf:"varint,5,opt,name=TxID_0,json=TxID0,proto3" json:"TxID_0,omitempty"`
	TxID_1 uint64 `protobuf:"fixed64,6,opt,name=TxID_1,json=TxID1,proto3" json:"TxID_1,omitempty"`
	TxID_2 uint64 `protobuf:"fixed64,7,opt,name=TxID_2,json=TxID2,proto3" json:"TxID_2,omitempty"`
	// If set, this references a previously witnessed tx -- typically used to respond to a request.
	// If nil or equal to TxID, then this tx is context-free and TxID is implied context ID.
	ContextID_0 int64  `protobuf:"varint,10,opt,name=ContextID_0,json=ContextID0,proto3" json:"ContextID_0,omitempty"`
	ContextID_1 uint64 `protobuf:"fixed64,11,opt,name=ContextID_1,json=ContextID1,proto3" json:"ContextID_1,omitempty"`
	ContextID_2 uint64 `protobuf:"fixed64,12,opt,name=ContextID_2,json=ContextID2,proto3" json:"ContextID_2,omitempty"`
	// recipient of this TxHeader
	RouteTo *Tag `protobuf:"bytes,15,opt,name=RouteTo,proto3" json:"RouteTo,omitempty"`
	// headers / metadata / context
	Attachments *Tags `protobuf:"bytes,32,opt,name=Attachments,proto3" json:"Attachments,omitempty"`
}

func (m *TxHeader) Reset()      { *m = TxHeader{} }
func (*TxHeader) ProtoMessage() {}
func (*TxHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab24c3800b7c0c17, []int{0}
}
func (m *TxHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxHeader.Merge(m, src)
}
func (m *TxHeader) XXX_Size() int {
	return m.Size()
}
func (m *TxHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_TxHeader.DiscardUnknown(m)
}

var xxx_messageInfo_TxHeader proto.InternalMessageInfo

func (m *TxHeader) GetStatus() OpStatus {
	if m != nil {
		return m.Status
	}
	return OpStatus_NotStarted
}

func (m *TxHeader) GetOpCount() uint64 {
	if m != nil {
		return m.OpCount
	}
	return 0
}

func (m *TxHeader) GetEpoch() *Tag {
	if m != nil {
		return m.Epoch
	}
	return nil
}

func (m *TxHeader) GetTxID_0() int64 {
	if m != nil {
		return m.TxID_0
	}
	return 0
}

func (m *TxHeader) GetTxID_1() uint64 {
	if m != nil {
		return m.TxID_1
	}
	return 0
}

func (m *TxHeader) GetTxID_2() uint64 {
	if m != nil {
		return m.TxID_2
	}
	return 0
}

func (m *TxHeader) GetContextID_0() int64 {
	if m != nil {
		return m.ContextID_0
	}
	return 0
}

func (m *TxHeader) GetContextID_1() uint64 {
	if m != nil {
		return m.ContextID_1
	}
	return 0
}

func (m *TxHeader) GetContextID_2() uint64 {
	if m != nil {
		return m.ContextID_2
	}
	return 0
}

func (m *TxHeader) GetRouteTo() *Tag {
	if m != nil {
		return m.RouteTo
	}
	return nil
}

func (m *TxHeader) GetAttachments() *Tags {
	if m != nil {
		return m.Attachments
	}
	return nil
}

// Login -- STEP 1: client -> host
type Login struct {
	UserID   *Tag `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	DeviceID *Tag `protobuf:"bytes,5,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	// HostAddress is network address of the server known to the client (e.g. IP address, localhost, domain name, etc)
	// amp.Host uses this to as the host name when serving URLs for the client to consume.
	HostAddress string `protobuf:"bytes,8,opt,name=HostAddress,proto3" json:"HostAddress,omitempty"`
	// Tags is an unordered list of string literals tokens with predefined meanings, separated by spaces, periods, or commas.
	Tags string `protobuf:"bytes,9,opt,name=Tags,proto3" json:"Tags,omitempty"`
	// Checkpoint allows the client to resume an auth session.
	Checkpoint *LoginCheckpoint `protobuf:"bytes,12,opt,name=Checkpoint,proto3" json:"Checkpoint,omitempty"`
}

func (m *Login) Reset()      { *m = Login{} }
func (*Login) ProtoMessage() {}
func (*Login) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab24c3800b7c0c17, []int{1}
}
func (m *Login) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Login) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Login.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Login) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Login.Merge(m, src)
}
func (m *Login) XXX_Size() int {
	return m.Size()
}
func (m *Login) XXX_DiscardUnknown() {
	xxx_messageInfo_Login.DiscardUnknown(m)
}

var xxx_messageInfo_Login proto.InternalMessageInfo

func (m *Login) GetUserID() *Tag {
	if m != nil {
		return m.UserID
	}
	return nil
}

func (m *Login) GetDeviceID() *Tag {
	if m != nil {
		return m.DeviceID
	}
	return nil
}

func (m *Login) GetHostAddress() string {
	if m != nil {
		return m.HostAddress
	}
	return ""
}

func (m *Login) GetTags() string {
	if m != nil {
		return m.Tags
	}
	return ""
}

func (m *Login) GetCheckpoint() *LoginCheckpoint {
	if m != nil {
		return m.Checkpoint
	}
	return nil
}

// LoginChallenge -- STEP 2: host -> client
type LoginChallenge struct {
	Hash []byte `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (m *LoginChallenge) Reset()      { *m = LoginChallenge{} }
func (*LoginChallenge) ProtoMessage() {}
func (*LoginChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab24c3800b7c0c17, []int{2}
}
func (m *LoginChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginChallenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginChallenge.Merge(m, src)
}
func (m *LoginChallenge) XXX_Size() int {
	return m.Size()
}
func (m *LoginChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_LoginChallenge proto.InternalMessageInfo

func (m *LoginChallenge) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

// LoginResponse -- STEP 3: client -> host
type LoginResponse struct {
	HashResponse []byte `protobuf:"bytes,1,opt,name=HashResponse,proto3" json:"HashResponse,omitempty"`
}

func (m *LoginResponse) Reset()      { *m = LoginResponse{} }
func (*LoginResponse) ProtoMessage() {}
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab24c3800b7c0c17, []int{3}
}
func (m *LoginResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginResponse.Merge(m, src)
}
func (m *LoginResponse) XXX_Size() int {
	return m.Size()
}
func (m *LoginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoginResponse proto.InternalMessageInfo

func (m *LoginResponse) GetHashResponse() []byte {
	if m != nil {
		return m.HashResponse
	}
	return nil
}

// LoginCheckpoint wraps oauth2 -- see oauth2.Token
type LoginCheckpoint struct {
	TokenType    string `protobuf:"bytes,1,opt,name=TokenType,proto3" json:"TokenType,omitempty"`
	AccessToken  string `protobuf:"bytes,2,opt,name=AccessToken,proto3" json:"AccessToken,omitempty"`
	RefreshToken string `protobuf:"bytes,3,opt,name=RefreshToken,proto3" json:"RefreshToken,omitempty"`
	Expiry       int64  `protobuf:"varint,4,opt,name=Expiry,proto3" json:"Expiry,omitempty"`
	UserID       string `protobuf:"bytes,11,opt,name=UserID,proto3" json:"UserID,omitempty"`
	URI          string `protobuf:"bytes,12,opt,name=URI,proto3" json:"URI,omitempty"`
}

func (m *LoginCheckpoint) Reset()      { *m = LoginCheckpoint{} }
func (*LoginCheckpoint) ProtoMessage() {}
func (*LoginCheckpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab24c3800b7c0c17, []int{4}
}
func (m *LoginCheckpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginCheckpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginCheckpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginCheckpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginCheckpoint.Merge(m, src)
}
func (m *LoginCheckpoint) XXX_Size() int {
	return m.Size()
}
func (m *LoginCheckpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginCheckpoint.DiscardUnknown(m)
}

var xxx_messageInfo_LoginCheckpoint proto.InternalMessageInfo

func (m *LoginCheckpoint) GetTokenType() string {
	if m != nil {
		return m.TokenType
	}
	return ""
}

func (m *LoginCheckpoint) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *LoginCheckpoint) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func (m *LoginCheckpoint) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *LoginCheckpoint) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *LoginCheckpoint) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

// PinRequest is a client request to "pin" a cell, meaning selected attrs and child cells will be pushed to the client.
type PinRequest struct {
	// Expresses a planet and/or cell subset to pin
	Select *Tags `protobuf:"bytes,1,opt,name=Select,proto3" json:"Select,omitempty"`
	// Options for this request.
	StateSync StateSync `protobuf:"varint,6,opt,name=StateSync,proto3,enum=amp.StateSync" json:"StateSync,omitempty"`
}

func (m *PinRequest) Reset()      { *m = PinRequest{} }
func (*PinRequest) ProtoMessage() {}
func (*PinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab24c3800b7c0c17, []int{5}
}
func (m *PinRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PinRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PinRequest.Merge(m, src)
}
func (m *PinRequest) XXX_Size() int {
	return m.Size()
}
func (m *PinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PinRequest proto.InternalMessageInfo

func (m *PinRequest) GetSelect() *Tags {
	if m != nil {
		return m.Select
	}
	return nil
}

func (m *PinRequest) GetStateSync() StateSync {
	if m != nil {
		return m.StateSync
	}
	return StateSync_None
}

// Tag is a versitile and lightweight way to fuse any URL, ID, precise geo-location, crypto address, content-type, or payload text.
//
// All fields are optional and whose meaning is contextual.
//
// Also see tag.ID.
type Tag struct {
	ID_0        int64   `protobuf:"varint,1,opt,name=ID_0,json=ID0,proto3" json:"ID_0,omitempty"`
	ID_1        uint64  `protobuf:"fixed64,2,opt,name=ID_1,json=ID1,proto3" json:"ID_1,omitempty"`
	ID_2        uint64  `protobuf:"fixed64,3,opt,name=ID_2,json=ID2,proto3" json:"ID_2,omitempty"`
	Swizzle     Swizzle `protobuf:"varint,5,opt,name=Swizzle,proto3,enum=amp.Swizzle" json:"Swizzle,omitempty"`
	Grid        Grid    `protobuf:"varint,7,opt,name=Grid,proto3,enum=amp.Grid" json:"Grid,omitempty"`
	Units       Units   `protobuf:"varint,8,opt,name=Units,proto3,enum=amp.Units" json:"Units,omitempty"`
	R           int64   `protobuf:"varint,12,opt,name=R,proto3" json:"R,omitempty"`
	I           int64   `protobuf:"varint,13,opt,name=I,proto3" json:"I,omitempty"`
	J           int64   `protobuf:"varint,14,opt,name=J,proto3" json:"J,omitempty"`
	ContentType string  `protobuf:"bytes,17,opt,name=ContentType,proto3" json:"ContentType,omitempty"`
	URI         string  `protobuf:"bytes,18,opt,name=URI,proto3" json:"URI,omitempty"`
	Text        string  `protobuf:"bytes,19,opt,name=Text,proto3" json:"Text,omitempty"`
}

func (m *Tag) Reset()      { *m = Tag{} }
func (*Tag) ProtoMessage() {}
func (*Tag) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab24c3800b7c0c17, []int{6}
}
func (m *Tag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tag.Merge(m, src)
}
func (m *Tag) XXX_Size() int {
	return m.Size()
}
func (m *Tag) XXX_DiscardUnknown() {
	xxx_messageInfo_Tag.DiscardUnknown(m)
}

var xxx_messageInfo_Tag proto.InternalMessageInfo

func (m *Tag) GetID_0() int64 {
	if m != nil {
		return m.ID_0
	}
	return 0
}

func (m *Tag) GetID_1() uint64 {
	if m != nil {
		return m.ID_1
	}
	return 0
}

func (m *Tag) GetID_2() uint64 {
	if m != nil {
		return m.ID_2
	}
	return 0
}

func (m *Tag) GetSwizzle() Swizzle {
	if m != nil {
		return m.Swizzle
	}
	return Swizzle_UTC16_Geo_Local
}

func (m *Tag) GetGrid() Grid {
	if m != nil {
		return m.Grid
	}
	return Grid_Ortho
}

func (m *Tag) GetUnits() Units {
	if m != nil {
		return m.Units
	}
	return Units_Unspecified
}

func (m *Tag) GetR() int64 {
	if m != nil {
		return m.R
	}
	return 0
}

func (m *Tag) GetI() int64 {
	if m != nil {
		return m.I
	}
	return 0
}

func (m *Tag) GetJ() int64 {
	if m != nil {
		return m.J
	}
	return 0
}

func (m *Tag) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *Tag) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

func (m *Tag) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

// Tags is a multi-purpose, automatically serializable and customizable tree of tags.
//
// All fields are optional and whose meaning is contextual.
type Tags struct {
	Head     *Tag    `protobuf:"bytes,1,opt,name=Head,proto3" json:"Head,omitempty"`
	Store    []byte  `protobuf:"bytes,2,opt,name=Store,proto3" json:"Store,omitempty"`
	SubTags  []*Tag  `protobuf:"bytes,4,rep,name=SubTags,proto3" json:"SubTags,omitempty"`
	SubTrees []*Tags `protobuf:"bytes,6,rep,name=SubTrees,proto3" json:"SubTrees,omitempty"`
}

func (m *Tags) Reset()      { *m = Tags{} }
func (*Tags) ProtoMessage() {}
func (*Tags) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab24c3800b7c0c17, []int{7}
}
func (m *Tags) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tags.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tags.Merge(m, src)
}
func (m *Tags) XXX_Size() int {
	return m.Size()
}
func (m *Tags) XXX_DiscardUnknown() {
	xxx_messageInfo_Tags.DiscardUnknown(m)
}

var xxx_messageInfo_Tags proto.InternalMessageInfo

func (m *Tags) GetHead() *Tag {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *Tags) GetStore() []byte {
	if m != nil {
		return m.Store
	}
	return nil
}

func (m *Tags) GetSubTags() []*Tag {
	if m != nil {
		return m.SubTags
	}
	return nil
}

func (m *Tags) GetSubTrees() []*Tags {
	if m != nil {
		return m.SubTrees
	}
	return nil
}

// Err is a general purpose error / warning / log message.
type Err struct {
	// Identifies the type of error.
	Code ErrCode `protobuf:"varint,1,opt,name=Code,proto3,enum=amp.ErrCode" json:"Code,omitempty"`
	// Severity level
	Level LogLevel `protobuf:"varint,2,opt,name=Level,proto3,enum=amp.LogLevel" json:"Level,omitempty"`
	// human-readable info
	Msg string `protobuf:"bytes,4,opt,name=Msg,proto3" json:"Msg,omitempty"`
}

func (m *Err) Reset()      { *m = Err{} }
func (*Err) ProtoMessage() {}
func (*Err) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab24c3800b7c0c17, []int{8}
}
func (m *Err) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Err) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Err.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Err) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Err.Merge(m, src)
}
func (m *Err) XXX_Size() int {
	return m.Size()
}
func (m *Err) XXX_DiscardUnknown() {
	xxx_messageInfo_Err.DiscardUnknown(m)
}

var xxx_messageInfo_Err proto.InternalMessageInfo

func (m *Err) GetCode() ErrCode {
	if m != nil {
		return m.Code
	}
	return ErrCode_Nil
}

func (m *Err) GetLevel() LogLevel {
	if m != nil {
		return m.Level
	}
	return LogLevel_Error
}

func (m *Err) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterEnum("amp.Const", Const_name, Const_value)
	proto.RegisterEnum("amp.TxOpCode", TxOpCode_name, TxOpCode_value)
	proto.RegisterEnum("amp.TxField", TxField_name, TxField_value)
	proto.RegisterEnum("amp.SelectOp", SelectOp_name, SelectOp_value)
	proto.RegisterEnum("amp.OpStatus", OpStatus_name, OpStatus_value)
	proto.RegisterEnum("amp.StateSync", StateSync_name, StateSync_value)
	proto.RegisterEnum("amp.Enable", Enable_name, Enable_value)
	proto.RegisterEnum("amp.UriScheme", UriScheme_name, UriScheme_value)
	proto.RegisterEnum("amp.Grid", Grid_name, Grid_value)
	proto.RegisterEnum("amp.Swizzle", Swizzle_name, Swizzle_value)
	proto.RegisterEnum("amp.Units", Units_name, Units_value)
	proto.RegisterEnum("amp.CryptoKitID", CryptoKitID_name, CryptoKitID_value)
	proto.RegisterEnum("amp.ErrCode", ErrCode_name, ErrCode_value)
	proto.RegisterEnum("amp.LogLevel", LogLevel_name, LogLevel_value)
	proto.RegisterType((*TxHeader)(nil), "amp.TxHeader")
	proto.RegisterType((*Login)(nil), "amp.Login")
	proto.RegisterType((*LoginChallenge)(nil), "amp.LoginChallenge")
	proto.RegisterType((*LoginResponse)(nil), "amp.LoginResponse")
	proto.RegisterType((*LoginCheckpoint)(nil), "amp.LoginCheckpoint")
	proto.RegisterType((*PinRequest)(nil), "amp.PinRequest")
	proto.RegisterType((*Tag)(nil), "amp.Tag")
	proto.RegisterType((*Tags)(nil), "amp.Tags")
	proto.RegisterType((*Err)(nil), "amp.Err")
}

func init() { proto.RegisterFile("amp.core.proto", fileDescriptor_ab24c3800b7c0c17) }

var fileDescriptor_ab24c3800b7c0c17 = []byte{
	// 2240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x58, 0xcb, 0x93, 0x5b, 0x47,
	0xf5, 0x9e, 0x2b, 0x69, 0x34, 0xa3, 0x9e, 0xb1, 0xdc, 0x6e, 0xbf, 0x94, 0x87, 0x15, 0x45, 0x49,
	0x7e, 0xbf, 0x41, 0x24, 0x4e, 0xa4, 0x10, 0x28, 0x96, 0x33, 0x92, 0x1c, 0x2b, 0x9e, 0x57, 0x5d,
	0x69, 0x4c, 0x41, 0x15, 0x51, 0xb5, 0x75, 0x8f, 0xa4, 0x2e, 0x5f, 0x75, 0xdf, 0xf4, 0x6d, 0x4d,
	0x24, 0xaf, 0xc2, 0x22, 0xc5, 0x1b, 0xc2, 0xa3, 0xa8, 0x62, 0xc1, 0xfb, 0x59, 0xfc, 0x03, 0x3c,
	0x42, 0xc2, 0x73, 0x91, 0xc2, 0x2c, 0xbc, 0x4c, 0xb1, 0x22, 0x13, 0x16, 0x2c, 0xb3, 0x81, 0xa2,
	0x0a, 0x48, 0xa8, 0xee, 0xfb, 0x92, 0xec, 0x0b, 0xde, 0x4c, 0xf7, 0xf7, 0x7d, 0x7d, 0xba, 0xcf,
	0xe9, 0x73, 0x4e, 0x5f, 0x19, 0x15, 0xe9, 0xc4, 0xbb, 0x3c, 0x10, 0x12, 0x2e, 0x7b, 0x52, 0x28,
	0x41, 0xb2, 0x74, 0xe2, 0x55, 0xff, 0x92, 0x41, 0xeb, 0xbd, 0xd9, 0x55, 0xa0, 0x0e, 0x48, 0xf2,
	0x18, 0xca, 0x77, 0x15, 0x55, 0x53, 0xbf, 0x64, 0x55, 0xac, 0xad, 0x62, 0xe3, 0xd4, 0x65, 0xbd,
	0xe4, 0xc0, 0x0b, 0x40, 0x3b, 0x24, 0x49, 0x09, 0xad, 0x1d, 0x78, 0x4d, 0x31, 0xe5, 0xaa, 0x94,
	0xa9, 0x58, 0x5b, 0x39, 0x3b, 0x9a, 0x92, 0x32, 0x5a, 0x6d, 0x7b, 0x62, 0x30, 0x2e, 0x65, 0x2b,
	0xd6, 0xd6, 0x46, 0x63, 0xdd, 0xac, 0xef, 0xd1, 0x91, 0x1d, 0xc0, 0xe4, 0x3c, 0xca, 0xf7, 0x66,
	0x9d, 0x56, 0xff, 0xa9, 0xd2, 0x6a, 0xc5, 0xda, 0xca, 0xda, 0xab, 0x7a, 0xf6, 0x54, 0x0c, 0xd7,
	0x4b, 0xf9, 0x8a, 0xb5, 0x95, 0x0f, 0xe0, 0x7a, 0x0c, 0x37, 0x4a, 0x6b, 0x09, 0xdc, 0x20, 0x0f,
	0xa1, 0x8d, 0xa6, 0xe0, 0x0a, 0x66, 0xca, 0x58, 0x42, 0xc6, 0x12, 0x8a, 0xa1, 0xa7, 0x96, 0x05,
	0xf5, 0xd2, 0x86, 0x59, 0x9c, 0x08, 0xea, 0xcb, 0x82, 0x46, 0x69, 0xf3, 0x2e, 0x41, 0x83, 0x54,
	0xd1, 0x9a, 0x2d, 0xa6, 0x0a, 0x7a, 0xa2, 0x74, 0xfa, 0x2e, 0x4f, 0x22, 0x82, 0xbc, 0x1f, 0x6d,
	0x6c, 0x2b, 0x45, 0x07, 0xe3, 0x09, 0x70, 0xe5, 0x97, 0x2a, 0x46, 0x57, 0x88, 0x74, 0xbe, 0xbd,
	0xc8, 0x56, 0x5f, 0xb5, 0xd0, 0xea, 0xae, 0x18, 0x31, 0x4e, 0x2a, 0x28, 0x7f, 0xe4, 0x83, 0xec,
	0xb4, 0x4c, 0x8c, 0x17, 0x2d, 0x87, 0x38, 0x79, 0x14, 0xad, 0xb7, 0xe0, 0x98, 0x0d, 0xa0, 0xd3,
	0x32, 0x61, 0x5a, 0xd4, 0xc4, 0x0c, 0xa9, 0xa0, 0x8d, 0xab, 0xc2, 0x57, 0xdb, 0x8e, 0x23, 0xc1,
	0xf7, 0x4b, 0xeb, 0x15, 0x6b, 0xab, 0x60, 0x2f, 0x42, 0x84, 0xa0, 0x9c, 0x3e, 0x48, 0xa9, 0x60,
	0x28, 0x33, 0x26, 0x1f, 0x40, 0xa8, 0x39, 0x86, 0xc1, 0x4d, 0x4f, 0x30, 0xae, 0x8c, 0xe3, 0x1b,
	0x8d, 0x73, 0xc6, 0xba, 0x39, 0x5d, 0xc2, 0xd9, 0x0b, 0xba, 0xea, 0xa3, 0xa8, 0x18, 0xd2, 0xd4,
	0x75, 0x81, 0x8f, 0x40, 0xdb, 0xbe, 0x4a, 0xfd, 0xb1, 0xf1, 0x61, 0xd3, 0x36, 0xe3, 0xea, 0xd3,
	0xe8, 0x94, 0x51, 0xd9, 0xe0, 0x7b, 0x82, 0xfb, 0x40, 0xaa, 0x68, 0x53, 0x13, 0xd1, 0x3c, 0x14,
	0x2f, 0x61, 0xd5, 0x9f, 0x5a, 0xe8, 0xf4, 0x5d, 0x5b, 0x93, 0x07, 0x51, 0xa1, 0x27, 0x6e, 0x02,
	0xef, 0xcd, 0xbd, 0x60, 0x51, 0xc1, 0x4e, 0x00, 0xed, 0xf8, 0xf6, 0x60, 0x00, 0xbe, 0x6f, 0x20,
	0x93, 0x81, 0x05, 0x7b, 0x11, 0xd2, 0xfb, 0xda, 0x30, 0x94, 0xe0, 0x8f, 0x03, 0x49, 0xd6, 0x48,
	0x96, 0x30, 0x72, 0x01, 0xe5, 0xdb, 0x33, 0x8f, 0xc9, 0x79, 0x29, 0x67, 0xf2, 0x27, 0x9c, 0x69,
	0x3c, 0xbc, 0x9e, 0x0d, 0xb3, 0x2a, 0xba, 0x14, 0x8c, 0xb2, 0x47, 0x76, 0xc7, 0x44, 0xac, 0x60,
	0xeb, 0x61, 0xf5, 0xe3, 0x08, 0x1d, 0x6a, 0x67, 0x5f, 0x98, 0x82, 0xaf, 0xc8, 0xc3, 0x28, 0xdf,
	0x05, 0x17, 0x06, 0x2a, 0xbc, 0xd6, 0x85, 0x44, 0x08, 0x09, 0xf2, 0x38, 0x2a, 0xe8, 0x02, 0x82,
	0xee, 0x9c, 0x0f, 0x4c, 0xa2, 0x17, 0x1b, 0x45, 0xa3, 0x8a, 0x51, 0x3b, 0x11, 0x54, 0xbf, 0x9e,
	0x41, 0xd9, 0x1e, 0x1d, 0x91, 0x33, 0x28, 0x67, 0xd2, 0xdc, 0x32, 0xc7, 0xcc, 0xea, 0xfc, 0x0e,
	0xa0, 0xba, 0x71, 0x3d, 0xaf, 0xa1, 0x7a, 0x08, 0x35, 0x8c, 0xab, 0x06, 0x6a, 0x90, 0xff, 0x43,
	0x6b, 0xdd, 0x17, 0xd9, 0xad, 0x5b, 0x2e, 0x98, 0x2c, 0x2a, 0x36, 0x36, 0x83, 0xcd, 0x02, 0xcc,
	0x8e, 0x48, 0x72, 0x09, 0xe5, 0x9e, 0x95, 0xcc, 0x31, 0x35, 0x56, 0x0c, 0xcf, 0xad, 0x01, 0xdb,
	0xc0, 0xa4, 0x82, 0x56, 0x8f, 0x38, 0x53, 0x41, 0x86, 0x15, 0x1b, 0xc8, 0xf0, 0x06, 0xb1, 0x03,
	0x82, 0x6c, 0x22, 0xcb, 0x36, 0x81, 0xc9, 0xda, 0x96, 0xad, 0x67, 0x9d, 0xd2, 0xa9, 0x60, 0xd6,
	0xd1, 0xb3, 0xe7, 0x4a, 0xc5, 0x60, 0xf6, 0x9c, 0xbe, 0x3a, 0x53, 0x64, 0x5c, 0x99, 0xab, 0x3d,
	0x13, 0x5c, 0xdd, 0x02, 0x14, 0x85, 0x99, 0xc4, 0x61, 0x36, 0x59, 0x0c, 0x33, 0x55, 0x3a, 0x1b,
	0x66, 0x31, 0xcc, 0x54, 0xf5, 0x65, 0x2b, 0x48, 0x6d, 0xf2, 0x20, 0xca, 0xe9, 0xd6, 0x75, 0x4f,
	0x29, 0x19, 0x94, 0x9c, 0x43, 0xab, 0x5d, 0x25, 0x24, 0x98, 0x40, 0x6d, 0xda, 0xc1, 0x44, 0xd7,
	0x76, 0x77, 0x7a, 0xc3, 0x54, 0x46, 0xae, 0x92, 0x5d, 0xae, 0xed, 0x90, 0x20, 0x8f, 0xa1, 0x75,
	0x3d, 0x94, 0x00, 0x7e, 0x29, 0x6f, 0x44, 0x0b, 0xf7, 0x19, 0x53, 0xd5, 0xe7, 0x51, 0xb6, 0x2d,
	0x25, 0xa9, 0xa0, 0x5c, 0x53, 0x38, 0x10, 0x36, 0xcd, 0x20, 0xcc, 0x6d, 0x29, 0x35, 0x66, 0x1b,
	0x86, 0x3c, 0x82, 0x56, 0x77, 0xe1, 0x18, 0x5c, 0x73, 0x92, 0xa8, 0xaf, 0xee, 0x8a, 0x91, 0x01,
	0xed, 0x80, 0xd3, 0xbe, 0xef, 0xf9, 0x23, 0x93, 0x8f, 0x05, 0x5b, 0x0f, 0x6b, 0xaf, 0x5b, 0x68,
	0xb5, 0x29, 0xb8, 0xaf, 0x48, 0x11, 0x21, 0x33, 0xe8, 0xb7, 0x60, 0xe8, 0xe3, 0x15, 0x72, 0x01,
	0x91, 0x60, 0xae, 0x1d, 0x6d, 0x82, 0xeb, 0x76, 0x01, 0x1c, 0xfc, 0x21, 0x72, 0x09, 0x95, 0x62,
	0x1d, 0x9d, 0xba, 0xaa, 0x0b, 0x52, 0xf7, 0x8b, 0x43, 0x21, 0x15, 0x7e, 0x63, 0x8b, 0xdc, 0x87,
	0xce, 0x07, 0x74, 0x6f, 0x76, 0x28, 0x81, 0x4e, 0x6e, 0xb8, 0xd0, 0xef, 0xb2, 0x5b, 0x80, 0x31,
	0x79, 0x30, 0x5a, 0xb9, 0x40, 0x5d, 0x07, 0xe9, 0x33, 0xc1, 0xf1, 0xd3, 0xa4, 0x8c, 0x2e, 0xde,
	0xc3, 0xee, 0x51, 0x79, 0x13, 0x24, 0x7e, 0xe7, 0x4f, 0x2f, 0x67, 0xc9, 0x79, 0x84, 0x03, 0xbe,
	0xc3, 0x8f, 0xc5, 0x80, 0x2a, 0xbd, 0xea, 0xb5, 0x4b, 0xb5, 0x9e, 0x7e, 0x5c, 0xf4, 0xe3, 0xe0,
	0xe8, 0xab, 0xdd, 0x8c, 0xc6, 0xfd, 0x7d, 0xe6, 0xe2, 0x15, 0x72, 0x3f, 0xba, 0x10, 0x23, 0x47,
	0x9e, 0x0f, 0x52, 0xb5, 0x5d, 0xd0, 0xfd, 0x12, 0x67, 0x96, 0xb8, 0x16, 0xb8, 0xa0, 0x20, 0xe2,
	0x72, 0xb5, 0x3b, 0x19, 0xb4, 0xd6, 0x9b, 0x5d, 0x61, 0xe0, 0x3a, 0xe4, 0x34, 0xda, 0x08, 0x87,
	0xa1, 0xd1, 0x73, 0x08, 0x47, 0x80, 0x8e, 0x8b, 0xae, 0x1d, 0x6c, 0xa5, 0xa0, 0x75, 0x9c, 0x49,
	0x41, 0x1b, 0x38, 0xbb, 0x88, 0x6e, 0x2b, 0x25, 0x8d, 0x85, 0x5c, 0x0a, 0x5a, 0xc7, 0xab, 0x29,
	0x68, 0x03, 0xe7, 0x17, 0xd1, 0x8e, 0x82, 0x89, 0xb1, 0xb0, 0x96, 0x82, 0xd6, 0xf1, 0x7a, 0x0a,
	0xda, 0xc0, 0x85, 0x45, 0xb4, 0xed, 0x30, 0xf3, 0xd0, 0x61, 0x94, 0x82, 0xd6, 0xf1, 0x46, 0x0a,
	0xda, 0xc0, 0x9b, 0xe4, 0x3c, 0x3a, 0x13, 0x07, 0x66, 0x3a, 0x31, 0x03, 0x1f, 0x9f, 0x5a, 0x84,
	0xf7, 0xe8, 0x2c, 0x84, 0x4b, 0xb5, 0x5d, 0xb4, 0x1e, 0x74, 0xa9, 0x03, 0x4f, 0xdb, 0x8b, 0xc6,
	0xfd, 0x7d, 0x98, 0x2a, 0x49, 0xc3, 0xb8, 0xc6, 0x68, 0x87, 0x0f, 0xdc, 0xa9, 0x03, 0x41, 0x5c,
	0x63, 0xb4, 0x3d, 0x0b, 0xd0, 0x4c, 0xed, 0x18, 0xad, 0x47, 0x1f, 0x0d, 0xe4, 0x22, 0x3a, 0x1b,
	0x8d, 0xfb, 0xfb, 0x42, 0x75, 0x15, 0x95, 0x0a, 0x9c, 0xc0, 0x60, 0x4c, 0xe8, 0x8e, 0xc7, 0xf8,
	0x08, 0x5b, 0xe4, 0x0c, 0x3a, 0x15, 0xa3, 0x3b, 0x53, 0x7f, 0x8e, 0x33, 0xe4, 0x2c, 0x3a, 0xbd,
	0x24, 0x04, 0x07, 0x67, 0x97, 0xc0, 0xa6, 0x2b, 0x7c, 0x70, 0xf0, 0x5a, 0xcd, 0x5e, 0xe8, 0xb0,
	0x84, 0xa0, 0x62, 0x3c, 0xe9, 0xef, 0x0b, 0x0e, 0x78, 0x45, 0xe7, 0x7f, 0x82, 0x99, 0x65, 0x07,
	0x5c, 0x8f, 0xb1, 0xa5, 0x2b, 0x2a, 0xa1, 0xf6, 0x28, 0xe3, 0x8a, 0x32, 0x8e, 0x33, 0xb5, 0xe7,
	0x51, 0xbe, 0xcd, 0xe9, 0x0d, 0x17, 0xf4, 0x81, 0x83, 0x51, 0x7f, 0x97, 0xea, 0x86, 0x75, 0x30,
	0x1c, 0xe2, 0x15, 0x7d, 0x90, 0x65, 0x94, 0x63, 0x6b, 0x01, 0xdc, 0x1e, 0x28, 0x76, 0x0c, 0x07,
	0x3c, 0xc8, 0xb6, 0x65, 0x70, 0x38, 0xc4, 0xd9, 0xda, 0x27, 0x2c, 0x54, 0x38, 0x92, 0xac, 0x3b,
	0x18, 0xc3, 0x04, 0xb4, 0xfb, 0xf1, 0x24, 0x4c, 0x68, 0x82, 0x8a, 0x09, 0x74, 0x48, 0xd5, 0x18,
	0x67, 0x96, 0xb1, 0xab, 0x4a, 0x79, 0x38, 0xb7, 0x8c, 0xb5, 0xa8, 0xa2, 0x78, 0x75, 0x19, 0xbb,
	0xc2, 0x5c, 0xc0, 0xf9, 0xe5, 0x2d, 0xb6, 0x27, 0x1e, 0x2e, 0xd4, 0x3e, 0x69, 0x05, 0x6f, 0x80,
	0x6e, 0x33, 0xfa, 0x6f, 0xff, 0x40, 0xaa, 0xb1, 0xc0, 0x2b, 0x5a, 0x6b, 0xe6, 0xcd, 0xb9, 0xcb,
	0xb8, 0x03, 0x12, 0xaf, 0xea, 0x82, 0x33, 0x50, 0xd7, 0x1b, 0x83, 0xd4, 0xf6, 0x4e, 0xa1, 0x82,
	0x01, 0x7a, 0xda, 0xfc, 0x1a, 0x29, 0xa3, 0xfb, 0xcd, 0xb4, 0xfd, 0xc2, 0x94, 0xba, 0x2e, 0x55,
	0x20, 0x19, 0x75, 0xed, 0xb1, 0x98, 0xdc, 0x10, 0xcc, 0x09, 0xfa, 0x4c, 0x20, 0x97, 0xd4, 0x83,
	0x5b, 0xa2, 0x25, 0x1c, 0x18, 0xd0, 0x31, 0x38, 0x52, 0x70, 0x7c, 0xa6, 0xd6, 0x8c, 0x1f, 0x2d,
	0xf2, 0x00, 0xba, 0x18, 0x0e, 0xfb, 0x47, 0xbd, 0x66, 0xfd, 0x83, 0xfd, 0x67, 0x41, 0xf4, 0x77,
	0xc5, 0xc0, 0x64, 0xe3, 0x02, 0x19, 0xc3, 0x81, 0x0c, 0x5b, 0xb5, 0xd7, 0xac, 0xf0, 0xcd, 0xd2,
	0xd9, 0x6e, 0x06, 0xfd, 0x23, 0xee, 0x7b, 0x30, 0x60, 0x43, 0x16, 0xa5, 0x5e, 0x00, 0x1f, 0x78,
	0x20, 0x4d, 0xb3, 0xf2, 0xb1, 0xa5, 0x3d, 0x0b, 0xd0, 0x9d, 0xb9, 0x02, 0x1f, 0x67, 0x74, 0xc7,
	0x0a, 0x80, 0x43, 0x36, 0x03, 0xd7, 0xc7, 0xd9, 0x44, 0x72, 0xe8, 0x52, 0x7e, 0x33, 0xa8, 0xff,
	0x00, 0xd8, 0xa7, 0x5c, 0x4c, 0x40, 0x81, 0xf4, 0xf1, 0x5a, 0xb2, 0xed, 0x1e, 0x73, 0x5d, 0x16,
	0xc2, 0x28, 0xb1, 0xb7, 0x17, 0x20, 0x1b, 0xc9, 0xf2, 0x5d, 0x36, 0x1a, 0xab, 0x8f, 0x02, 0x95,
	0x3e, 0xc6, 0xb5, 0xaf, 0x59, 0x68, 0xa3, 0x29, 0xe7, 0x9e, 0x12, 0xd7, 0x74, 0x39, 0xeb, 0x5b,
	0x88, 0xa7, 0x61, 0x52, 0xe8, 0x6e, 0x1d, 0x43, 0x5d, 0x18, 0x48, 0x50, 0x3b, 0x62, 0xd6, 0xdf,
	0xa7, 0x4d, 0x17, 0x3b, 0xba, 0x79, 0x26, 0xec, 0xb6, 0x3f, 0x9f, 0xec, 0xf9, 0xa3, 0x80, 0x83,
	0x65, 0xae, 0xcb, 0x46, 0x9c, 0xf1, 0x90, 0x1b, 0x92, 0x32, 0xba, 0xef, 0x5e, 0xae, 0xdd, 0x6a,
	0x3c, 0xf3, 0x4c, 0xfd, 0xc3, 0xf8, 0x0f, 0x56, 0xed, 0x1f, 0x9b, 0x68, 0x2d, 0x7c, 0xd8, 0x74,
	0x28, 0xc2, 0x61, 0x7c, 0xa4, 0xd3, 0x11, 0x70, 0xc4, 0x39, 0x9d, 0x80, 0x83, 0x7f, 0xf4, 0xc7,
	0x77, 0xdf, 0x33, 0xff, 0x2c, 0xf2, 0x30, 0x3a, 0x17, 0xb1, 0xdb, 0xbe, 0x6e, 0xf5, 0x57, 0x28,
	0x73, 0xc1, 0xc1, 0x3f, 0x4c, 0x24, 0x55, 0x74, 0x3e, 0x31, 0xe0, 0x4f, 0x3d, 0x4f, 0xe8, 0x4e,
	0x71, 0xe0, 0xe1, 0x1f, 0xfc, 0x17, 0x0d, 0x9b, 0x78, 0xc1, 0x9b, 0x00, 0x0e, 0xfe, 0x7e, 0xa2,
	0x59, 0x38, 0x48, 0x8f, 0x4d, 0x40, 0x4c, 0x15, 0xfe, 0x5e, 0xea, 0x41, 0xba, 0xe3, 0xa9, 0x52,
	0x8c, 0x8f, 0x5a, 0xe2, 0x45, 0x8e, 0xbf, 0x9b, 0x2a, 0xd9, 0x17, 0xaa, 0x29, 0x38, 0x87, 0x81,
	0xde, 0xe3, 0x3b, 0x89, 0xe4, 0x21, 0x44, 0x62, 0x77, 0xa6, 0x6a, 0x1c, 0x3a, 0xf3, 0xed, 0x44,
	0x50, 0x41, 0x67, 0x23, 0x81, 0xf9, 0xbc, 0x0d, 0x15, 0xdf, 0x4a, 0x14, 0x8f, 0xa0, 0x0b, 0xf1,
	0x41, 0xc0, 0xd7, 0xef, 0xac, 0xf9, 0x04, 0x05, 0x07, 0x7f, 0x33, 0x11, 0x5d, 0x42, 0x78, 0xe1,
	0x28, 0x36, 0x50, 0x67, 0x8e, 0xbf, 0x91, 0xd0, 0x8f, 0xa2, 0x8b, 0x11, 0x1d, 0x7e, 0x88, 0xee,
	0x0b, 0x75, 0x45, 0x4c, 0xb9, 0x83, 0xbf, 0x9a, 0x1a, 0xb4, 0x50, 0x15, 0x76, 0xcc, 0xaf, 0xa4,
	0x3a, 0xb4, 0x43, 0x9d, 0x50, 0x86, 0xbf, 0x9c, 0x2a, 0xe8, 0xf0, 0x63, 0xea, 0x32, 0xe7, 0xc8,
	0xee, 0xe0, 0x2f, 0xa5, 0x1e, 0x75, 0x87, 0x3a, 0xd7, 0xa9, 0x3b, 0x05, 0xfc, 0xca, 0xff, 0x5a,
	0xdf, 0xa3, 0x23, 0xfc, 0xc5, 0xf4, 0x0c, 0x51, 0x4a, 0xc6, 0x8e, 0x7c, 0x21, 0xd5, 0xdd, 0x7d,
	0xa1, 0xc6, 0x8c, 0x8f, 0x7a, 0xa2, 0x29, 0x26, 0x13, 0xa6, 0xf0, 0xe7, 0x53, 0x0d, 0x05, 0x64,
	0x18, 0xfb, 0xcf, 0xa5, 0x46, 0xc4, 0x7c, 0x14, 0xc6, 0x9b, 0x7d, 0x36, 0xfd, 0x7e, 0x94, 0x90,
	0x74, 0x04, 0xda, 0xce, 0x54, 0x02, 0xfe, 0x4c, 0xea, 0x35, 0x6f, 0x7b, 0x5e, 0x6c, 0xe6, 0xd3,
	0xa9, 0x8a, 0x3d, 0xea, 0x0e, 0x85, 0x9c, 0x80, 0xd3, 0x9b, 0xe1, 0x4f, 0x25, 0x8a, 0x32, 0x3a,
	0xb3, 0x10, 0x38, 0xd3, 0x98, 0x29, 0x7e, 0x29, 0xd5, 0x82, 0x6e, 0xeb, 0xd1, 0x29, 0xde, 0xbb,
	0x9d, 0x66, 0xa1, 0x3d, 0xd3, 0x65, 0xd3, 0x96, 0x12, 0xbf, 0x9b, 0xca, 0x1f, 0xc6, 0xa9, 0xf8,
	0xef, 0xdb, 0xa9, 0x11, 0x03, 0xd7, 0x8d, 0xdd, 0xf8, 0xd7, 0xed, 0xb4, 0x43, 0x1c, 0x4a, 0x71,
	0xcc, 0x1c, 0x90, 0x7a, 0x93, 0x7f, 0x26, 0x8a, 0xff, 0x47, 0xf7, 0x47, 0x8a, 0xeb, 0x4c, 0xe8,
	0xce, 0xef, 0x6f, 0x7b, 0x1e, 0x70, 0xe7, 0x80, 0xbb, 0x73, 0xfc, 0xf7, 0x44, 0xf8, 0x38, 0x7a,
	0x28, 0xc9, 0x04, 0x7f, 0x3a, 0x1c, 0xb2, 0x01, 0x03, 0xae, 0x0e, 0x41, 0x4e, 0x98, 0xa9, 0x03,
	0x1f, 0xff, 0x2d, 0x51, 0x3f, 0x89, 0xaa, 0xf1, 0xd9, 0xa2, 0xde, 0xb4, 0xed, 0x4a, 0x5d, 0x09,
	0x36, 0x8c, 0x98, 0xaf, 0x40, 0x97, 0xcc, 0xef, 0x93, 0x05, 0x35, 0x74, 0x29, 0x69, 0x11, 0x12,
	0x06, 0x62, 0xc4, 0xd9, 0x2d, 0x70, 0xe2, 0xc5, 0xf8, 0x77, 0xb7, 0xd3, 0xf2, 0xa0, 0x05, 0x03,
	0xad, 0x08, 0x83, 0xf3, 0xdb, 0x54, 0x7b, 0xd7, 0x41, 0xb2, 0xe1, 0x5c, 0x37, 0x46, 0xaa, 0xa6,
	0x12, 0x42, 0xed, 0x6f, 0x52, 0x03, 0xb9, 0x43, 0x9d, 0x6b, 0x30, 0xbf, 0x22, 0xe4, 0x84, 0x2a,
	0xfc, 0xeb, 0x44, 0xb2, 0x85, 0x1e, 0x88, 0x24, 0xd7, 0x60, 0xfe, 0x2c, 0xf0, 0xf0, 0x05, 0x0a,
	0x8d, 0xfd, 0xea, 0x76, 0x5a, 0xb6, 0x5f, 0x83, 0xb9, 0x64, 0x7c, 0x14, 0x5f, 0xcc, 0xeb, 0x89,
	0xea, 0x31, 0x54, 0x5a, 0x50, 0xb5, 0xb9, 0x92, 0xf3, 0x58, 0xf6, 0x5a, 0xaa, 0x31, 0xfd, 0xfb,
	0xfb, 0x1a, 0x4b, 0x3a, 0xc5, 0x2f, 0x53, 0x55, 0x61, 0x4f, 0x8a, 0xbb, 0xce, 0xab, 0xa9, 0x2e,
	0xdc, 0x13, 0xe1, 0x03, 0x0f, 0xff, 0x22, 0x35, 0xbe, 0x7b, 0x54, 0xfa, 0x63, 0xea, 0x86, 0x6e,
	0xfe, 0x3c, 0x75, 0xcf, 0x23, 0x3e, 0x59, 0x52, 0xfd, 0x2c, 0x56, 0xd5, 0x5a, 0x68, 0x3d, 0xfa,
	0xbd, 0xa4, 0xbf, 0x6a, 0xa2, 0x71, 0xbf, 0x2d, 0xa5, 0x90, 0xc1, 0x97, 0x4a, 0x8c, 0x7d, 0x84,
	0x4a, 0xfd, 0xbd, 0xb5, 0x08, 0x75, 0xf8, 0x50, 0xe0, 0xdc, 0x8e, 0xba, 0xf3, 0x56, 0x79, 0xe5,
	0xcd, 0xb7, 0xca, 0x2b, 0xef, 0xbc, 0x55, 0xb6, 0x5e, 0x3a, 0x29, 0x5b, 0x3f, 0x3e, 0x29, 0x5b,
	0x6f, 0x9c, 0x94, 0xad, 0x3b, 0x27, 0x65, 0xeb, 0xcf, 0x27, 0x65, 0xeb, 0xaf, 0x27, 0xe5, 0x95,
	0x77, 0x4e, 0xca, 0xd6, 0x2b, 0x6f, 0x97, 0x57, 0xee, 0xbc, 0x5d, 0x5e, 0x79, 0xf3, 0xed, 0xf2,
	0xca, 0xc7, 0xde, 0x37, 0x62, 0x6a, 0x3c, 0xbd, 0x71, 0x79, 0x20, 0x26, 0x4f, 0x52, 0xa9, 0x9e,
	0x98, 0x80, 0xc3, 0xe8, 0x13, 0x9e, 0x4b, 0x95, 0x2e, 0xe7, 0x27, 0xcd, 0xaf, 0xea, 0xd6, 0x35,
	0xfd, 0xf7, 0x27, 0x19, 0x42, 0xa5, 0xba, 0x6c, 0x04, 0x97, 0x23, 0xc1, 0x8d, 0xbc, 0xf9, 0xff,
	0xb6, 0xa7, 0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0x1a, 0xa1, 0x00, 0xe4, 0x81, 0x13, 0x00, 0x00,
}

func (x Const) String() string {
	s, ok := Const_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TxOpCode) String() string {
	s, ok := TxOpCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TxField) String() string {
	s, ok := TxField_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x SelectOp) String() string {
	s, ok := SelectOp_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x OpStatus) String() string {
	s, ok := OpStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x StateSync) String() string {
	s, ok := StateSync_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Enable) String() string {
	s, ok := Enable_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x UriScheme) String() string {
	s, ok := UriScheme_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Grid) String() string {
	s, ok := Grid_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Swizzle) String() string {
	s, ok := Swizzle_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Units) String() string {
	s, ok := Units_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CryptoKitID) String() string {
	s, ok := CryptoKitID_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ErrCode) String() string {
	s, ok := ErrCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x LogLevel) String() string {
	s, ok := LogLevel_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *TxHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TxHeader)
	if !ok {
		that2, ok := that.(TxHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.OpCount != that1.OpCount {
		return false
	}
	if !this.Epoch.Equal(that1.Epoch) {
		return false
	}
	if this.TxID_0 != that1.TxID_0 {
		return false
	}
	if this.TxID_1 != that1.TxID_1 {
		return false
	}
	if this.TxID_2 != that1.TxID_2 {
		return false
	}
	if this.ContextID_0 != that1.ContextID_0 {
		return false
	}
	if this.ContextID_1 != that1.ContextID_1 {
		return false
	}
	if this.ContextID_2 != that1.ContextID_2 {
		return false
	}
	if !this.RouteTo.Equal(that1.RouteTo) {
		return false
	}
	if !this.Attachments.Equal(that1.Attachments) {
		return false
	}
	return true
}
func (this *Login) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Login)
	if !ok {
		that2, ok := that.(Login)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserID.Equal(that1.UserID) {
		return false
	}
	if !this.DeviceID.Equal(that1.DeviceID) {
		return false
	}
	if this.HostAddress != that1.HostAddress {
		return false
	}
	if this.Tags != that1.Tags {
		return false
	}
	if !this.Checkpoint.Equal(that1.Checkpoint) {
		return false
	}
	return true
}
func (this *LoginChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginChallenge)
	if !ok {
		that2, ok := that.(LoginChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Hash, that1.Hash) {
		return false
	}
	return true
}
func (this *LoginResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginResponse)
	if !ok {
		that2, ok := that.(LoginResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.HashResponse, that1.HashResponse) {
		return false
	}
	return true
}
func (this *LoginCheckpoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginCheckpoint)
	if !ok {
		that2, ok := that.(LoginCheckpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TokenType != that1.TokenType {
		return false
	}
	if this.AccessToken != that1.AccessToken {
		return false
	}
	if this.RefreshToken != that1.RefreshToken {
		return false
	}
	if this.Expiry != that1.Expiry {
		return false
	}
	if this.UserID != that1.UserID {
		return false
	}
	if this.URI != that1.URI {
		return false
	}
	return true
}
func (this *PinRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PinRequest)
	if !ok {
		that2, ok := that.(PinRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Select.Equal(that1.Select) {
		return false
	}
	if this.StateSync != that1.StateSync {
		return false
	}
	return true
}
func (this *Tag) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tag)
	if !ok {
		that2, ok := that.(Tag)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID_0 != that1.ID_0 {
		return false
	}
	if this.ID_1 != that1.ID_1 {
		return false
	}
	if this.ID_2 != that1.ID_2 {
		return false
	}
	if this.Swizzle != that1.Swizzle {
		return false
	}
	if this.Grid != that1.Grid {
		return false
	}
	if this.Units != that1.Units {
		return false
	}
	if this.R != that1.R {
		return false
	}
	if this.I != that1.I {
		return false
	}
	if this.J != that1.J {
		return false
	}
	if this.ContentType != that1.ContentType {
		return false
	}
	if this.URI != that1.URI {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	return true
}
func (this *Tags) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tags)
	if !ok {
		that2, ok := that.(Tags)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Head.Equal(that1.Head) {
		return false
	}
	if !bytes.Equal(this.Store, that1.Store) {
		return false
	}
	if len(this.SubTags) != len(that1.SubTags) {
		return false
	}
	for i := range this.SubTags {
		if !this.SubTags[i].Equal(that1.SubTags[i]) {
			return false
		}
	}
	if len(this.SubTrees) != len(that1.SubTrees) {
		return false
	}
	for i := range this.SubTrees {
		if !this.SubTrees[i].Equal(that1.SubTrees[i]) {
			return false
		}
	}
	return true
}
func (this *Err) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Err)
	if !ok {
		that2, ok := that.(Err)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	return true
}
func (this *TxHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&amp.TxHeader{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "OpCount: "+fmt.Sprintf("%#v", this.OpCount)+",\n")
	if this.Epoch != nil {
		s = append(s, "Epoch: "+fmt.Sprintf("%#v", this.Epoch)+",\n")
	}
	s = append(s, "TxID_0: "+fmt.Sprintf("%#v", this.TxID_0)+",\n")
	s = append(s, "TxID_1: "+fmt.Sprintf("%#v", this.TxID_1)+",\n")
	s = append(s, "TxID_2: "+fmt.Sprintf("%#v", this.TxID_2)+",\n")
	s = append(s, "ContextID_0: "+fmt.Sprintf("%#v", this.ContextID_0)+",\n")
	s = append(s, "ContextID_1: "+fmt.Sprintf("%#v", this.ContextID_1)+",\n")
	s = append(s, "ContextID_2: "+fmt.Sprintf("%#v", this.ContextID_2)+",\n")
	if this.RouteTo != nil {
		s = append(s, "RouteTo: "+fmt.Sprintf("%#v", this.RouteTo)+",\n")
	}
	if this.Attachments != nil {
		s = append(s, "Attachments: "+fmt.Sprintf("%#v", this.Attachments)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Login) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&amp.Login{")
	if this.UserID != nil {
		s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	}
	if this.DeviceID != nil {
		s = append(s, "DeviceID: "+fmt.Sprintf("%#v", this.DeviceID)+",\n")
	}
	s = append(s, "HostAddress: "+fmt.Sprintf("%#v", this.HostAddress)+",\n")
	s = append(s, "Tags: "+fmt.Sprintf("%#v", this.Tags)+",\n")
	if this.Checkpoint != nil {
		s = append(s, "Checkpoint: "+fmt.Sprintf("%#v", this.Checkpoint)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&amp.LoginChallenge{")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&amp.LoginResponse{")
	s = append(s, "HashResponse: "+fmt.Sprintf("%#v", this.HashResponse)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginCheckpoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&amp.LoginCheckpoint{")
	s = append(s, "TokenType: "+fmt.Sprintf("%#v", this.TokenType)+",\n")
	s = append(s, "AccessToken: "+fmt.Sprintf("%#v", this.AccessToken)+",\n")
	s = append(s, "RefreshToken: "+fmt.Sprintf("%#v", this.RefreshToken)+",\n")
	s = append(s, "Expiry: "+fmt.Sprintf("%#v", this.Expiry)+",\n")
	s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	s = append(s, "URI: "+fmt.Sprintf("%#v", this.URI)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PinRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&amp.PinRequest{")
	if this.Select != nil {
		s = append(s, "Select: "+fmt.Sprintf("%#v", this.Select)+",\n")
	}
	s = append(s, "StateSync: "+fmt.Sprintf("%#v", this.StateSync)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Tag) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&amp.Tag{")
	s = append(s, "ID_0: "+fmt.Sprintf("%#v", this.ID_0)+",\n")
	s = append(s, "ID_1: "+fmt.Sprintf("%#v", this.ID_1)+",\n")
	s = append(s, "ID_2: "+fmt.Sprintf("%#v", this.ID_2)+",\n")
	s = append(s, "Swizzle: "+fmt.Sprintf("%#v", this.Swizzle)+",\n")
	s = append(s, "Grid: "+fmt.Sprintf("%#v", this.Grid)+",\n")
	s = append(s, "Units: "+fmt.Sprintf("%#v", this.Units)+",\n")
	s = append(s, "R: "+fmt.Sprintf("%#v", this.R)+",\n")
	s = append(s, "I: "+fmt.Sprintf("%#v", this.I)+",\n")
	s = append(s, "J: "+fmt.Sprintf("%#v", this.J)+",\n")
	s = append(s, "ContentType: "+fmt.Sprintf("%#v", this.ContentType)+",\n")
	s = append(s, "URI: "+fmt.Sprintf("%#v", this.URI)+",\n")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Tags) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&amp.Tags{")
	if this.Head != nil {
		s = append(s, "Head: "+fmt.Sprintf("%#v", this.Head)+",\n")
	}
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	if this.SubTags != nil {
		s = append(s, "SubTags: "+fmt.Sprintf("%#v", this.SubTags)+",\n")
	}
	if this.SubTrees != nil {
		s = append(s, "SubTrees: "+fmt.Sprintf("%#v", this.SubTrees)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Err) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&amp.Err{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAmpCore(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TxHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Attachments != nil {
		{
			size, err := m.Attachments.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAmpCore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if m.RouteTo != nil {
		{
			size, err := m.RouteTo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAmpCore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.ContextID_2 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ContextID_2))
		i--
		dAtA[i] = 0x61
	}
	if m.ContextID_1 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ContextID_1))
		i--
		dAtA[i] = 0x59
	}
	if m.ContextID_0 != 0 {
		i = encodeVarintAmpCore(dAtA, i, uint64(m.ContextID_0))
		i--
		dAtA[i] = 0x50
	}
	if m.TxID_2 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.TxID_2))
		i--
		dAtA[i] = 0x39
	}
	if m.TxID_1 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.TxID_1))
		i--
		dAtA[i] = 0x31
	}
	if m.TxID_0 != 0 {
		i = encodeVarintAmpCore(dAtA, i, uint64(m.TxID_0))
		i--
		dAtA[i] = 0x28
	}
	if m.Epoch != nil {
		{
			size, err := m.Epoch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAmpCore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.OpCount != 0 {
		i = encodeVarintAmpCore(dAtA, i, uint64(m.OpCount))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = encodeVarintAmpCore(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Login) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Login) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Login) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Checkpoint != nil {
		{
			size, err := m.Checkpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAmpCore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.Tags) > 0 {
		i -= len(m.Tags)
		copy(dAtA[i:], m.Tags)
		i = encodeVarintAmpCore(dAtA, i, uint64(len(m.Tags)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.HostAddress) > 0 {
		i -= len(m.HostAddress)
		copy(dAtA[i:], m.HostAddress)
		i = encodeVarintAmpCore(dAtA, i, uint64(len(m.HostAddress)))
		i--
		dAtA[i] = 0x42
	}
	if m.DeviceID != nil {
		{
			size, err := m.DeviceID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAmpCore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.UserID != nil {
		{
			size, err := m.UserID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAmpCore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintAmpCore(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HashResponse) > 0 {
		i -= len(m.HashResponse)
		copy(dAtA[i:], m.HashResponse)
		i = encodeVarintAmpCore(dAtA, i, uint64(len(m.HashResponse)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginCheckpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginCheckpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginCheckpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.URI) > 0 {
		i -= len(m.URI)
		copy(dAtA[i:], m.URI)
		i = encodeVarintAmpCore(dAtA, i, uint64(len(m.URI)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintAmpCore(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Expiry != 0 {
		i = encodeVarintAmpCore(dAtA, i, uint64(m.Expiry))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RefreshToken) > 0 {
		i -= len(m.RefreshToken)
		copy(dAtA[i:], m.RefreshToken)
		i = encodeVarintAmpCore(dAtA, i, uint64(len(m.RefreshToken)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintAmpCore(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenType) > 0 {
		i -= len(m.TokenType)
		copy(dAtA[i:], m.TokenType)
		i = encodeVarintAmpCore(dAtA, i, uint64(len(m.TokenType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PinRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PinRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PinRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StateSync != 0 {
		i = encodeVarintAmpCore(dAtA, i, uint64(m.StateSync))
		i--
		dAtA[i] = 0x30
	}
	if m.Select != nil {
		{
			size, err := m.Select.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAmpCore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Tag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintAmpCore(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.URI) > 0 {
		i -= len(m.URI)
		copy(dAtA[i:], m.URI)
		i = encodeVarintAmpCore(dAtA, i, uint64(len(m.URI)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.ContentType) > 0 {
		i -= len(m.ContentType)
		copy(dAtA[i:], m.ContentType)
		i = encodeVarintAmpCore(dAtA, i, uint64(len(m.ContentType)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.J != 0 {
		i = encodeVarintAmpCore(dAtA, i, uint64(m.J))
		i--
		dAtA[i] = 0x70
	}
	if m.I != 0 {
		i = encodeVarintAmpCore(dAtA, i, uint64(m.I))
		i--
		dAtA[i] = 0x68
	}
	if m.R != 0 {
		i = encodeVarintAmpCore(dAtA, i, uint64(m.R))
		i--
		dAtA[i] = 0x60
	}
	if m.Units != 0 {
		i = encodeVarintAmpCore(dAtA, i, uint64(m.Units))
		i--
		dAtA[i] = 0x40
	}
	if m.Grid != 0 {
		i = encodeVarintAmpCore(dAtA, i, uint64(m.Grid))
		i--
		dAtA[i] = 0x38
	}
	if m.Swizzle != 0 {
		i = encodeVarintAmpCore(dAtA, i, uint64(m.Swizzle))
		i--
		dAtA[i] = 0x28
	}
	if m.ID_2 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ID_2))
		i--
		dAtA[i] = 0x19
	}
	if m.ID_1 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ID_1))
		i--
		dAtA[i] = 0x11
	}
	if m.ID_0 != 0 {
		i = encodeVarintAmpCore(dAtA, i, uint64(m.ID_0))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Tags) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tags) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tags) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubTrees) > 0 {
		for iNdEx := len(m.SubTrees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubTrees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAmpCore(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.SubTags) > 0 {
		for iNdEx := len(m.SubTags) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubTags[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAmpCore(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Store) > 0 {
		i -= len(m.Store)
		copy(dAtA[i:], m.Store)
		i = encodeVarintAmpCore(dAtA, i, uint64(len(m.Store)))
		i--
		dAtA[i] = 0x12
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAmpCore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Err) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Err) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Err) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintAmpCore(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x22
	}
	if m.Level != 0 {
		i = encodeVarintAmpCore(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x10
	}
	if m.Code != 0 {
		i = encodeVarintAmpCore(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAmpCore(dAtA []byte, offset int, v uint64) int {
	offset -= sovAmpCore(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovAmpCore(uint64(m.Status))
	}
	if m.OpCount != 0 {
		n += 1 + sovAmpCore(uint64(m.OpCount))
	}
	if m.Epoch != nil {
		l = m.Epoch.Size()
		n += 1 + l + sovAmpCore(uint64(l))
	}
	if m.TxID_0 != 0 {
		n += 1 + sovAmpCore(uint64(m.TxID_0))
	}
	if m.TxID_1 != 0 {
		n += 9
	}
	if m.TxID_2 != 0 {
		n += 9
	}
	if m.ContextID_0 != 0 {
		n += 1 + sovAmpCore(uint64(m.ContextID_0))
	}
	if m.ContextID_1 != 0 {
		n += 9
	}
	if m.ContextID_2 != 0 {
		n += 9
	}
	if m.RouteTo != nil {
		l = m.RouteTo.Size()
		n += 1 + l + sovAmpCore(uint64(l))
	}
	if m.Attachments != nil {
		l = m.Attachments.Size()
		n += 2 + l + sovAmpCore(uint64(l))
	}
	return n
}

func (m *Login) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != nil {
		l = m.UserID.Size()
		n += 1 + l + sovAmpCore(uint64(l))
	}
	if m.DeviceID != nil {
		l = m.DeviceID.Size()
		n += 1 + l + sovAmpCore(uint64(l))
	}
	l = len(m.HostAddress)
	if l > 0 {
		n += 1 + l + sovAmpCore(uint64(l))
	}
	l = len(m.Tags)
	if l > 0 {
		n += 1 + l + sovAmpCore(uint64(l))
	}
	if m.Checkpoint != nil {
		l = m.Checkpoint.Size()
		n += 1 + l + sovAmpCore(uint64(l))
	}
	return n
}

func (m *LoginChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovAmpCore(uint64(l))
	}
	return n
}

func (m *LoginResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HashResponse)
	if l > 0 {
		n += 1 + l + sovAmpCore(uint64(l))
	}
	return n
}

func (m *LoginCheckpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenType)
	if l > 0 {
		n += 1 + l + sovAmpCore(uint64(l))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovAmpCore(uint64(l))
	}
	l = len(m.RefreshToken)
	if l > 0 {
		n += 1 + l + sovAmpCore(uint64(l))
	}
	if m.Expiry != 0 {
		n += 1 + sovAmpCore(uint64(m.Expiry))
	}
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovAmpCore(uint64(l))
	}
	l = len(m.URI)
	if l > 0 {
		n += 1 + l + sovAmpCore(uint64(l))
	}
	return n
}

func (m *PinRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Select != nil {
		l = m.Select.Size()
		n += 1 + l + sovAmpCore(uint64(l))
	}
	if m.StateSync != 0 {
		n += 1 + sovAmpCore(uint64(m.StateSync))
	}
	return n
}

func (m *Tag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID_0 != 0 {
		n += 1 + sovAmpCore(uint64(m.ID_0))
	}
	if m.ID_1 != 0 {
		n += 9
	}
	if m.ID_2 != 0 {
		n += 9
	}
	if m.Swizzle != 0 {
		n += 1 + sovAmpCore(uint64(m.Swizzle))
	}
	if m.Grid != 0 {
		n += 1 + sovAmpCore(uint64(m.Grid))
	}
	if m.Units != 0 {
		n += 1 + sovAmpCore(uint64(m.Units))
	}
	if m.R != 0 {
		n += 1 + sovAmpCore(uint64(m.R))
	}
	if m.I != 0 {
		n += 1 + sovAmpCore(uint64(m.I))
	}
	if m.J != 0 {
		n += 1 + sovAmpCore(uint64(m.J))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 2 + l + sovAmpCore(uint64(l))
	}
	l = len(m.URI)
	if l > 0 {
		n += 2 + l + sovAmpCore(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 2 + l + sovAmpCore(uint64(l))
	}
	return n
}

func (m *Tags) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovAmpCore(uint64(l))
	}
	l = len(m.Store)
	if l > 0 {
		n += 1 + l + sovAmpCore(uint64(l))
	}
	if len(m.SubTags) > 0 {
		for _, e := range m.SubTags {
			l = e.Size()
			n += 1 + l + sovAmpCore(uint64(l))
		}
	}
	if len(m.SubTrees) > 0 {
		for _, e := range m.SubTrees {
			l = e.Size()
			n += 1 + l + sovAmpCore(uint64(l))
		}
	}
	return n
}

func (m *Err) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAmpCore(uint64(m.Code))
	}
	if m.Level != 0 {
		n += 1 + sovAmpCore(uint64(m.Level))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovAmpCore(uint64(l))
	}
	return n
}

func sovAmpCore(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAmpCore(x uint64) (n int) {
	return sovAmpCore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TxHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TxHeader{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`OpCount:` + fmt.Sprintf("%v", this.OpCount) + `,`,
		`Epoch:` + strings.Replace(this.Epoch.String(), "Tag", "Tag", 1) + `,`,
		`TxID_0:` + fmt.Sprintf("%v", this.TxID_0) + `,`,
		`TxID_1:` + fmt.Sprintf("%v", this.TxID_1) + `,`,
		`TxID_2:` + fmt.Sprintf("%v", this.TxID_2) + `,`,
		`ContextID_0:` + fmt.Sprintf("%v", this.ContextID_0) + `,`,
		`ContextID_1:` + fmt.Sprintf("%v", this.ContextID_1) + `,`,
		`ContextID_2:` + fmt.Sprintf("%v", this.ContextID_2) + `,`,
		`RouteTo:` + strings.Replace(this.RouteTo.String(), "Tag", "Tag", 1) + `,`,
		`Attachments:` + strings.Replace(this.Attachments.String(), "Tags", "Tags", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Login) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Login{`,
		`UserID:` + strings.Replace(this.UserID.String(), "Tag", "Tag", 1) + `,`,
		`DeviceID:` + strings.Replace(this.DeviceID.String(), "Tag", "Tag", 1) + `,`,
		`HostAddress:` + fmt.Sprintf("%v", this.HostAddress) + `,`,
		`Tags:` + fmt.Sprintf("%v", this.Tags) + `,`,
		`Checkpoint:` + strings.Replace(this.Checkpoint.String(), "LoginCheckpoint", "LoginCheckpoint", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginChallenge{`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginResponse{`,
		`HashResponse:` + fmt.Sprintf("%v", this.HashResponse) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginCheckpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginCheckpoint{`,
		`TokenType:` + fmt.Sprintf("%v", this.TokenType) + `,`,
		`AccessToken:` + fmt.Sprintf("%v", this.AccessToken) + `,`,
		`RefreshToken:` + fmt.Sprintf("%v", this.RefreshToken) + `,`,
		`Expiry:` + fmt.Sprintf("%v", this.Expiry) + `,`,
		`UserID:` + fmt.Sprintf("%v", this.UserID) + `,`,
		`URI:` + fmt.Sprintf("%v", this.URI) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PinRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PinRequest{`,
		`Select:` + strings.Replace(this.Select.String(), "Tags", "Tags", 1) + `,`,
		`StateSync:` + fmt.Sprintf("%v", this.StateSync) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Tag) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Tag{`,
		`ID_0:` + fmt.Sprintf("%v", this.ID_0) + `,`,
		`ID_1:` + fmt.Sprintf("%v", this.ID_1) + `,`,
		`ID_2:` + fmt.Sprintf("%v", this.ID_2) + `,`,
		`Swizzle:` + fmt.Sprintf("%v", this.Swizzle) + `,`,
		`Grid:` + fmt.Sprintf("%v", this.Grid) + `,`,
		`Units:` + fmt.Sprintf("%v", this.Units) + `,`,
		`R:` + fmt.Sprintf("%v", this.R) + `,`,
		`I:` + fmt.Sprintf("%v", this.I) + `,`,
		`J:` + fmt.Sprintf("%v", this.J) + `,`,
		`ContentType:` + fmt.Sprintf("%v", this.ContentType) + `,`,
		`URI:` + fmt.Sprintf("%v", this.URI) + `,`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Tags) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSubTags := "[]*Tag{"
	for _, f := range this.SubTags {
		repeatedStringForSubTags += strings.Replace(f.String(), "Tag", "Tag", 1) + ","
	}
	repeatedStringForSubTags += "}"
	repeatedStringForSubTrees := "[]*Tags{"
	for _, f := range this.SubTrees {
		repeatedStringForSubTrees += strings.Replace(f.String(), "Tags", "Tags", 1) + ","
	}
	repeatedStringForSubTrees += "}"
	s := strings.Join([]string{`&Tags{`,
		`Head:` + strings.Replace(this.Head.String(), "Tag", "Tag", 1) + `,`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`SubTags:` + repeatedStringForSubTags + `,`,
		`SubTrees:` + repeatedStringForSubTrees + `,`,
		`}`,
	}, "")
	return s
}
func (this *Err) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Err{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAmpCore(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TxHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmpCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= OpStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpCount", wireType)
			}
			m.OpCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmpCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmpCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Epoch == nil {
				m.Epoch = &Tag{}
			}
			if err := m.Epoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID_0", wireType)
			}
			m.TxID_0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxID_0 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID_1", wireType)
			}
			m.TxID_1 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.TxID_1 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID_2", wireType)
			}
			m.TxID_2 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.TxID_2 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextID_0", wireType)
			}
			m.ContextID_0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContextID_0 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextID_1", wireType)
			}
			m.ContextID_1 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextID_1 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextID_2", wireType)
			}
			m.ContextID_2 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextID_2 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteTo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmpCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmpCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RouteTo == nil {
				m.RouteTo = &Tag{}
			}
			if err := m.RouteTo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmpCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmpCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attachments == nil {
				m.Attachments = &Tags{}
			}
			if err := m.Attachments.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmpCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmpCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Login) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmpCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Login: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Login: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmpCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmpCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserID == nil {
				m.UserID = &Tag{}
			}
			if err := m.UserID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmpCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmpCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceID == nil {
				m.DeviceID = &Tag{}
			}
			if err := m.DeviceID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmpCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmpCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmpCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmpCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Checkpoint == nil {
				m.Checkpoint = &LoginCheckpoint{}
			}
			if err := m.Checkpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmpCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmpCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmpCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAmpCore
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmpCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmpCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmpCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashResponse", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAmpCore
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashResponse = append(m.HashResponse[:0], dAtA[iNdEx:postIndex]...)
			if m.HashResponse == nil {
				m.HashResponse = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmpCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmpCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginCheckpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmpCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginCheckpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginCheckpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmpCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmpCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmpCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			m.Expiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiry |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmpCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmpCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmpCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmpCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PinRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmpCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PinRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PinRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Select", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmpCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmpCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Select == nil {
				m.Select = &Tags{}
			}
			if err := m.Select.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateSync", wireType)
			}
			m.StateSync = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateSync |= StateSync(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAmpCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmpCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmpCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID_0", wireType)
			}
			m.ID_0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID_0 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID_1", wireType)
			}
			m.ID_1 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.ID_1 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID_2", wireType)
			}
			m.ID_2 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.ID_2 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swizzle", wireType)
			}
			m.Swizzle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Swizzle |= Swizzle(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grid", wireType)
			}
			m.Grid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Grid |= Grid(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			m.Units = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Units |= Units(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
			}
			m.R = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.R |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I", wireType)
			}
			m.I = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.I |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field J", wireType)
			}
			m.J = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.J |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmpCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmpCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmpCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmpCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmpCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tags) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmpCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tags: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tags: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmpCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmpCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &Tag{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAmpCore
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Store = append(m.Store[:0], dAtA[iNdEx:postIndex]...)
			if m.Store == nil {
				m.Store = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmpCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmpCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubTags = append(m.SubTags, &Tag{})
			if err := m.SubTags[len(m.SubTags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTrees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmpCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmpCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubTrees = append(m.SubTrees, &Tags{})
			if err := m.SubTrees[len(m.SubTrees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmpCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmpCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Err) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmpCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Err: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Err: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= LogLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmpCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmpCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmpCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAmpCore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAmpCore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAmpCore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAmpCore
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAmpCore
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAmpCore
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAmpCore        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAmpCore          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAmpCore = fmt.Errorf("proto: unexpected end of group")
)
