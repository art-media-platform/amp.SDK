syntax = "proto3";

// package amp is an implementation-independent API for a pluggable client-server UI/UX system,
// featuring support and integration for files, media, and communication.
//
// Welcome to art.media.platform (c) 2023 ("Amp"): a runtime model and specification to securely share and experience digital media under their own agreed terms and permissions,
//   something we can all agree on.
package amp;

// Tells protoc that a .proto file importing amp.proto what package import to use within Go.
option go_package = "github.com/art-media-platform/amp.SDK/amp";

// import "github.com/gogo/protobuf/gogoproto/gogo.proto";  // https://stackoverflow.com/questions/43026449/gogo-proto-file-not-found

option csharp_namespace = "Amp";


enum Const {
    Const_Defs = 0;

    // DefaultServicePort  is the default TCP port used to expose amp.Host service.
    Const_DefaultServicePort = 5192;

	// Byte size and version of a TxMsg encoding -- sizes are little endian
	// A TxHeader has the following layout:
    //   Bytes  00:03 -- TxHeader marker ('amp')
	//          03:04 -- Const_TxHeader_Version
    //          04:08 -- TxMsg body size: header + serialized TxOp(s)
    //          08:12 -- TxMsg.DataStore size
    //          12:16 -- Reserved
	Const_TxHeader_Size = 16;

	// Version of the TxHeader -- first byte
    Const_TxHeader_Version = 0x33;

	// The first byte of the TxHeader is the header size and version and
	// the following 3 bytes of a serialized TxMsg ("Amp")
    Const_TxHeader_Marker = 0x616D70;

    // בְּרֵאשִׁ֖ית בָּרָ֣א אֱלֹהִ֑ים אֵ֥ת הַשָּׁמַ֖יִם וְאֵ֥ת הָאָֽרֶץ
    // Oh Lord, please bless this project, those who fight for it, and those who lay their life on Your altar.
    Const_Invocation = 3773;
}



// TxOpCode specifies a particular cell transaction operation.
enum TxOpCode {
    TxOpCode_Nil = 0;

    TxOpCode_UpsertElement = 2; // insert / update single attribute element
    TxOpCode_DeleteElement = 4; // delete single attribute element
}


// TxField maps a fixed count of int64 payload fields.enum
//
// Why not as a proto message?  Because compression is much better since values mostly repeat.
enum TxField {
    TxField_Nil = 0;

    TxField_CellID_0 = 1;
    TxField_CellID_1 = 2;
    TxField_CellID_2 = 3;

    TxField_AttrID_0 = 4;
    TxField_AttrID_1 = 5;
    TxField_AttrID_2 = 6;

    TxField_ItemID_0 = 7;
    TxField_ItemID_1 = 8;
    TxField_ItemID_2 = 9;

    TxField_EditID_0 = 10;
    TxField_EditID_1 = 11;
    TxField_EditID_2 = 12;

    TxField_NumFields = 13;
    TxField_MaxFields = 24;
}


// TxEnvelope contains information for a TxMsg
message TxEnvelope {

    // communicates request status / completion.
    OpStatus            Status = 2;

    // The number of TxOps in this TxEnvelope
    uint64              OpCount = 4;

    // A universally unique tag assigned when this Tx was created.
    // Used to identify this tx and also serves as context ID for subsequent responses.
    int64               GenesisID_0 = 5;
    fixed64             GenesisID_1 = 6;
    fixed64             GenesisID_2 = 7;

    // If set, this references a previously witnessed tx -- typically used for a response to a request.
    // If nil, this is a context-free tx and GenesisID becomes the implied context ID.
    int64               ContextID_0 = 10;
    fixed64             ContextID_1 = 11;
    fixed64             ContextID_2 = 12;

    // sender of this TxEnvelope
    Tag                 From = 14;

    // recipient of this TxEnvelope
    Tag                 To = 15;

    // authority / trust snapshot
    Tag                 Epoch = 16;

    // headers / metadata / context
    Tags                Tags = 17;

}

enum SelectOp {
    SelectOp_Neutral = 0;
    SelectOp_Include = 1;
    SelectOp_Exclude = 2;
}

// OpStatus allows a sender to express the status of a request.
enum OpStatus {

    // op or request has not yet initiated
    OpStatus_NotStarted = 0;

    // op or request is in progress
    OpStatus_Syncing    = 1;

    // updating, processing, or suspended -- signifies opaque working state
    OpStatus_Busy       = 2;

    // Sent by the host to signal that the op up to date and the client state is stable / synchronized.
    // This typically drives UI updates or other dependencies requiring a stable state.
    OpStatus_Synced     = 3;

    // From the client to host, this signals to close / cancel the op associated with ReqID.
    // From the host to client, this signals that the given request ID has been closed / discarded.
    OpStatus_Closed     = 7;
}

// Login -- STEP 1: client -> host
message Login {

    Tag                UserID   = 1;
    Tag                DeviceID = 5;

    // HostAddress is network address of the server known to the client (e.g. IP address, localhost, domain name, etc)
    // amp.Host uses this to as the host name when serving URLs for the client to consume.
    string             HostAddress = 8;

    // Tags is an unordered list of string literals tokens with predefined meanings, separated by spaces, periods, or commas.
    string             Tags = 9;

    // Checkpoint allows the client to resume an auth session.
    LoginCheckpoint    Checkpoint = 12;

}

// LoginChallenge -- STEP 2: host -> client
message LoginChallenge {
    bytes               Hash = 1;
}

// LoginResponse -- STEP 3: client -> host
message LoginResponse {
    bytes               HashResponse = 1;
}

// LoginCheckpoint wraps oauth2 -- see oauth2.Token
message LoginCheckpoint {
    string              TokenType    = 1;
    string              AccessToken  = 2;
    string              RefreshToken = 3;
    int64               Expiry       = 4; // Unix UTC

    string              UserID      = 11;
    string              URI         = 12;
}



enum StateSync {

    // If set, a pin request will not send any state responses to the client.
    // This is useful when only writing to a cell and no state updates are needed.
    StateSync_None = 0;

	// If set, a pin request will be automatically closed once state is pushed / synchronized.
    // This is useful when only a snapshot of the cell is needed.
    StateSync_CloseOnSync = 1;

    // If set, a pin request will remain open even after state is synced.
    // In this mode, he client will receive any state updates until the request is explicitly closed.
    StateSync_Maintain = 2;
}



// PinRequest is a client request to "pin" a cell, meaning selected attrs and child cells will be pushed to the client.
message PinRequest {

    // Specifies a target URL or tag / cell ID to be pinned with the above available mint templates available.
    Tag            PinTarget = 2;

    // Attributes to be synchronized -- if nil, all attrs are pinned
    repeated Tag   PinAttrs  = 4;

    // Options for this request.
    StateSync      StateSync = 6;

    // future proofing
    Tag            Tags = 17;

}

// LaunchURL is used as a meta attribute handle a URL, such as an oauth request (host to client) or an oauth response (client to host).
message LaunchURL {
    string URL = 1;
}



enum Enable {
    Enable_LatentOff  = 0x0;
    Enable_LatentOn   = 0x1;
    Enable_ActiveOn   = 0x2;
    Enable_ActiveOff  = 0x3;
}


enum UrlScheme {
    UrlScheme_Nil             = 0;
    UrlScheme_Unrecognized    = 1;  // Unrecognized URL scheme
    UrlScheme_Http            = 2;  // "[http[s]://]{hostname}[:{port}]/{query}"
    UrlScheme_Data            = 3;  // "[data:]{mime-type}[[;base64],{data-encoding}]"
    UrlScheme_File            = 4;  // "[file://]{hfs-pathname}"
    UrlScheme_Amp             = 7;  // "[amp:[//app-alias/]]{cmd}[/{uri}]?{query}"

    UrlScheme_Git             = 16; // "[git://]{hostname}/{repo}[/{path}]"
}

// Tag is a multi-purpose, human-readable, intuitive, phonetically / hands-free, friendly cryptographically anonymous tagging and system actor "tag" or "badge" identifier.
// Typically, a "Tags" string is parsed and hashed for safe and high performance data access.
// SHA1 or any compatible 24 byte UTF8 literal hash DFA.
message Tag {
    int64   ID_0 = 2; // tag.ID[0]
    fixed64 ID_1 = 3; // tag.ID[1]
    fixed64 ID_2 = 4; // tag.ID[2]

    string  ContentType = 10; // e.g. "text/html", "image/png", "image/*", "amp.vis/content.*"
    string  UID         = 12; // UID, SKU, or other literal
    string  Text        = 13; // tag.Expr, custom content, or expression
    string  URL         = 15; // IEEE 1738 URL: schema://hostname.com/path/query

    // Metric specifies the metric system used for the size metric values
    Metric  Metric      = 20;

    // SizeX, SizeY, SizeZ specify the size of the object in a given metric system
    int64   SizeX       = 21;
    int64   SizeY       = 22;
    int64   SizeZ       = 23;

}


// Tags is a multi-purpose, automatically serializable and customable tree.
//
// All fields are optional and whose meaning is contextual.
//
message Tags {
    Tag           ID      = 1; // optional Tag
    repeated Tags SubTags = 8;
}





enum Metric {
    Metric_Nil                           = 0;
    Metric_OrthoPixel                    = 1;
    Metric_OrthoMeter                    = 2;
    Metric_OrthoMillimeter               = 3;
    Metric_OrthoPlank                    = 4;
    Metric_HexGridMillimeter             = 5;
    Metric_TrapezoDodecahedronMillimeter = 6;
}


/*
enum MetaFlags {
    MetaFlags_None             = 0;
    MetaFlags_Asset            = 0x01;  // Unrecognized URL scheme
    MetaFlags_Texture          = 0x02;  // Unrecognized URL scheme
    MetaFlags_TwoD             = 0x04;  // "[http[s]://]{hostname}[:{port}]/{query}"
    MetaFlags_ThreeD           = 0x08;  // "[http[s]://]{hostname}[:{port}]/{query}"
    MetaFlags_Artwork          = 0x10;  // "[http[s]://]{hostname}[:{port}]/{query}"
    MetaFlags_Badge            = 0x20;  // Unrecognized URL scheme
    MetaFlags_File             = 0x40;  // "[data:]{mime-type}[[;base64],{data-encoding}]"
    MetaFlags_Protocol         = 0x80;  // "[file://]{hfs-pathname}"
}
*/


// CryptoKitID identifies an encryption suite that implements ski.CryptoKit
enum CryptoKitID {
    CryptoKit_Nil             = 0;
    CryptoKit_SecretBox_NaCl  = 100;
    CryptoKit_AsymMsg_NaCl    = 101;
    CryptoKit_Signing_NaCl    = 102;
    CryptoKit_Signing_ED25519 = 202;

}

message CryptoKey {
    CryptoKitID         CryptoKitID     = 1;
    bytes               KeyBytes        = 4;
}




/*
message LabelAttr {
    string              Main            = 1;
    string              Subtext         = 2;
}
message SwitchAttr {
    string              Label           = 1;
    string              About           = 2;
    bool                Enabled         = 2;
}

message EditableTextAttr {
    string              Label           = 1;
    string              About           = 2;
    string              Content         = 3;
    int                 Flags           = 4;
}

    */





    // ErrCode expresses status and error codes.
enum ErrCode {
    ErrCode_Nil                         = 0;

    ErrCode_Unnamed                     = -23001;
    ErrCode_AssertFailed                = -23002;
    ErrCode_UnsupportedOp               = -23003;
    ErrCode_Unimplemented               = -23004;
    ErrCode_Timeout                     = -23005;
    ErrCode_ShuttingDown                = -23006;
    ErrCode_NotConnected                = -23007;
    ErrCode_AuthFailed                  = -23008;
    ErrCode_LoginFailed                 = -23009;
    ErrCode_SessionExpired              = -23010;
    ErrCode_NotReady                    = -23011;

    ErrCode_RequestNotFound             = -23020;
    ErrCode_RequestClosed               = -23021;
    ErrCode_BadRequest                  = -23022;
    ErrCode_InvalidURI                  = -23023;
    ErrCode_BadValue                    = -23024;
    ErrCode_InvalidTag                  = -23025;
    ErrCode_AttrNotFound                = -23026;
    ErrCode_NothingToCommit             = -23027;
    ErrCode_CommitFailed                = -23028;
    ErrCode_StoreNotFound               = -23029;
    ErrCode_StorageFailure              = -23030;
    ErrCode_AppNotFound                 = -23031;
    ErrCode_MalformedTx                 = -23032;

    ErrCode_BadSchema                   = -23040;
    ErrCode_DataFailure                 = -23041;
    ErrCode_ExportErr                   = -23042;
    ErrCode_PinFailed                   = -23043;
    ErrCode_CellNotFound                = -23044;
    ErrCode_ProviderErr                 = -23045;

    ErrCode_ViolatesAppendOnly          = -23050;
    ErrCode_InsufficientPermissions     = -23051;

    ErrCode_CryptoKitAlreadyRegistered  = -23100;
    ErrCode_UnrecognizedCryptoKit       = -23101;
    ErrCode_DecryptFailed               = -23102;
    ErrCode_VerifySignatureFailed       = -23103;
    ErrCode_BadKeyFormat                = -23104;
    ErrCode_KeyGenerationFailed         = -23105;
    ErrCode_KeyringNotFound             = -23106;
    ErrCode_KeyEntryNotFound            = -23107;
    ErrCode_HashKitNotFound             = -23108;
    ErrCode_SessionNotReady             = -23109;
    ErrCode_UnrecognizedCryptOp         = -23110;
    ErrCode_MarshalFailed               = -23111;
    ErrCode_UnmarshalFailed             = -23112;
}

enum LogLevel {
    LogLevel_Error = 0;
    LogLevel_Warn  = 2;
    LogLevel_Info  = 4;
}


// Err is a general purpose error / warning / log message.
message Err {

    // Identifies the type of error.
    ErrCode             Code  = 1;

    // Severity level
    LogLevel            Level = 2;

    // human-readable info
    string              Msg   = 4;
}