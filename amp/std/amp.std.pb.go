// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: amp.std.proto

package std

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	amp "github.com/art-media-platform/amp.SDK/amp"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Specifies how scale dynamically changes based on observer position.
type TRS_VisualScaleMode int32

const (
	AutoScale  TRS_VisualScaleMode = 0
	FixedScale TRS_VisualScaleMode = 1
)

var TRS_VisualScaleMode_name = map[int32]string{
	0: "AutoScale",
	1: "FixedScale",
}

var TRS_VisualScaleMode_value = map[string]int32{
	"AutoScale":  0,
	"FixedScale": 1,
}

func (TRS_VisualScaleMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f19235ecf4b48ee7, []int{1, 0}
}

// FSInfo a general-purpose file system meta info block.
type FSInfo struct {
	Mode        string `protobuf:"bytes,1,opt,name=Mode,proto3" json:"Mode,omitempty"`
	IsDir       bool   `protobuf:"varint,2,opt,name=IsDir,proto3" json:"IsDir,omitempty"`
	FileName    string `protobuf:"bytes,3,opt,name=FileName,proto3" json:"FileName,omitempty"`
	ContentType string `protobuf:"bytes,5,opt,name=ContentType,proto3" json:"ContentType,omitempty"`
	CreatedAt   int64  `protobuf:"varint,7,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	ModifiedAt  int64  `protobuf:"varint,8,opt,name=ModifiedAt,proto3" json:"ModifiedAt,omitempty"`
	ByteSize    int64  `protobuf:"varint,9,opt,name=ByteSize,proto3" json:"ByteSize,omitempty"`
}

func (m *FSInfo) Reset()      { *m = FSInfo{} }
func (*FSInfo) ProtoMessage() {}
func (*FSInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f19235ecf4b48ee7, []int{0}
}
func (m *FSInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FSInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FSInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FSInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FSInfo.Merge(m, src)
}
func (m *FSInfo) XXX_Size() int {
	return m.Size()
}
func (m *FSInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FSInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FSInfo proto.InternalMessageInfo

func (m *FSInfo) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *FSInfo) GetIsDir() bool {
	if m != nil {
		return m.IsDir
	}
	return false
}

func (m *FSInfo) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *FSInfo) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *FSInfo) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *FSInfo) GetModifiedAt() int64 {
	if m != nil {
		return m.ModifiedAt
	}
	return 0
}

func (m *FSInfo) GetByteSize() int64 {
	if m != nil {
		return m.ByteSize
	}
	return 0
}

// TRS (translate rotate scale) INA IEEE 1207
// A general-purpose placement spec in time, space, geo-position, and orientation.
type TRS struct {
	// Anchor in time, space, and/or geo-position.
	// May also specify a grid system or unit convention.
	Anchor *amp.Tag `protobuf:"bytes,1,opt,name=Anchor,proto3" json:"Anchor,omitempty"`
	// Specifies how scale dynamically changes based on observer position.
	ScaleMode TRS_VisualScaleMode `protobuf:"varint,2,opt,name=ScaleMode,proto3,enum=std.TRS_VisualScaleMode" json:"ScaleMode,omitempty"`
	// a relative position in space
	X1 float32 `protobuf:"fixed32,6,opt,name=X1,proto3" json:"X1,omitempty"`
	X2 float32 `protobuf:"fixed32,7,opt,name=X2,proto3" json:"X2,omitempty"`
	X3 float32 `protobuf:"fixed32,8,opt,name=X3,proto3" json:"X3,omitempty"`
	// Scale1..3 express the scale of this placement.
	// If all three values are 0, they are all implicitly 1.
	// If Scale2 or Scale3 == 0, then it is implicitly Scale1.
	Scale1 float32 `protobuf:"fixed32,11,opt,name=Scale1,proto3" json:"Scale1,omitempty"`
	Scale2 float32 `protobuf:"fixed32,12,opt,name=Scale2,proto3" json:"Scale2,omitempty"`
	Scale3 float32 `protobuf:"fixed32,13,opt,name=Scale3,proto3" json:"Scale3,omitempty"`
	// a Quaternion rotation in space.
	Qi float32 `protobuf:"fixed32,16,opt,name=Qi,proto3" json:"Qi,omitempty"`
	Qj float32 `protobuf:"fixed32,17,opt,name=Qj,proto3" json:"Qj,omitempty"`
	Qn float32 `protobuf:"fixed32,18,opt,name=Qn,proto3" json:"Qn,omitempty"`
	Qm float32 `protobuf:"fixed32,19,opt,name=Qm,proto3" json:"Qm,omitempty"`
	// Rotate1 - Rotate3 the orientation of this placement using Euler angles.
	EulerX float32 `protobuf:"fixed32,61,opt,name=EulerX,proto3" json:"EulerX,omitempty"`
	EulerY float32 `protobuf:"fixed32,62,opt,name=EulerY,proto3" json:"EulerY,omitempty"`
	EulerZ float32 `protobuf:"fixed32,63,opt,name=EulerZ,proto3" json:"EulerZ,omitempty"`
}

func (m *TRS) Reset()      { *m = TRS{} }
func (*TRS) ProtoMessage() {}
func (*TRS) Descriptor() ([]byte, []int) {
	return fileDescriptor_f19235ecf4b48ee7, []int{1}
}
func (m *TRS) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TRS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TRS.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TRS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TRS.Merge(m, src)
}
func (m *TRS) XXX_Size() int {
	return m.Size()
}
func (m *TRS) XXX_DiscardUnknown() {
	xxx_messageInfo_TRS.DiscardUnknown(m)
}

var xxx_messageInfo_TRS proto.InternalMessageInfo

func (m *TRS) GetAnchor() *amp.Tag {
	if m != nil {
		return m.Anchor
	}
	return nil
}

func (m *TRS) GetScaleMode() TRS_VisualScaleMode {
	if m != nil {
		return m.ScaleMode
	}
	return AutoScale
}

func (m *TRS) GetX1() float32 {
	if m != nil {
		return m.X1
	}
	return 0
}

func (m *TRS) GetX2() float32 {
	if m != nil {
		return m.X2
	}
	return 0
}

func (m *TRS) GetX3() float32 {
	if m != nil {
		return m.X3
	}
	return 0
}

func (m *TRS) GetScale1() float32 {
	if m != nil {
		return m.Scale1
	}
	return 0
}

func (m *TRS) GetScale2() float32 {
	if m != nil {
		return m.Scale2
	}
	return 0
}

func (m *TRS) GetScale3() float32 {
	if m != nil {
		return m.Scale3
	}
	return 0
}

func (m *TRS) GetQi() float32 {
	if m != nil {
		return m.Qi
	}
	return 0
}

func (m *TRS) GetQj() float32 {
	if m != nil {
		return m.Qj
	}
	return 0
}

func (m *TRS) GetQn() float32 {
	if m != nil {
		return m.Qn
	}
	return 0
}

func (m *TRS) GetQm() float32 {
	if m != nil {
		return m.Qm
	}
	return 0
}

func (m *TRS) GetEulerX() float32 {
	if m != nil {
		return m.EulerX
	}
	return 0
}

func (m *TRS) GetEulerY() float32 {
	if m != nil {
		return m.EulerY
	}
	return 0
}

func (m *TRS) GetEulerZ() float32 {
	if m != nil {
		return m.EulerZ
	}
	return 0
}

func init() {
	proto.RegisterEnum("std.TRS_VisualScaleMode", TRS_VisualScaleMode_name, TRS_VisualScaleMode_value)
	proto.RegisterType((*FSInfo)(nil), "std.FSInfo")
	proto.RegisterType((*TRS)(nil), "std.TRS")
}

func init() { proto.RegisterFile("amp.std.proto", fileDescriptor_f19235ecf4b48ee7) }

var fileDescriptor_f19235ecf4b48ee7 = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xc1, 0x8e, 0x93, 0x40,
	0x18, 0xc7, 0x99, 0xe2, 0x62, 0x99, 0xda, 0xba, 0x8e, 0x66, 0x33, 0xd9, 0x98, 0x09, 0xe9, 0xa9,
	0x27, 0xb4, 0x90, 0x78, 0x53, 0xd3, 0x5d, 0x6d, 0xb2, 0x87, 0x9a, 0x2c, 0x34, 0xa6, 0xbb, 0xb7,
	0xb1, 0x4c, 0x75, 0x36, 0xc0, 0x10, 0x3a, 0x4d, 0x5c, 0x4f, 0x3e, 0x82, 0xbe, 0x85, 0xf1, 0x49,
	0x8c, 0xa7, 0x1e, 0xf7, 0x68, 0xe9, 0xc5, 0xe3, 0x3e, 0x82, 0xe1, 0x83, 0xb0, 0xc4, 0x1b, 0xbf,
	0xdf, 0x7f, 0xf8, 0xe0, 0xff, 0x01, 0xee, 0xf3, 0x24, 0x73, 0xd7, 0x3a, 0x72, 0xb3, 0x5c, 0x69,
	0x45, 0xcc, 0xb5, 0x8e, 0x8e, 0x09, 0x4f, 0xb2, 0x67, 0xa5, 0x5f, 0xaa, 0x5c, 0x54, 0xc1, 0xf0,
	0x37, 0xc2, 0xd6, 0x34, 0x3c, 0x4b, 0x57, 0x8a, 0x10, 0x7c, 0x6f, 0xa6, 0x22, 0x41, 0x91, 0x83,
	0x46, 0x76, 0x00, 0xd7, 0xe4, 0x09, 0x3e, 0x38, 0x5b, 0xbf, 0x91, 0x39, 0xed, 0x38, 0x68, 0xd4,
	0x0d, 0x2a, 0x20, 0xc7, 0xb8, 0x3b, 0x95, 0xb1, 0x78, 0xc7, 0x13, 0x41, 0x4d, 0x38, 0xdd, 0x30,
	0x71, 0x70, 0xef, 0x54, 0xa5, 0x5a, 0xa4, 0x7a, 0x7e, 0x9d, 0x09, 0x7a, 0x00, 0x71, 0x5b, 0x91,
	0xa7, 0xd8, 0x3e, 0xcd, 0x05, 0xd7, 0x22, 0x9a, 0x68, 0x7a, 0xdf, 0x41, 0x23, 0x33, 0xb8, 0x13,
	0x84, 0x61, 0x3c, 0x53, 0x91, 0x5c, 0x49, 0x88, 0xbb, 0x10, 0xb7, 0x4c, 0xf9, 0xec, 0x93, 0x6b,
	0x2d, 0x42, 0xf9, 0x45, 0x50, 0x1b, 0xd2, 0x86, 0x87, 0xdf, 0x4d, 0x6c, 0xce, 0x83, 0x90, 0x38,
	0xd8, 0x9a, 0xa4, 0xcb, 0x4f, 0x2a, 0x87, 0x2e, 0x3d, 0xaf, 0xeb, 0x96, 0xad, 0xe7, 0xfc, 0x63,
	0x50, 0x7b, 0xf2, 0x02, 0xdb, 0xe1, 0x92, 0xc7, 0x02, 0x0a, 0x97, 0xdd, 0x06, 0x1e, 0x85, 0x75,
	0xcd, 0x83, 0xd0, 0x7d, 0x2f, 0xd7, 0x1b, 0x1e, 0x37, 0x79, 0x70, 0x77, 0x94, 0x0c, 0x70, 0x67,
	0x31, 0xa6, 0x96, 0x83, 0x46, 0x9d, 0xa0, 0xb3, 0x18, 0x03, 0x7b, 0x50, 0xa2, 0x64, 0x0f, 0xd8,
	0x87, 0xb7, 0x2e, 0xd9, 0x27, 0x47, 0xd8, 0x82, 0x9b, 0xc7, 0xb4, 0x07, 0xae, 0xa6, 0xc6, 0x7b,
	0xf4, 0x41, 0xcb, 0x7b, 0x8d, 0xf7, 0x69, 0xbf, 0xe5, 0xfd, 0x72, 0xee, 0xb9, 0xa4, 0x87, 0xd5,
	0xdc, 0x73, 0x09, 0x7c, 0x45, 0x1f, 0xd5, 0x7c, 0x05, 0x9c, 0x52, 0x52, 0x73, 0x0a, 0x9c, 0xd0,
	0xc7, 0x35, 0x27, 0xe5, 0xdc, 0xb7, 0x9b, 0x58, 0xe4, 0x0b, 0xfa, 0xb2, 0x9a, 0x5b, 0x51, 0xe3,
	0x2f, 0xe8, 0xab, 0x96, 0xbf, 0x68, 0xfc, 0x25, 0x7d, 0xdd, 0xf2, 0x97, 0xc3, 0xe7, 0xf8, 0xe1,
	0x7f, 0xdb, 0x21, 0x7d, 0x6c, 0x4f, 0x36, 0x5a, 0x81, 0x38, 0x34, 0xc8, 0x00, 0xe3, 0xa9, 0xfc,
	0x2c, 0xa2, 0x8a, 0xd1, 0xc9, 0x6c, 0xbb, 0x63, 0xc6, 0xcd, 0x8e, 0x19, 0xb7, 0x3b, 0x86, 0xbe,
	0x16, 0x0c, 0xfd, 0x28, 0x18, 0xfa, 0x55, 0x30, 0xb4, 0x2d, 0x18, 0xfa, 0x53, 0x30, 0xf4, 0xb7,
	0x60, 0xc6, 0x6d, 0xc1, 0xd0, 0xb7, 0x3d, 0x33, 0xb6, 0x7b, 0x66, 0xdc, 0xec, 0x99, 0xf1, 0xb3,
	0x73, 0xc4, 0x73, 0xed, 0x26, 0x22, 0x92, 0xdc, 0xcd, 0x62, 0xae, 0x57, 0x2a, 0x4f, 0xca, 0xef,
	0xf3, 0xc1, 0x82, 0xdf, 0xd6, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x53, 0x3e, 0xcc, 0xca, 0xe0,
	0x02, 0x00, 0x00,
}

func (x TRS_VisualScaleMode) String() string {
	s, ok := TRS_VisualScaleMode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *FSInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FSInfo)
	if !ok {
		that2, ok := that.(FSInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	if this.IsDir != that1.IsDir {
		return false
	}
	if this.FileName != that1.FileName {
		return false
	}
	if this.ContentType != that1.ContentType {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	if this.ModifiedAt != that1.ModifiedAt {
		return false
	}
	if this.ByteSize != that1.ByteSize {
		return false
	}
	return true
}
func (this *TRS) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TRS)
	if !ok {
		that2, ok := that.(TRS)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Anchor.Equal(that1.Anchor) {
		return false
	}
	if this.ScaleMode != that1.ScaleMode {
		return false
	}
	if this.X1 != that1.X1 {
		return false
	}
	if this.X2 != that1.X2 {
		return false
	}
	if this.X3 != that1.X3 {
		return false
	}
	if this.Scale1 != that1.Scale1 {
		return false
	}
	if this.Scale2 != that1.Scale2 {
		return false
	}
	if this.Scale3 != that1.Scale3 {
		return false
	}
	if this.Qi != that1.Qi {
		return false
	}
	if this.Qj != that1.Qj {
		return false
	}
	if this.Qn != that1.Qn {
		return false
	}
	if this.Qm != that1.Qm {
		return false
	}
	if this.EulerX != that1.EulerX {
		return false
	}
	if this.EulerY != that1.EulerY {
		return false
	}
	if this.EulerZ != that1.EulerZ {
		return false
	}
	return true
}
func (this *FSInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&std.FSInfo{")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	s = append(s, "IsDir: "+fmt.Sprintf("%#v", this.IsDir)+",\n")
	s = append(s, "FileName: "+fmt.Sprintf("%#v", this.FileName)+",\n")
	s = append(s, "ContentType: "+fmt.Sprintf("%#v", this.ContentType)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "ModifiedAt: "+fmt.Sprintf("%#v", this.ModifiedAt)+",\n")
	s = append(s, "ByteSize: "+fmt.Sprintf("%#v", this.ByteSize)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TRS) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&std.TRS{")
	if this.Anchor != nil {
		s = append(s, "Anchor: "+fmt.Sprintf("%#v", this.Anchor)+",\n")
	}
	s = append(s, "ScaleMode: "+fmt.Sprintf("%#v", this.ScaleMode)+",\n")
	s = append(s, "X1: "+fmt.Sprintf("%#v", this.X1)+",\n")
	s = append(s, "X2: "+fmt.Sprintf("%#v", this.X2)+",\n")
	s = append(s, "X3: "+fmt.Sprintf("%#v", this.X3)+",\n")
	s = append(s, "Scale1: "+fmt.Sprintf("%#v", this.Scale1)+",\n")
	s = append(s, "Scale2: "+fmt.Sprintf("%#v", this.Scale2)+",\n")
	s = append(s, "Scale3: "+fmt.Sprintf("%#v", this.Scale3)+",\n")
	s = append(s, "Qi: "+fmt.Sprintf("%#v", this.Qi)+",\n")
	s = append(s, "Qj: "+fmt.Sprintf("%#v", this.Qj)+",\n")
	s = append(s, "Qn: "+fmt.Sprintf("%#v", this.Qn)+",\n")
	s = append(s, "Qm: "+fmt.Sprintf("%#v", this.Qm)+",\n")
	s = append(s, "EulerX: "+fmt.Sprintf("%#v", this.EulerX)+",\n")
	s = append(s, "EulerY: "+fmt.Sprintf("%#v", this.EulerY)+",\n")
	s = append(s, "EulerZ: "+fmt.Sprintf("%#v", this.EulerZ)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAmpStd(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FSInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FSInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FSInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ByteSize != 0 {
		i = encodeVarintAmpStd(dAtA, i, uint64(m.ByteSize))
		i--
		dAtA[i] = 0x48
	}
	if m.ModifiedAt != 0 {
		i = encodeVarintAmpStd(dAtA, i, uint64(m.ModifiedAt))
		i--
		dAtA[i] = 0x40
	}
	if m.CreatedAt != 0 {
		i = encodeVarintAmpStd(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ContentType) > 0 {
		i -= len(m.ContentType)
		copy(dAtA[i:], m.ContentType)
		i = encodeVarintAmpStd(dAtA, i, uint64(len(m.ContentType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintAmpStd(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.IsDir {
		i--
		if m.IsDir {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Mode) > 0 {
		i -= len(m.Mode)
		copy(dAtA[i:], m.Mode)
		i = encodeVarintAmpStd(dAtA, i, uint64(len(m.Mode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TRS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TRS) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TRS) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EulerZ != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.EulerZ))))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xfd
	}
	if m.EulerY != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.EulerY))))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf5
	}
	if m.EulerX != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.EulerX))))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xed
	}
	if m.Qm != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Qm))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9d
	}
	if m.Qn != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Qn))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x95
	}
	if m.Qj != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Qj))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8d
	}
	if m.Qi != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Qi))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x85
	}
	if m.Scale3 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Scale3))))
		i--
		dAtA[i] = 0x6d
	}
	if m.Scale2 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Scale2))))
		i--
		dAtA[i] = 0x65
	}
	if m.Scale1 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Scale1))))
		i--
		dAtA[i] = 0x5d
	}
	if m.X3 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.X3))))
		i--
		dAtA[i] = 0x45
	}
	if m.X2 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.X2))))
		i--
		dAtA[i] = 0x3d
	}
	if m.X1 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.X1))))
		i--
		dAtA[i] = 0x35
	}
	if m.ScaleMode != 0 {
		i = encodeVarintAmpStd(dAtA, i, uint64(m.ScaleMode))
		i--
		dAtA[i] = 0x10
	}
	if m.Anchor != nil {
		{
			size, err := m.Anchor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAmpStd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAmpStd(dAtA []byte, offset int, v uint64) int {
	offset -= sovAmpStd(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FSInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Mode)
	if l > 0 {
		n += 1 + l + sovAmpStd(uint64(l))
	}
	if m.IsDir {
		n += 2
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovAmpStd(uint64(l))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovAmpStd(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovAmpStd(uint64(m.CreatedAt))
	}
	if m.ModifiedAt != 0 {
		n += 1 + sovAmpStd(uint64(m.ModifiedAt))
	}
	if m.ByteSize != 0 {
		n += 1 + sovAmpStd(uint64(m.ByteSize))
	}
	return n
}

func (m *TRS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Anchor != nil {
		l = m.Anchor.Size()
		n += 1 + l + sovAmpStd(uint64(l))
	}
	if m.ScaleMode != 0 {
		n += 1 + sovAmpStd(uint64(m.ScaleMode))
	}
	if m.X1 != 0 {
		n += 5
	}
	if m.X2 != 0 {
		n += 5
	}
	if m.X3 != 0 {
		n += 5
	}
	if m.Scale1 != 0 {
		n += 5
	}
	if m.Scale2 != 0 {
		n += 5
	}
	if m.Scale3 != 0 {
		n += 5
	}
	if m.Qi != 0 {
		n += 6
	}
	if m.Qj != 0 {
		n += 6
	}
	if m.Qn != 0 {
		n += 6
	}
	if m.Qm != 0 {
		n += 6
	}
	if m.EulerX != 0 {
		n += 6
	}
	if m.EulerY != 0 {
		n += 6
	}
	if m.EulerZ != 0 {
		n += 6
	}
	return n
}

func sovAmpStd(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAmpStd(x uint64) (n int) {
	return sovAmpStd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FSInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FSInfo{`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`IsDir:` + fmt.Sprintf("%v", this.IsDir) + `,`,
		`FileName:` + fmt.Sprintf("%v", this.FileName) + `,`,
		`ContentType:` + fmt.Sprintf("%v", this.ContentType) + `,`,
		`CreatedAt:` + fmt.Sprintf("%v", this.CreatedAt) + `,`,
		`ModifiedAt:` + fmt.Sprintf("%v", this.ModifiedAt) + `,`,
		`ByteSize:` + fmt.Sprintf("%v", this.ByteSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TRS) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TRS{`,
		`Anchor:` + strings.Replace(fmt.Sprintf("%v", this.Anchor), "Tag", "amp.Tag", 1) + `,`,
		`ScaleMode:` + fmt.Sprintf("%v", this.ScaleMode) + `,`,
		`X1:` + fmt.Sprintf("%v", this.X1) + `,`,
		`X2:` + fmt.Sprintf("%v", this.X2) + `,`,
		`X3:` + fmt.Sprintf("%v", this.X3) + `,`,
		`Scale1:` + fmt.Sprintf("%v", this.Scale1) + `,`,
		`Scale2:` + fmt.Sprintf("%v", this.Scale2) + `,`,
		`Scale3:` + fmt.Sprintf("%v", this.Scale3) + `,`,
		`Qi:` + fmt.Sprintf("%v", this.Qi) + `,`,
		`Qj:` + fmt.Sprintf("%v", this.Qj) + `,`,
		`Qn:` + fmt.Sprintf("%v", this.Qn) + `,`,
		`Qm:` + fmt.Sprintf("%v", this.Qm) + `,`,
		`EulerX:` + fmt.Sprintf("%v", this.EulerX) + `,`,
		`EulerY:` + fmt.Sprintf("%v", this.EulerY) + `,`,
		`EulerZ:` + fmt.Sprintf("%v", this.EulerZ) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAmpStd(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FSInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmpStd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FSInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FSInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmpStd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDir", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDir = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmpStd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmpStd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedAt", wireType)
			}
			m.ModifiedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModifiedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteSize", wireType)
			}
			m.ByteSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ByteSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAmpStd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmpStd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TRS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmpStd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TRS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TRS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Anchor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmpStd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmpStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Anchor == nil {
				m.Anchor = &amp.Tag{}
			}
			if err := m.Anchor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleMode", wireType)
			}
			m.ScaleMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScaleMode |= TRS_VisualScaleMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X1", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.X1 = float32(math.Float32frombits(v))
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X2", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.X2 = float32(math.Float32frombits(v))
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X3", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.X3 = float32(math.Float32frombits(v))
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scale1", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Scale1 = float32(math.Float32frombits(v))
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scale2", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Scale2 = float32(math.Float32frombits(v))
		case 13:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scale3", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Scale3 = float32(math.Float32frombits(v))
		case 16:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qi", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Qi = float32(math.Float32frombits(v))
		case 17:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qj", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Qj = float32(math.Float32frombits(v))
		case 18:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qn", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Qn = float32(math.Float32frombits(v))
		case 19:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qm", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Qm = float32(math.Float32frombits(v))
		case 61:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field EulerX", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.EulerX = float32(math.Float32frombits(v))
		case 62:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field EulerY", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.EulerY = float32(math.Float32frombits(v))
		case 63:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field EulerZ", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.EulerZ = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipAmpStd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmpStd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAmpStd(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAmpStd
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAmpStd
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAmpStd
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAmpStd
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAmpStd        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAmpStd          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAmpStd = fmt.Errorf("proto: unexpected end of group")
)
