// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: amp.std.proto

package std

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	amp "github.com/art-media-platform/amp.SDK/amp"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Specifies how scale dynamically changes based on observer position.
type VisualScale int32

const (
	VisualScale_Auto  VisualScale = 0
	VisualScale_Fixed VisualScale = 1
)

var VisualScale_name = map[int32]string{
	0: "VisualScale_Auto",
	1: "VisualScale_Fixed",
}

var VisualScale_value = map[string]int32{
	"VisualScale_Auto":  0,
	"VisualScale_Fixed": 1,
}

func (VisualScale) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f19235ecf4b48ee7, []int{0}
}

type GeoPath_RenderType int32

const (
	Point GeoPath_RenderType = 0
	Path  GeoPath_RenderType = 1
	Ring  GeoPath_RenderType = 2
)

var GeoPath_RenderType_name = map[int32]string{
	0: "Point",
	1: "Path",
	2: "Ring",
}

var GeoPath_RenderType_value = map[string]int32{
	"Point": 0,
	"Path":  1,
	"Ring":  2,
}

func (GeoPath_RenderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f19235ecf4b48ee7, []int{2, 0}
}

type GeoPath_Format int32

const (
	LatLng    GeoPath_Format = 0
	LatLngAlt GeoPath_Format = 1
)

var GeoPath_Format_name = map[int32]string{
	0: "LatLng",
	1: "LatLngAlt",
}

var GeoPath_Format_value = map[string]int32{
	"LatLng":    0,
	"LatLngAlt": 1,
}

func (GeoPath_Format) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f19235ecf4b48ee7, []int{2, 1}
}

// TRS (translate rotate scale) INA IEEE 1207
// A general-purpose placement spec in time, space, geo-position, and orientation.
type TRS struct {
	// Anchor in time, space, and/or geo-position.
	// May also specify a grid system or unit convention.
	Anchor *amp.Tag `protobuf:"bytes,1,opt,name=Anchor,proto3" json:"Anchor,omitempty"`
	// Specifies how scale dynamically changes based on observer position.
	VisualScale VisualScale `protobuf:"varint,2,opt,name=VisualScale,proto3,enum=std.VisualScale" json:"VisualScale,omitempty"`
	// a relative position in space
	Px float64 `protobuf:"fixed64,6,opt,name=Px,proto3" json:"Px,omitempty"`
	Py float64 `protobuf:"fixed64,7,opt,name=Py,proto3" json:"Py,omitempty"`
	Pz float64 `protobuf:"fixed64,8,opt,name=Pz,proto3" json:"Pz,omitempty"`
	// Scale1..3 express the scale of this placement.
	// If all three values are 0, they are all implicitly 1.
	// If Scale2 or Scale3 == 0, then it is implicitly Scale1.
	Sx float32 `protobuf:"fixed32,11,opt,name=Sx,proto3" json:"Sx,omitempty"`
	Sy float32 `protobuf:"fixed32,12,opt,name=Sy,proto3" json:"Sy,omitempty"`
	Sz float32 `protobuf:"fixed32,13,opt,name=Sz,proto3" json:"Sz,omitempty"`
	// a Quaternion rotation in space -- if all values are 0, there is no rotation.
	Qx float32 `protobuf:"fixed32,16,opt,name=Qx,proto3" json:"Qx,omitempty"`
	Qy float32 `protobuf:"fixed32,17,opt,name=Qy,proto3" json:"Qy,omitempty"`
	Qz float32 `protobuf:"fixed32,18,opt,name=Qz,proto3" json:"Qz,omitempty"`
	Qw float32 `protobuf:"fixed32,19,opt,name=Qw,proto3" json:"Qw,omitempty"`
}

func (m *TRS) Reset()      { *m = TRS{} }
func (*TRS) ProtoMessage() {}
func (*TRS) Descriptor() ([]byte, []int) {
	return fileDescriptor_f19235ecf4b48ee7, []int{0}
}
func (m *TRS) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TRS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TRS.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TRS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TRS.Merge(m, src)
}
func (m *TRS) XXX_Size() int {
	return m.Size()
}
func (m *TRS) XXX_DiscardUnknown() {
	xxx_messageInfo_TRS.DiscardUnknown(m)
}

var xxx_messageInfo_TRS proto.InternalMessageInfo

func (m *TRS) GetAnchor() *amp.Tag {
	if m != nil {
		return m.Anchor
	}
	return nil
}

func (m *TRS) GetVisualScale() VisualScale {
	if m != nil {
		return m.VisualScale
	}
	return VisualScale_Auto
}

func (m *TRS) GetPx() float64 {
	if m != nil {
		return m.Px
	}
	return 0
}

func (m *TRS) GetPy() float64 {
	if m != nil {
		return m.Py
	}
	return 0
}

func (m *TRS) GetPz() float64 {
	if m != nil {
		return m.Pz
	}
	return 0
}

func (m *TRS) GetSx() float32 {
	if m != nil {
		return m.Sx
	}
	return 0
}

func (m *TRS) GetSy() float32 {
	if m != nil {
		return m.Sy
	}
	return 0
}

func (m *TRS) GetSz() float32 {
	if m != nil {
		return m.Sz
	}
	return 0
}

func (m *TRS) GetQx() float32 {
	if m != nil {
		return m.Qx
	}
	return 0
}

func (m *TRS) GetQy() float32 {
	if m != nil {
		return m.Qy
	}
	return 0
}

func (m *TRS) GetQz() float32 {
	if m != nil {
		return m.Qz
	}
	return 0
}

func (m *TRS) GetQw() float32 {
	if m != nil {
		return m.Qw
	}
	return 0
}

// FileInfo a general-purpose file system meta info block.
type FileInfo struct {
	Mode        string `protobuf:"bytes,1,opt,name=Mode,proto3" json:"Mode,omitempty"`
	IsDir       bool   `protobuf:"varint,2,opt,name=IsDir,proto3" json:"IsDir,omitempty"`
	DirName     string `protobuf:"bytes,4,opt,name=DirName,proto3" json:"DirName,omitempty"`
	ItemName    string `protobuf:"bytes,5,opt,name=ItemName,proto3" json:"ItemName,omitempty"`
	ExtLen      int32  `protobuf:"varint,6,opt,name=ExtLen,proto3" json:"ExtLen,omitempty"`
	ContentType string `protobuf:"bytes,8,opt,name=ContentType,proto3" json:"ContentType,omitempty"`
	CreatedAt   int64  `protobuf:"varint,10,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	ModifiedAt  int64  `protobuf:"varint,11,opt,name=ModifiedAt,proto3" json:"ModifiedAt,omitempty"`
	ByteSize    int64  `protobuf:"varint,14,opt,name=ByteSize,proto3" json:"ByteSize,omitempty"`
}

func (m *FileInfo) Reset()      { *m = FileInfo{} }
func (*FileInfo) ProtoMessage() {}
func (*FileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f19235ecf4b48ee7, []int{1}
}
func (m *FileInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileInfo.Merge(m, src)
}
func (m *FileInfo) XXX_Size() int {
	return m.Size()
}
func (m *FileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FileInfo proto.InternalMessageInfo

func (m *FileInfo) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *FileInfo) GetIsDir() bool {
	if m != nil {
		return m.IsDir
	}
	return false
}

func (m *FileInfo) GetDirName() string {
	if m != nil {
		return m.DirName
	}
	return ""
}

func (m *FileInfo) GetItemName() string {
	if m != nil {
		return m.ItemName
	}
	return ""
}

func (m *FileInfo) GetExtLen() int32 {
	if m != nil {
		return m.ExtLen
	}
	return 0
}

func (m *FileInfo) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *FileInfo) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *FileInfo) GetModifiedAt() int64 {
	if m != nil {
		return m.ModifiedAt
	}
	return 0
}

func (m *FileInfo) GetByteSize() int64 {
	if m != nil {
		return m.ByteSize
	}
	return 0
}

type GeoPath struct {
	Type      GeoPath_RenderType `protobuf:"varint,1,opt,name=Type,proto3,enum=std.GeoPath_RenderType" json:"Type,omitempty"`
	ExtrudeLo float32            `protobuf:"fixed32,4,opt,name=ExtrudeLo,proto3" json:"ExtrudeLo,omitempty"`
	ExtrudeHi float32            `protobuf:"fixed32,5,opt,name=ExtrudeHi,proto3" json:"ExtrudeHi,omitempty"`
	Coords    []float64          `protobuf:"fixed64,15,rep,packed,name=Coords,proto3" json:"Coords,omitempty"`
}

func (m *GeoPath) Reset()      { *m = GeoPath{} }
func (*GeoPath) ProtoMessage() {}
func (*GeoPath) Descriptor() ([]byte, []int) {
	return fileDescriptor_f19235ecf4b48ee7, []int{2}
}
func (m *GeoPath) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeoPath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GeoPath.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GeoPath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoPath.Merge(m, src)
}
func (m *GeoPath) XXX_Size() int {
	return m.Size()
}
func (m *GeoPath) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoPath.DiscardUnknown(m)
}

var xxx_messageInfo_GeoPath proto.InternalMessageInfo

func (m *GeoPath) GetType() GeoPath_RenderType {
	if m != nil {
		return m.Type
	}
	return Point
}

func (m *GeoPath) GetExtrudeLo() float32 {
	if m != nil {
		return m.ExtrudeLo
	}
	return 0
}

func (m *GeoPath) GetExtrudeHi() float32 {
	if m != nil {
		return m.ExtrudeHi
	}
	return 0
}

func (m *GeoPath) GetCoords() []float64 {
	if m != nil {
		return m.Coords
	}
	return nil
}

func init() {
	proto.RegisterEnum("std.VisualScale", VisualScale_name, VisualScale_value)
	proto.RegisterEnum("std.GeoPath_RenderType", GeoPath_RenderType_name, GeoPath_RenderType_value)
	proto.RegisterEnum("std.GeoPath_Format", GeoPath_Format_name, GeoPath_Format_value)
	proto.RegisterType((*TRS)(nil), "std.TRS")
	proto.RegisterType((*FileInfo)(nil), "std.FileInfo")
	proto.RegisterType((*GeoPath)(nil), "std.GeoPath")
}

func init() { proto.RegisterFile("amp.std.proto", fileDescriptor_f19235ecf4b48ee7) }

var fileDescriptor_f19235ecf4b48ee7 = []byte{
	// 581 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x14, 0x85, 0x3d, 0xce, 0x4f, 0x93, 0x1b, 0x5a, 0xdc, 0xa1, 0x94, 0x51, 0x85, 0x46, 0x56, 0xd8,
	0x44, 0x54, 0x0a, 0x52, 0xd9, 0xb1, 0x4b, 0xff, 0x68, 0xa5, 0x14, 0x25, 0xe3, 0x8a, 0x2d, 0x1a,
	0xea, 0x69, 0x3b, 0x52, 0xec, 0x89, 0x9c, 0xa9, 0xea, 0x64, 0xc5, 0x23, 0xf0, 0x18, 0x88, 0x27,
	0x61, 0xd9, 0x65, 0x17, 0x2c, 0xa8, 0xb3, 0x61, 0xd9, 0x3d, 0x12, 0x42, 0xbe, 0x71, 0x1b, 0xb3,
	0xbb, 0xdf, 0x39, 0x47, 0x9a, 0xeb, 0x33, 0x1e, 0x58, 0x95, 0xd1, 0xb8, 0x3b, 0xb1, 0x61, 0x77,
	0x9c, 0x18, 0x6b, 0x68, 0x65, 0x62, 0xc3, 0x2d, 0x2a, 0xa3, 0xf1, 0x9b, 0x5c, 0x3f, 0x33, 0x89,
	0x5a, 0x18, 0xed, 0x3f, 0x04, 0x2a, 0xa7, 0x22, 0xa0, 0x3e, 0xd4, 0x7b, 0xf1, 0xd9, 0xa5, 0x49,
	0x18, 0xf1, 0x49, 0xa7, 0xb5, 0xd3, 0xe8, 0xe6, 0xc1, 0x53, 0x79, 0x21, 0x0a, 0x9d, 0xee, 0x40,
	0xeb, 0xa3, 0x9e, 0x5c, 0xc9, 0x51, 0x70, 0x26, 0x47, 0x8a, 0xb9, 0x3e, 0xe9, 0xac, 0xed, 0x78,
	0x78, 0x46, 0x49, 0x17, 0xe5, 0x10, 0x5d, 0x03, 0x77, 0x90, 0xb2, 0xba, 0x4f, 0x3a, 0x44, 0xb8,
	0x83, 0x14, 0x79, 0xca, 0x56, 0x0a, 0x9e, 0x22, 0xcf, 0x58, 0xa3, 0xe0, 0x59, 0xce, 0x41, 0xca,
	0x5a, 0x3e, 0xe9, 0xb8, 0xc2, 0x0d, 0x30, 0x1f, 0x4c, 0xd9, 0x93, 0x82, 0x31, 0x1f, 0xcc, 0xd8,
	0x6a, 0xc1, 0x98, 0x1f, 0xa6, 0xcc, 0x5b, 0xf0, 0x10, 0xf3, 0xc3, 0x29, 0x5b, 0x2f, 0x18, 0xf3,
	0xc3, 0x19, 0xa3, 0x05, 0x2f, 0xf2, 0xd7, 0xec, 0x59, 0xc1, 0xd7, 0xed, 0xbf, 0x04, 0x1a, 0x87,
	0x7a, 0xa4, 0x8e, 0xe3, 0x73, 0x43, 0x29, 0x54, 0x4f, 0x4c, 0xa8, 0xb0, 0x80, 0xa6, 0xc0, 0x99,
	0x6e, 0x40, 0xed, 0x78, 0xb2, 0xaf, 0x13, 0xfc, 0xdc, 0x86, 0x58, 0x00, 0x65, 0xb0, 0xb2, 0xaf,
	0x93, 0x0f, 0x32, 0x52, 0xac, 0x8a, 0xe1, 0x07, 0xa4, 0x5b, 0xd0, 0x38, 0xb6, 0x2a, 0x42, 0xab,
	0x86, 0xd6, 0x23, 0xd3, 0x4d, 0xa8, 0x1f, 0xa4, 0xb6, 0xaf, 0x62, 0x2c, 0xa4, 0x26, 0x0a, 0xa2,
	0x3e, 0xb4, 0xf6, 0x4c, 0x6c, 0x55, 0x6c, 0x4f, 0xa7, 0x63, 0x85, 0x6d, 0x34, 0x45, 0x59, 0xa2,
	0x2f, 0xa1, 0xb9, 0x97, 0x28, 0x69, 0x55, 0xd8, 0xb3, 0x0c, 0x7c, 0xd2, 0xa9, 0x88, 0xa5, 0x40,
	0x39, 0xc0, 0x89, 0x09, 0xf5, 0xb9, 0x46, 0xbb, 0x85, 0x76, 0x49, 0xc9, 0x77, 0xda, 0x9d, 0x5a,
	0x15, 0xe8, 0x99, 0x62, 0x6b, 0xe8, 0x3e, 0x72, 0xfb, 0x27, 0x81, 0x95, 0xf7, 0xca, 0x0c, 0xa4,
	0xbd, 0xa4, 0xdb, 0x50, 0xc5, 0x05, 0x08, 0xde, 0xec, 0x0b, 0xbc, 0xd9, 0xc2, 0xeb, 0x0a, 0x15,
	0x87, 0x2a, 0xc9, 0x6d, 0x51, 0x7d, 0x58, 0xe9, 0x20, 0xb5, 0xc9, 0x55, 0xa8, 0xfa, 0x06, 0x4b,
	0x70, 0xc5, 0x52, 0x28, 0xb9, 0x47, 0x1a, 0x7b, 0x58, 0xba, 0x47, 0x3a, 0x2f, 0x62, 0xcf, 0x98,
	0x24, 0x9c, 0xb0, 0xa7, 0x7e, 0xa5, 0x43, 0x44, 0x41, 0xed, 0x6d, 0x80, 0xe5, 0x39, 0xb4, 0x09,
	0xb5, 0x81, 0xd1, 0xb1, 0xf5, 0x1c, 0xda, 0x80, 0x6a, 0xbe, 0x85, 0x47, 0xf2, 0x49, 0xe8, 0xf8,
	0xc2, 0x73, 0xdb, 0xaf, 0xa0, 0x7e, 0x68, 0x92, 0x48, 0x5a, 0x0a, 0x50, 0xef, 0x4b, 0xdb, 0x8f,
	0x2f, 0x3c, 0x87, 0xae, 0x42, 0x73, 0x31, 0xf7, 0x46, 0xd6, 0x23, 0xaf, 0xdf, 0xfd, 0xf7, 0xcf,
	0xd2, 0x0d, 0xf0, 0x4a, 0xf8, 0xa9, 0x77, 0x65, 0x8d, 0xe7, 0xd0, 0xe7, 0xb0, 0x5e, 0x56, 0x0f,
	0x75, 0xaa, 0x42, 0x8f, 0xec, 0x9e, 0xdc, 0xdc, 0x71, 0xe7, 0xf6, 0x8e, 0x3b, 0xf7, 0x77, 0x9c,
	0x7c, 0xc9, 0x38, 0xf9, 0x96, 0x71, 0xf2, 0x23, 0xe3, 0xe4, 0x26, 0xe3, 0xe4, 0x57, 0xc6, 0xc9,
	0xef, 0x8c, 0x3b, 0xf7, 0x19, 0x27, 0x5f, 0xe7, 0xdc, 0xb9, 0x99, 0x73, 0xe7, 0x76, 0xce, 0x9d,
	0xef, 0xee, 0xa6, 0x4c, 0x6c, 0x37, 0x52, 0xa1, 0x96, 0xdd, 0xf1, 0x48, 0xda, 0x73, 0x93, 0x44,
	0x79, 0x93, 0x9f, 0xeb, 0xf8, 0xde, 0xde, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x28, 0x21,
	0xef, 0x99, 0x03, 0x00, 0x00,
}

func (x VisualScale) String() string {
	s, ok := VisualScale_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x GeoPath_RenderType) String() string {
	s, ok := GeoPath_RenderType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x GeoPath_Format) String() string {
	s, ok := GeoPath_Format_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *TRS) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TRS)
	if !ok {
		that2, ok := that.(TRS)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Anchor.Equal(that1.Anchor) {
		return false
	}
	if this.VisualScale != that1.VisualScale {
		return false
	}
	if this.Px != that1.Px {
		return false
	}
	if this.Py != that1.Py {
		return false
	}
	if this.Pz != that1.Pz {
		return false
	}
	if this.Sx != that1.Sx {
		return false
	}
	if this.Sy != that1.Sy {
		return false
	}
	if this.Sz != that1.Sz {
		return false
	}
	if this.Qx != that1.Qx {
		return false
	}
	if this.Qy != that1.Qy {
		return false
	}
	if this.Qz != that1.Qz {
		return false
	}
	if this.Qw != that1.Qw {
		return false
	}
	return true
}
func (this *FileInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FileInfo)
	if !ok {
		that2, ok := that.(FileInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	if this.IsDir != that1.IsDir {
		return false
	}
	if this.DirName != that1.DirName {
		return false
	}
	if this.ItemName != that1.ItemName {
		return false
	}
	if this.ExtLen != that1.ExtLen {
		return false
	}
	if this.ContentType != that1.ContentType {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	if this.ModifiedAt != that1.ModifiedAt {
		return false
	}
	if this.ByteSize != that1.ByteSize {
		return false
	}
	return true
}
func (this *GeoPath) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GeoPath)
	if !ok {
		that2, ok := that.(GeoPath)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.ExtrudeLo != that1.ExtrudeLo {
		return false
	}
	if this.ExtrudeHi != that1.ExtrudeHi {
		return false
	}
	if len(this.Coords) != len(that1.Coords) {
		return false
	}
	for i := range this.Coords {
		if this.Coords[i] != that1.Coords[i] {
			return false
		}
	}
	return true
}
func (this *TRS) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&std.TRS{")
	if this.Anchor != nil {
		s = append(s, "Anchor: "+fmt.Sprintf("%#v", this.Anchor)+",\n")
	}
	s = append(s, "VisualScale: "+fmt.Sprintf("%#v", this.VisualScale)+",\n")
	s = append(s, "Px: "+fmt.Sprintf("%#v", this.Px)+",\n")
	s = append(s, "Py: "+fmt.Sprintf("%#v", this.Py)+",\n")
	s = append(s, "Pz: "+fmt.Sprintf("%#v", this.Pz)+",\n")
	s = append(s, "Sx: "+fmt.Sprintf("%#v", this.Sx)+",\n")
	s = append(s, "Sy: "+fmt.Sprintf("%#v", this.Sy)+",\n")
	s = append(s, "Sz: "+fmt.Sprintf("%#v", this.Sz)+",\n")
	s = append(s, "Qx: "+fmt.Sprintf("%#v", this.Qx)+",\n")
	s = append(s, "Qy: "+fmt.Sprintf("%#v", this.Qy)+",\n")
	s = append(s, "Qz: "+fmt.Sprintf("%#v", this.Qz)+",\n")
	s = append(s, "Qw: "+fmt.Sprintf("%#v", this.Qw)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FileInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&std.FileInfo{")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	s = append(s, "IsDir: "+fmt.Sprintf("%#v", this.IsDir)+",\n")
	s = append(s, "DirName: "+fmt.Sprintf("%#v", this.DirName)+",\n")
	s = append(s, "ItemName: "+fmt.Sprintf("%#v", this.ItemName)+",\n")
	s = append(s, "ExtLen: "+fmt.Sprintf("%#v", this.ExtLen)+",\n")
	s = append(s, "ContentType: "+fmt.Sprintf("%#v", this.ContentType)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "ModifiedAt: "+fmt.Sprintf("%#v", this.ModifiedAt)+",\n")
	s = append(s, "ByteSize: "+fmt.Sprintf("%#v", this.ByteSize)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GeoPath) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&std.GeoPath{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "ExtrudeLo: "+fmt.Sprintf("%#v", this.ExtrudeLo)+",\n")
	s = append(s, "ExtrudeHi: "+fmt.Sprintf("%#v", this.ExtrudeHi)+",\n")
	s = append(s, "Coords: "+fmt.Sprintf("%#v", this.Coords)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAmpStd(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TRS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TRS) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TRS) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Qw != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Qw))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9d
	}
	if m.Qz != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Qz))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x95
	}
	if m.Qy != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Qy))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8d
	}
	if m.Qx != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Qx))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x85
	}
	if m.Sz != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Sz))))
		i--
		dAtA[i] = 0x6d
	}
	if m.Sy != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Sy))))
		i--
		dAtA[i] = 0x65
	}
	if m.Sx != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Sx))))
		i--
		dAtA[i] = 0x5d
	}
	if m.Pz != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Pz))))
		i--
		dAtA[i] = 0x41
	}
	if m.Py != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Py))))
		i--
		dAtA[i] = 0x39
	}
	if m.Px != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Px))))
		i--
		dAtA[i] = 0x31
	}
	if m.VisualScale != 0 {
		i = encodeVarintAmpStd(dAtA, i, uint64(m.VisualScale))
		i--
		dAtA[i] = 0x10
	}
	if m.Anchor != nil {
		{
			size, err := m.Anchor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAmpStd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FileInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ByteSize != 0 {
		i = encodeVarintAmpStd(dAtA, i, uint64(m.ByteSize))
		i--
		dAtA[i] = 0x70
	}
	if m.ModifiedAt != 0 {
		i = encodeVarintAmpStd(dAtA, i, uint64(m.ModifiedAt))
		i--
		dAtA[i] = 0x58
	}
	if m.CreatedAt != 0 {
		i = encodeVarintAmpStd(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x50
	}
	if len(m.ContentType) > 0 {
		i -= len(m.ContentType)
		copy(dAtA[i:], m.ContentType)
		i = encodeVarintAmpStd(dAtA, i, uint64(len(m.ContentType)))
		i--
		dAtA[i] = 0x42
	}
	if m.ExtLen != 0 {
		i = encodeVarintAmpStd(dAtA, i, uint64(m.ExtLen))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ItemName) > 0 {
		i -= len(m.ItemName)
		copy(dAtA[i:], m.ItemName)
		i = encodeVarintAmpStd(dAtA, i, uint64(len(m.ItemName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DirName) > 0 {
		i -= len(m.DirName)
		copy(dAtA[i:], m.DirName)
		i = encodeVarintAmpStd(dAtA, i, uint64(len(m.DirName)))
		i--
		dAtA[i] = 0x22
	}
	if m.IsDir {
		i--
		if m.IsDir {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Mode) > 0 {
		i -= len(m.Mode)
		copy(dAtA[i:], m.Mode)
		i = encodeVarintAmpStd(dAtA, i, uint64(len(m.Mode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GeoPath) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeoPath) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeoPath) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coords) > 0 {
		for iNdEx := len(m.Coords) - 1; iNdEx >= 0; iNdEx-- {
			f2 := math.Float64bits(float64(m.Coords[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f2))
		}
		i = encodeVarintAmpStd(dAtA, i, uint64(len(m.Coords)*8))
		i--
		dAtA[i] = 0x7a
	}
	if m.ExtrudeHi != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ExtrudeHi))))
		i--
		dAtA[i] = 0x2d
	}
	if m.ExtrudeLo != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ExtrudeLo))))
		i--
		dAtA[i] = 0x25
	}
	if m.Type != 0 {
		i = encodeVarintAmpStd(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAmpStd(dAtA []byte, offset int, v uint64) int {
	offset -= sovAmpStd(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TRS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Anchor != nil {
		l = m.Anchor.Size()
		n += 1 + l + sovAmpStd(uint64(l))
	}
	if m.VisualScale != 0 {
		n += 1 + sovAmpStd(uint64(m.VisualScale))
	}
	if m.Px != 0 {
		n += 9
	}
	if m.Py != 0 {
		n += 9
	}
	if m.Pz != 0 {
		n += 9
	}
	if m.Sx != 0 {
		n += 5
	}
	if m.Sy != 0 {
		n += 5
	}
	if m.Sz != 0 {
		n += 5
	}
	if m.Qx != 0 {
		n += 6
	}
	if m.Qy != 0 {
		n += 6
	}
	if m.Qz != 0 {
		n += 6
	}
	if m.Qw != 0 {
		n += 6
	}
	return n
}

func (m *FileInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Mode)
	if l > 0 {
		n += 1 + l + sovAmpStd(uint64(l))
	}
	if m.IsDir {
		n += 2
	}
	l = len(m.DirName)
	if l > 0 {
		n += 1 + l + sovAmpStd(uint64(l))
	}
	l = len(m.ItemName)
	if l > 0 {
		n += 1 + l + sovAmpStd(uint64(l))
	}
	if m.ExtLen != 0 {
		n += 1 + sovAmpStd(uint64(m.ExtLen))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovAmpStd(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovAmpStd(uint64(m.CreatedAt))
	}
	if m.ModifiedAt != 0 {
		n += 1 + sovAmpStd(uint64(m.ModifiedAt))
	}
	if m.ByteSize != 0 {
		n += 1 + sovAmpStd(uint64(m.ByteSize))
	}
	return n
}

func (m *GeoPath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovAmpStd(uint64(m.Type))
	}
	if m.ExtrudeLo != 0 {
		n += 5
	}
	if m.ExtrudeHi != 0 {
		n += 5
	}
	if len(m.Coords) > 0 {
		n += 1 + sovAmpStd(uint64(len(m.Coords)*8)) + len(m.Coords)*8
	}
	return n
}

func sovAmpStd(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAmpStd(x uint64) (n int) {
	return sovAmpStd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TRS) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TRS{`,
		`Anchor:` + strings.Replace(fmt.Sprintf("%v", this.Anchor), "Tag", "amp.Tag", 1) + `,`,
		`VisualScale:` + fmt.Sprintf("%v", this.VisualScale) + `,`,
		`Px:` + fmt.Sprintf("%v", this.Px) + `,`,
		`Py:` + fmt.Sprintf("%v", this.Py) + `,`,
		`Pz:` + fmt.Sprintf("%v", this.Pz) + `,`,
		`Sx:` + fmt.Sprintf("%v", this.Sx) + `,`,
		`Sy:` + fmt.Sprintf("%v", this.Sy) + `,`,
		`Sz:` + fmt.Sprintf("%v", this.Sz) + `,`,
		`Qx:` + fmt.Sprintf("%v", this.Qx) + `,`,
		`Qy:` + fmt.Sprintf("%v", this.Qy) + `,`,
		`Qz:` + fmt.Sprintf("%v", this.Qz) + `,`,
		`Qw:` + fmt.Sprintf("%v", this.Qw) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FileInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FileInfo{`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`IsDir:` + fmt.Sprintf("%v", this.IsDir) + `,`,
		`DirName:` + fmt.Sprintf("%v", this.DirName) + `,`,
		`ItemName:` + fmt.Sprintf("%v", this.ItemName) + `,`,
		`ExtLen:` + fmt.Sprintf("%v", this.ExtLen) + `,`,
		`ContentType:` + fmt.Sprintf("%v", this.ContentType) + `,`,
		`CreatedAt:` + fmt.Sprintf("%v", this.CreatedAt) + `,`,
		`ModifiedAt:` + fmt.Sprintf("%v", this.ModifiedAt) + `,`,
		`ByteSize:` + fmt.Sprintf("%v", this.ByteSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GeoPath) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GeoPath{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ExtrudeLo:` + fmt.Sprintf("%v", this.ExtrudeLo) + `,`,
		`ExtrudeHi:` + fmt.Sprintf("%v", this.ExtrudeHi) + `,`,
		`Coords:` + fmt.Sprintf("%v", this.Coords) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAmpStd(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TRS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmpStd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TRS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TRS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Anchor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmpStd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmpStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Anchor == nil {
				m.Anchor = &amp.Tag{}
			}
			if err := m.Anchor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisualScale", wireType)
			}
			m.VisualScale = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VisualScale |= VisualScale(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Px", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Px = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Py", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Py = float64(math.Float64frombits(v))
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pz", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Pz = float64(math.Float64frombits(v))
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sx", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Sx = float32(math.Float32frombits(v))
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sy", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Sy = float32(math.Float32frombits(v))
		case 13:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sz", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Sz = float32(math.Float32frombits(v))
		case 16:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qx", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Qx = float32(math.Float32frombits(v))
		case 17:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qy", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Qy = float32(math.Float32frombits(v))
		case 18:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qz", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Qz = float32(math.Float32frombits(v))
		case 19:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qw", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Qw = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipAmpStd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmpStd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmpStd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmpStd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDir", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDir = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmpStd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DirName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmpStd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtLen", wireType)
			}
			m.ExtLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtLen |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmpStd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedAt", wireType)
			}
			m.ModifiedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModifiedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteSize", wireType)
			}
			m.ByteSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ByteSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAmpStd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmpStd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeoPath) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmpStd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeoPath: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeoPath: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= GeoPath_RenderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtrudeLo", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ExtrudeLo = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtrudeHi", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ExtrudeHi = float32(math.Float32frombits(v))
		case 15:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Coords = append(m.Coords, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAmpStd
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAmpStd
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAmpStd
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Coords) == 0 {
					m.Coords = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Coords = append(m.Coords, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Coords", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAmpStd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmpStd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAmpStd(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAmpStd
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAmpStd
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAmpStd
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAmpStd
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAmpStd        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAmpStd          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAmpStd = fmt.Errorf("proto: unexpected end of group")
)
