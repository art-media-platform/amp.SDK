// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: amp.std.proto

package std

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	amp "github.com/art-media-platform/amp.SDK/amp"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Specifies how scale dynamically changes based on observer position.
type ScaleMode int32

const (
	ScaleMode_Fixed ScaleMode = 0
	ScaleMode_Auto  ScaleMode = 1
)

var ScaleMode_name = map[int32]string{
	0: "ScaleMode_Fixed",
	1: "ScaleMode_Auto",
}

var ScaleMode_value = map[string]int32{
	"ScaleMode_Fixed": 0,
	"ScaleMode_Auto":  1,
}

func (ScaleMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f19235ecf4b48ee7, []int{0}
}

type PointFormat int32

const (
	PointFormat_S2  PointFormat = 0
	PointFormat_H3  PointFormat = 1
	PointFormat_S2T PointFormat = 2
	PointFormat_H3T PointFormat = 3
)

var PointFormat_name = map[int32]string{
	0: "PointFormat_S2",
	1: "PointFormat_H3",
	2: "PointFormat_S2T",
	3: "PointFormat_H3T",
}

var PointFormat_value = map[string]int32{
	"PointFormat_S2":  0,
	"PointFormat_H3":  1,
	"PointFormat_S2T": 2,
	"PointFormat_H3T": 3,
}

func (PointFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f19235ecf4b48ee7, []int{1}
}

type GeoPath_RenderType int32

const (
	Point GeoPath_RenderType = 0
	Path  GeoPath_RenderType = 1
	Ring  GeoPath_RenderType = 2
)

var GeoPath_RenderType_name = map[int32]string{
	0: "Point",
	1: "Path",
	2: "Ring",
}

var GeoPath_RenderType_value = map[string]int32{
	"Point": 0,
	"Path":  1,
	"Ring":  2,
}

func (GeoPath_RenderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f19235ecf4b48ee7, []int{9, 0}
}

// TRS (translate rotate scale) IEEE 1207
// General purpose placement time, space, orientation, and/or geo-position.
type TRS struct {
	// spatial scale; if 0, scale is 1.0
	Scale float64 `protobuf:"fixed64,1,opt,name=Scale,proto3" json:"Scale,omitempty"`
	// Specifies how scale dynamically changes based on observer position.
	// DEPRECATED: HUD dynamically chooses pip size (min and max)
	VisualScale ScaleMode `protobuf:"varint,2,opt,name=VisualScale,proto3,enum=std.ScaleMode" json:"VisualScale,omitempty"`
	// spatial position
	Px float64 `protobuf:"fixed64,3,opt,name=Px,proto3" json:"Px,omitempty"`
	Py float64 `protobuf:"fixed64,4,opt,name=Py,proto3" json:"Py,omitempty"`
	Pz float64 `protobuf:"fixed64,5,opt,name=Pz,proto3" json:"Pz,omitempty"`
	// spatial rotation; if all values 0, Quaternion is unit identity
	Qx float64 `protobuf:"fixed64,10,opt,name=Qx,proto3" json:"Qx,omitempty"`
	Qy float64 `protobuf:"fixed64,11,opt,name=Qy,proto3" json:"Qy,omitempty"`
	Qz float64 `protobuf:"fixed64,12,opt,name=Qz,proto3" json:"Qz,omitempty"`
	Qw float64 `protobuf:"fixed64,13,opt,name=Qw,proto3" json:"Qw,omitempty"`
}

func (m *TRS) Reset()      { *m = TRS{} }
func (*TRS) ProtoMessage() {}
func (*TRS) Descriptor() ([]byte, []int) {
	return fileDescriptor_f19235ecf4b48ee7, []int{0}
}
func (m *TRS) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TRS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TRS.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TRS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TRS.Merge(m, src)
}
func (m *TRS) XXX_Size() int {
	return m.Size()
}
func (m *TRS) XXX_DiscardUnknown() {
	xxx_messageInfo_TRS.DiscardUnknown(m)
}

var xxx_messageInfo_TRS proto.InternalMessageInfo

func (m *TRS) GetScale() float64 {
	if m != nil {
		return m.Scale
	}
	return 0
}

func (m *TRS) GetVisualScale() ScaleMode {
	if m != nil {
		return m.VisualScale
	}
	return ScaleMode_Fixed
}

func (m *TRS) GetPx() float64 {
	if m != nil {
		return m.Px
	}
	return 0
}

func (m *TRS) GetPy() float64 {
	if m != nil {
		return m.Py
	}
	return 0
}

func (m *TRS) GetPz() float64 {
	if m != nil {
		return m.Pz
	}
	return 0
}

func (m *TRS) GetQx() float64 {
	if m != nil {
		return m.Qx
	}
	return 0
}

func (m *TRS) GetQy() float64 {
	if m != nil {
		return m.Qy
	}
	return 0
}

func (m *TRS) GetQz() float64 {
	if m != nil {
		return m.Qz
	}
	return 0
}

func (m *TRS) GetQw() float64 {
	if m != nil {
		return m.Qw
	}
	return 0
}

type Matrix4X4 struct {
	// 16 doubles in row-major order
	M00 float64 `protobuf:"fixed64,1,opt,name=M00,proto3" json:"M00,omitempty"`
	M01 float64 `protobuf:"fixed64,2,opt,name=M01,proto3" json:"M01,omitempty"`
	M02 float64 `protobuf:"fixed64,3,opt,name=M02,proto3" json:"M02,omitempty"`
	M03 float64 `protobuf:"fixed64,4,opt,name=M03,proto3" json:"M03,omitempty"`
	M10 float64 `protobuf:"fixed64,5,opt,name=M10,proto3" json:"M10,omitempty"`
	M11 float64 `protobuf:"fixed64,6,opt,name=M11,proto3" json:"M11,omitempty"`
	M12 float64 `protobuf:"fixed64,7,opt,name=M12,proto3" json:"M12,omitempty"`
	M13 float64 `protobuf:"fixed64,8,opt,name=M13,proto3" json:"M13,omitempty"`
	M20 float64 `protobuf:"fixed64,9,opt,name=M20,proto3" json:"M20,omitempty"`
	M21 float64 `protobuf:"fixed64,10,opt,name=M21,proto3" json:"M21,omitempty"`
	M22 float64 `protobuf:"fixed64,11,opt,name=M22,proto3" json:"M22,omitempty"`
	M23 float64 `protobuf:"fixed64,12,opt,name=M23,proto3" json:"M23,omitempty"`
	M30 float64 `protobuf:"fixed64,13,opt,name=M30,proto3" json:"M30,omitempty"`
	M31 float64 `protobuf:"fixed64,14,opt,name=M31,proto3" json:"M31,omitempty"`
	M32 float64 `protobuf:"fixed64,15,opt,name=M32,proto3" json:"M32,omitempty"`
	M33 float64 `protobuf:"fixed64,16,opt,name=M33,proto3" json:"M33,omitempty"`
}

func (m *Matrix4X4) Reset()      { *m = Matrix4X4{} }
func (*Matrix4X4) ProtoMessage() {}
func (*Matrix4X4) Descriptor() ([]byte, []int) {
	return fileDescriptor_f19235ecf4b48ee7, []int{1}
}
func (m *Matrix4X4) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Matrix4X4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Matrix4X4.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Matrix4X4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Matrix4X4.Merge(m, src)
}
func (m *Matrix4X4) XXX_Size() int {
	return m.Size()
}
func (m *Matrix4X4) XXX_DiscardUnknown() {
	xxx_messageInfo_Matrix4X4.DiscardUnknown(m)
}

var xxx_messageInfo_Matrix4X4 proto.InternalMessageInfo

func (m *Matrix4X4) GetM00() float64 {
	if m != nil {
		return m.M00
	}
	return 0
}

func (m *Matrix4X4) GetM01() float64 {
	if m != nil {
		return m.M01
	}
	return 0
}

func (m *Matrix4X4) GetM02() float64 {
	if m != nil {
		return m.M02
	}
	return 0
}

func (m *Matrix4X4) GetM03() float64 {
	if m != nil {
		return m.M03
	}
	return 0
}

func (m *Matrix4X4) GetM10() float64 {
	if m != nil {
		return m.M10
	}
	return 0
}

func (m *Matrix4X4) GetM11() float64 {
	if m != nil {
		return m.M11
	}
	return 0
}

func (m *Matrix4X4) GetM12() float64 {
	if m != nil {
		return m.M12
	}
	return 0
}

func (m *Matrix4X4) GetM13() float64 {
	if m != nil {
		return m.M13
	}
	return 0
}

func (m *Matrix4X4) GetM20() float64 {
	if m != nil {
		return m.M20
	}
	return 0
}

func (m *Matrix4X4) GetM21() float64 {
	if m != nil {
		return m.M21
	}
	return 0
}

func (m *Matrix4X4) GetM22() float64 {
	if m != nil {
		return m.M22
	}
	return 0
}

func (m *Matrix4X4) GetM23() float64 {
	if m != nil {
		return m.M23
	}
	return 0
}

func (m *Matrix4X4) GetM30() float64 {
	if m != nil {
		return m.M30
	}
	return 0
}

func (m *Matrix4X4) GetM31() float64 {
	if m != nil {
		return m.M31
	}
	return 0
}

func (m *Matrix4X4) GetM32() float64 {
	if m != nil {
		return m.M32
	}
	return 0
}

func (m *Matrix4X4) GetM33() float64 {
	if m != nil {
		return m.M33
	}
	return 0
}

// General purpose Camera state
type CameraState struct {
	Placement *TRS    `protobuf:"bytes,1,opt,name=Placement,proto3" json:"Placement,omitempty"`
	Pitch     float32 `protobuf:"fixed32,2,opt,name=Pitch,proto3" json:"Pitch,omitempty"`
	Yaw       float32 `protobuf:"fixed32,3,opt,name=Yaw,proto3" json:"Yaw,omitempty"`
	Distance  float32 `protobuf:"fixed32,5,opt,name=Distance,proto3" json:"Distance,omitempty"`
	Altitude  float32 `protobuf:"fixed32,6,opt,name=Altitude,proto3" json:"Altitude,omitempty"`
	Mass      float32 `protobuf:"fixed32,9,opt,name=Mass,proto3" json:"Mass,omitempty"`
	NearPlane float32 `protobuf:"fixed32,10,opt,name=NearPlane,proto3" json:"NearPlane,omitempty"`
	FarPlane  float32 `protobuf:"fixed32,11,opt,name=FarPlane,proto3" json:"FarPlane,omitempty"`
	Fov       float32 `protobuf:"fixed32,13,opt,name=Fov,proto3" json:"Fov,omitempty"`
	PixelsX   int32   `protobuf:"varint,16,opt,name=PixelsX,proto3" json:"PixelsX,omitempty"`
	PixelsY   int32   `protobuf:"varint,17,opt,name=PixelsY,proto3" json:"PixelsY,omitempty"`
	Mode      string  `protobuf:"bytes,20,opt,name=Mode,proto3" json:"Mode,omitempty"`
}

func (m *CameraState) Reset()      { *m = CameraState{} }
func (*CameraState) ProtoMessage() {}
func (*CameraState) Descriptor() ([]byte, []int) {
	return fileDescriptor_f19235ecf4b48ee7, []int{2}
}
func (m *CameraState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CameraState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CameraState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CameraState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CameraState.Merge(m, src)
}
func (m *CameraState) XXX_Size() int {
	return m.Size()
}
func (m *CameraState) XXX_DiscardUnknown() {
	xxx_messageInfo_CameraState.DiscardUnknown(m)
}

var xxx_messageInfo_CameraState proto.InternalMessageInfo

func (m *CameraState) GetPlacement() *TRS {
	if m != nil {
		return m.Placement
	}
	return nil
}

func (m *CameraState) GetPitch() float32 {
	if m != nil {
		return m.Pitch
	}
	return 0
}

func (m *CameraState) GetYaw() float32 {
	if m != nil {
		return m.Yaw
	}
	return 0
}

func (m *CameraState) GetDistance() float32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *CameraState) GetAltitude() float32 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

func (m *CameraState) GetMass() float32 {
	if m != nil {
		return m.Mass
	}
	return 0
}

func (m *CameraState) GetNearPlane() float32 {
	if m != nil {
		return m.NearPlane
	}
	return 0
}

func (m *CameraState) GetFarPlane() float32 {
	if m != nil {
		return m.FarPlane
	}
	return 0
}

func (m *CameraState) GetFov() float32 {
	if m != nil {
		return m.Fov
	}
	return 0
}

func (m *CameraState) GetPixelsX() int32 {
	if m != nil {
		return m.PixelsX
	}
	return 0
}

func (m *CameraState) GetPixelsY() int32 {
	if m != nil {
		return m.PixelsY
	}
	return 0
}

func (m *CameraState) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

type CameraOptions struct {
	MoveSpeed float32 `protobuf:"fixed32,1,opt,name=MoveSpeed,proto3" json:"MoveSpeed,omitempty"`
	Mode      string  `protobuf:"bytes,2,opt,name=Mode,proto3" json:"Mode,omitempty"`
}

func (m *CameraOptions) Reset()      { *m = CameraOptions{} }
func (*CameraOptions) ProtoMessage() {}
func (*CameraOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_f19235ecf4b48ee7, []int{3}
}
func (m *CameraOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CameraOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CameraOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CameraOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CameraOptions.Merge(m, src)
}
func (m *CameraOptions) XXX_Size() int {
	return m.Size()
}
func (m *CameraOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_CameraOptions.DiscardUnknown(m)
}

var xxx_messageInfo_CameraOptions proto.InternalMessageInfo

func (m *CameraOptions) GetMoveSpeed() float32 {
	if m != nil {
		return m.MoveSpeed
	}
	return 0
}

func (m *CameraOptions) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

type VisPreset struct {
	AssetTag *amp.Tag `protobuf:"bytes,1,opt,name=AssetTag,proto3" json:"AssetTag,omitempty"`
	Args     string   `protobuf:"bytes,2,opt,name=Args,proto3" json:"Args,omitempty"`
}

func (m *VisPreset) Reset()      { *m = VisPreset{} }
func (*VisPreset) ProtoMessage() {}
func (*VisPreset) Descriptor() ([]byte, []int) {
	return fileDescriptor_f19235ecf4b48ee7, []int{4}
}
func (m *VisPreset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VisPreset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VisPreset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VisPreset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VisPreset.Merge(m, src)
}
func (m *VisPreset) XXX_Size() int {
	return m.Size()
}
func (m *VisPreset) XXX_DiscardUnknown() {
	xxx_messageInfo_VisPreset.DiscardUnknown(m)
}

var xxx_messageInfo_VisPreset proto.InternalMessageInfo

func (m *VisPreset) GetAssetTag() *amp.Tag {
	if m != nil {
		return m.AssetTag
	}
	return nil
}

func (m *VisPreset) GetArgs() string {
	if m != nil {
		return m.Args
	}
	return ""
}

// FileInfo a general-purpose file system meta info block.
type FileInfo struct {
	Mode        string `protobuf:"bytes,1,opt,name=Mode,proto3" json:"Mode,omitempty"`
	IsDir       bool   `protobuf:"varint,2,opt,name=IsDir,proto3" json:"IsDir,omitempty"`
	DirName     string `protobuf:"bytes,4,opt,name=DirName,proto3" json:"DirName,omitempty"`
	ItemName    string `protobuf:"bytes,5,opt,name=ItemName,proto3" json:"ItemName,omitempty"`
	ExtLen      int32  `protobuf:"varint,6,opt,name=ExtLen,proto3" json:"ExtLen,omitempty"`
	ContentType string `protobuf:"bytes,8,opt,name=ContentType,proto3" json:"ContentType,omitempty"`
	CreatedAt   int64  `protobuf:"varint,10,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	ModifiedAt  int64  `protobuf:"varint,11,opt,name=ModifiedAt,proto3" json:"ModifiedAt,omitempty"`
	ByteSize    int64  `protobuf:"varint,14,opt,name=ByteSize,proto3" json:"ByteSize,omitempty"`
}

func (m *FileInfo) Reset()      { *m = FileInfo{} }
func (*FileInfo) ProtoMessage() {}
func (*FileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f19235ecf4b48ee7, []int{5}
}
func (m *FileInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileInfo.Merge(m, src)
}
func (m *FileInfo) XXX_Size() int {
	return m.Size()
}
func (m *FileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FileInfo proto.InternalMessageInfo

func (m *FileInfo) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *FileInfo) GetIsDir() bool {
	if m != nil {
		return m.IsDir
	}
	return false
}

func (m *FileInfo) GetDirName() string {
	if m != nil {
		return m.DirName
	}
	return ""
}

func (m *FileInfo) GetItemName() string {
	if m != nil {
		return m.ItemName
	}
	return ""
}

func (m *FileInfo) GetExtLen() int32 {
	if m != nil {
		return m.ExtLen
	}
	return 0
}

func (m *FileInfo) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *FileInfo) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *FileInfo) GetModifiedAt() int64 {
	if m != nil {
		return m.ModifiedAt
	}
	return 0
}

func (m *FileInfo) GetByteSize() int64 {
	if m != nil {
		return m.ByteSize
	}
	return 0
}

// Multi-purpose, future-proof text element / label / item
type TextItem struct {
	Body string    `protobuf:"bytes,1,opt,name=Body,proto3" json:"Body,omitempty"`
	Tags *amp.Tags `protobuf:"bytes,4,opt,name=Tags,proto3" json:"Tags,omitempty"`
}

func (m *TextItem) Reset()      { *m = TextItem{} }
func (*TextItem) ProtoMessage() {}
func (*TextItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_f19235ecf4b48ee7, []int{6}
}
func (m *TextItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TextItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TextItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextItem.Merge(m, src)
}
func (m *TextItem) XXX_Size() int {
	return m.Size()
}
func (m *TextItem) XXX_DiscardUnknown() {
	xxx_messageInfo_TextItem.DiscardUnknown(m)
}

var xxx_messageInfo_TextItem proto.InternalMessageInfo

func (m *TextItem) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *TextItem) GetTags() *amp.Tags {
	if m != nil {
		return m.Tags
	}
	return nil
}

type Labels struct {
	Title    string `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	Subtitle string `protobuf:"bytes,2,opt,name=Subtitle,proto3" json:"Subtitle,omitempty"`
	Help     string `protobuf:"bytes,3,opt,name=Help,proto3" json:"Help,omitempty"`
}

func (m *Labels) Reset()      { *m = Labels{} }
func (*Labels) ProtoMessage() {}
func (*Labels) Descriptor() ([]byte, []int) {
	return fileDescriptor_f19235ecf4b48ee7, []int{7}
}
func (m *Labels) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Labels) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Labels.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Labels) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Labels.Merge(m, src)
}
func (m *Labels) XXX_Size() int {
	return m.Size()
}
func (m *Labels) XXX_DiscardUnknown() {
	xxx_messageInfo_Labels.DiscardUnknown(m)
}

var xxx_messageInfo_Labels proto.InternalMessageInfo

func (m *Labels) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Labels) GetSubtitle() string {
	if m != nil {
		return m.Subtitle
	}
	return ""
}

func (m *Labels) GetHelp() string {
	if m != nil {
		return m.Help
	}
	return ""
}

// General purpose lightweight set of geo tiles in the shape of a rectangle - composed rectangle given a center and width/height.
// The units are typically mid H3 resolution with rectangular dimensions in units of font glyph size.
type Rect struct {
	Format PointFormat `protobuf:"varint,1,opt,name=Format,proto3,enum=std.PointFormat" json:"Format,omitempty"`
	Anchor uint64      `protobuf:"fixed64,2,opt,name=Anchor,proto3" json:"Anchor,omitempty"`
	R      uint64      `protobuf:"fixed64,3,opt,name=R,proto3" json:"R,omitempty"`
	Width  int32       `protobuf:"varint,8,opt,name=Width,proto3" json:"Width,omitempty"`
	Height int32       `protobuf:"varint,9,opt,name=Height,proto3" json:"Height,omitempty"`
	I      int32       `protobuf:"varint,10,opt,name=I,proto3" json:"I,omitempty"`
	J      int32       `protobuf:"varint,11,opt,name=J,proto3" json:"J,omitempty"`
	K      int32       `protobuf:"varint,12,opt,name=K,proto3" json:"K,omitempty"`
}

func (m *Rect) Reset()      { *m = Rect{} }
func (*Rect) ProtoMessage() {}
func (*Rect) Descriptor() ([]byte, []int) {
	return fileDescriptor_f19235ecf4b48ee7, []int{8}
}
func (m *Rect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rect.Merge(m, src)
}
func (m *Rect) XXX_Size() int {
	return m.Size()
}
func (m *Rect) XXX_DiscardUnknown() {
	xxx_messageInfo_Rect.DiscardUnknown(m)
}

var xxx_messageInfo_Rect proto.InternalMessageInfo

func (m *Rect) GetFormat() PointFormat {
	if m != nil {
		return m.Format
	}
	return PointFormat_S2
}

func (m *Rect) GetAnchor() uint64 {
	if m != nil {
		return m.Anchor
	}
	return 0
}

func (m *Rect) GetR() uint64 {
	if m != nil {
		return m.R
	}
	return 0
}

func (m *Rect) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Rect) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Rect) GetI() int32 {
	if m != nil {
		return m.I
	}
	return 0
}

func (m *Rect) GetJ() int32 {
	if m != nil {
		return m.J
	}
	return 0
}

func (m *Rect) GetK() int32 {
	if m != nil {
		return m.K
	}
	return 0
}

// General purpose polygonal path of geo tiles.
type GeoPath struct {
	Type      GeoPath_RenderType `protobuf:"varint,1,opt,name=Type,proto3,enum=std.GeoPath_RenderType" json:"Type,omitempty"`
	ExtrudeLo float32            `protobuf:"fixed32,4,opt,name=ExtrudeLo,proto3" json:"ExtrudeLo,omitempty"`
	ExtrudeHi float32            `protobuf:"fixed32,5,opt,name=ExtrudeHi,proto3" json:"ExtrudeHi,omitempty"`
	Format    PointFormat        `protobuf:"varint,14,opt,name=Format,proto3,enum=std.PointFormat" json:"Format,omitempty"`
	Points    []uint64           `protobuf:"fixed64,15,rep,packed,name=Points,proto3" json:"Points,omitempty"`
}

func (m *GeoPath) Reset()      { *m = GeoPath{} }
func (*GeoPath) ProtoMessage() {}
func (*GeoPath) Descriptor() ([]byte, []int) {
	return fileDescriptor_f19235ecf4b48ee7, []int{9}
}
func (m *GeoPath) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeoPath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GeoPath.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GeoPath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoPath.Merge(m, src)
}
func (m *GeoPath) XXX_Size() int {
	return m.Size()
}
func (m *GeoPath) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoPath.DiscardUnknown(m)
}

var xxx_messageInfo_GeoPath proto.InternalMessageInfo

func (m *GeoPath) GetType() GeoPath_RenderType {
	if m != nil {
		return m.Type
	}
	return Point
}

func (m *GeoPath) GetExtrudeLo() float32 {
	if m != nil {
		return m.ExtrudeLo
	}
	return 0
}

func (m *GeoPath) GetExtrudeHi() float32 {
	if m != nil {
		return m.ExtrudeHi
	}
	return 0
}

func (m *GeoPath) GetFormat() PointFormat {
	if m != nil {
		return m.Format
	}
	return PointFormat_S2
}

func (m *GeoPath) GetPoints() []uint64 {
	if m != nil {
		return m.Points
	}
	return nil
}

func init() {
	proto.RegisterEnum("std.ScaleMode", ScaleMode_name, ScaleMode_value)
	proto.RegisterEnum("std.PointFormat", PointFormat_name, PointFormat_value)
	proto.RegisterEnum("std.GeoPath_RenderType", GeoPath_RenderType_name, GeoPath_RenderType_value)
	proto.RegisterType((*TRS)(nil), "std.TRS")
	proto.RegisterType((*Matrix4X4)(nil), "std.Matrix4x4")
	proto.RegisterType((*CameraState)(nil), "std.CameraState")
	proto.RegisterType((*CameraOptions)(nil), "std.CameraOptions")
	proto.RegisterType((*VisPreset)(nil), "std.VisPreset")
	proto.RegisterType((*FileInfo)(nil), "std.FileInfo")
	proto.RegisterType((*TextItem)(nil), "std.TextItem")
	proto.RegisterType((*Labels)(nil), "std.Labels")
	proto.RegisterType((*Rect)(nil), "std.Rect")
	proto.RegisterType((*GeoPath)(nil), "std.GeoPath")
}

func init() { proto.RegisterFile("amp.std.proto", fileDescriptor_f19235ecf4b48ee7) }

var fileDescriptor_f19235ecf4b48ee7 = []byte{
	// 1052 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x55, 0xcd, 0x6e, 0xdb, 0x46,
	0x17, 0xd5, 0x50, 0x3f, 0x11, 0x47, 0x89, 0xac, 0x6f, 0xbe, 0x20, 0x25, 0x82, 0x96, 0x30, 0x84,
	0xa2, 0x30, 0x12, 0xc0, 0x95, 0x48, 0x6f, 0xbb, 0x90, 0xff, 0x6a, 0x27, 0x96, 0x2b, 0x8f, 0x84,
	0xb4, 0x5e, 0x19, 0x63, 0x71, 0x2c, 0x0f, 0x40, 0x91, 0x02, 0x39, 0x8e, 0x25, 0xaf, 0xfa, 0x08,
	0x7d, 0x8c, 0xa2, 0x05, 0xfa, 0x06, 0xd9, 0x77, 0xe9, 0x65, 0x96, 0xb5, 0xbc, 0xe9, 0x32, 0x4f,
	0x50, 0x14, 0xf7, 0x0e, 0x49, 0xa9, 0xdd, 0x74, 0x77, 0xcf, 0x39, 0xc3, 0x33, 0xf7, 0x9e, 0x99,
	0x91, 0xe8, 0x33, 0x31, 0x9d, 0x6d, 0xa7, 0x3a, 0xd8, 0x9e, 0x25, 0xb1, 0x8e, 0x59, 0x39, 0xd5,
	0xc1, 0x4b, 0x26, 0xa6, 0xb3, 0xaf, 0x81, 0x1f, 0xc7, 0x89, 0x34, 0x42, 0xfb, 0x03, 0xa1, 0xe5,
	0x11, 0x1f, 0xb2, 0xe7, 0xb4, 0x3a, 0x1c, 0x8b, 0x50, 0x3a, 0x64, 0x93, 0x6c, 0x11, 0x6e, 0x00,
	0xeb, 0xd0, 0xc6, 0x3b, 0x95, 0xde, 0x88, 0xd0, 0x68, 0xd6, 0x26, 0xd9, 0x6a, 0x7a, 0x4d, 0xf4,
	0x45, 0xa6, 0x1f, 0x07, 0x92, 0xaf, 0x2f, 0x61, 0x4d, 0x6a, 0x0d, 0xe6, 0x4e, 0x19, 0x4d, 0xac,
	0xc1, 0x1c, 0xf1, 0xc2, 0xa9, 0x64, 0x78, 0x81, 0xf8, 0xce, 0xa9, 0x66, 0xf8, 0x0e, 0xf0, 0xd9,
	0xdc, 0xa1, 0x06, 0x9f, 0xe1, 0xfa, 0xb3, 0x85, 0xd3, 0xc8, 0x30, 0xae, 0x3f, 0xbb, 0x73, 0x9e,
	0x66, 0xd8, 0xac, 0xbf, 0x75, 0x9e, 0x65, 0xf8, 0xb6, 0xfd, 0xab, 0x45, 0xed, 0xbe, 0xd0, 0x89,
	0x9a, 0xef, 0xcc, 0x77, 0x58, 0x8b, 0x96, 0xfb, 0x9d, 0x4e, 0x36, 0x03, 0x94, 0x86, 0xe9, 0x62,
	0xe7, 0xc8, 0x74, 0x0d, 0xe3, 0x65, 0x2d, 0x42, 0x69, 0x18, 0x3f, 0x6b, 0x12, 0x4a, 0x64, 0xba,
	0x9d, 0xac, 0x4d, 0x28, 0x0d, 0xd3, 0x75, 0x6a, 0x39, 0x63, 0x7c, 0xba, 0x9e, 0xf3, 0x24, 0x67,
	0x8c, 0x4f, 0xd7, 0x77, 0xea, 0x39, 0x63, 0x7c, 0xbc, 0x8e, 0x63, 0x67, 0x8c, 0x67, 0x7c, 0xbc,
	0x6e, 0x36, 0x30, 0x94, 0x86, 0xf1, 0xb2, 0x91, 0xa1, 0x34, 0x8c, 0x9f, 0x0d, 0x0d, 0x25, 0x32,
	0x7e, 0x27, 0x1b, 0x1b, 0x4a, 0xc3, 0x74, 0x9d, 0x66, 0xce, 0x18, 0x1f, 0xdf, 0x73, 0x36, 0x72,
	0xc6, 0xf8, 0xf8, 0xbe, 0xd3, 0xca, 0x19, 0xbf, 0xfd, 0xc1, 0xa2, 0x8d, 0x3d, 0x31, 0x95, 0x89,
	0x18, 0x6a, 0xa1, 0x25, 0xfb, 0x8a, 0xda, 0x83, 0x50, 0x8c, 0xe5, 0x54, 0x46, 0x1a, 0x53, 0x6b,
	0x78, 0x75, 0x3c, 0xdd, 0x11, 0x1f, 0xf2, 0x95, 0x04, 0xb7, 0x63, 0xa0, 0xf4, 0xf8, 0x1a, 0x73,
	0xb4, 0xb8, 0x01, 0xe0, 0x7f, 0x2e, 0x6e, 0x31, 0x49, 0x8b, 0x43, 0xc9, 0x5e, 0xd2, 0xfa, 0xbe,
	0x4a, 0xb5, 0x88, 0xc6, 0x12, 0xc3, 0xb3, 0x78, 0x81, 0x41, 0xeb, 0x85, 0x5a, 0xe9, 0x9b, 0x40,
	0x62, 0x8c, 0x16, 0x2f, 0x30, 0x63, 0xb4, 0xd2, 0x17, 0x69, 0x8a, 0x41, 0x59, 0x1c, 0x6b, 0xf6,
	0x39, 0xb5, 0x4f, 0xa5, 0x48, 0x06, 0xa1, 0x88, 0x24, 0xe6, 0x65, 0xf1, 0x15, 0x01, 0x6e, 0x87,
	0xb9, 0xd8, 0x30, 0x6e, 0x39, 0x86, 0xbe, 0x0e, 0xe3, 0xf7, 0x98, 0x96, 0xc5, 0xa1, 0x64, 0x0e,
	0x7d, 0x32, 0x50, 0x73, 0x19, 0xa6, 0x3f, 0x60, 0x1a, 0x55, 0x9e, 0xc3, 0x95, 0x72, 0xee, 0xfc,
	0x6f, 0x5d, 0x39, 0xc7, 0x9e, 0xe2, 0x40, 0x3a, 0xcf, 0x37, 0xc9, 0x96, 0xcd, 0xb1, 0x6e, 0xf7,
	0xe8, 0x33, 0x13, 0xdf, 0x77, 0x33, 0xad, 0xe2, 0x08, 0x9b, 0xec, 0xc7, 0xef, 0xe5, 0x70, 0x26,
	0x65, 0x80, 0x01, 0x5a, 0x7c, 0x45, 0x14, 0x16, 0xd6, 0x9a, 0xc5, 0x01, 0xb5, 0xdf, 0xa9, 0x74,
	0x90, 0xc8, 0x54, 0x6a, 0xf6, 0x25, 0xad, 0xf7, 0xd2, 0x54, 0xea, 0x91, 0x98, 0x14, 0xf1, 0xc3,
	0x03, 0x1d, 0x89, 0x09, 0x2f, 0x14, 0xb0, 0xe9, 0x25, 0x93, 0x34, 0xb7, 0x81, 0xba, 0xfd, 0x17,
	0xa1, 0xf5, 0x43, 0x15, 0xca, 0xe3, 0xe8, 0x2a, 0x2e, 0xf6, 0x21, 0xab, 0x7d, 0xe0, 0xc8, 0x8e,
	0xd3, 0x7d, 0x95, 0xe0, 0x57, 0x75, 0x6e, 0x00, 0x8c, 0xbb, 0xaf, 0x92, 0x53, 0x31, 0x95, 0x78,
	0xdd, 0x6d, 0x9e, 0x43, 0x08, 0xf4, 0x58, 0xcb, 0x29, 0x4a, 0x55, 0x94, 0x0a, 0xcc, 0x5e, 0xd0,
	0xda, 0xc1, 0x5c, 0x9f, 0xc8, 0x08, 0x0f, 0xae, 0xca, 0x33, 0xc4, 0x36, 0x69, 0x63, 0x2f, 0x8e,
	0xb4, 0x8c, 0xf4, 0x68, 0x31, 0x93, 0x78, 0xf1, 0x6d, 0xbe, 0x4e, 0x41, 0x3e, 0x7b, 0x89, 0x14,
	0x5a, 0x06, 0x3d, 0x8d, 0x87, 0x58, 0xe6, 0x2b, 0x82, 0xb9, 0x94, 0xf6, 0xe3, 0x40, 0x5d, 0x29,
	0x94, 0x1b, 0x28, 0xaf, 0x31, 0xd0, 0xd3, 0xee, 0x42, 0xcb, 0xa1, 0xba, 0x93, 0x78, 0xd3, 0xcb,
	0xbc, 0xc0, 0xed, 0x6f, 0x68, 0x7d, 0x24, 0xe7, 0x1a, 0x7a, 0x84, 0xf9, 0x77, 0xe3, 0x60, 0x91,
	0xcf, 0x0f, 0x35, 0xfb, 0x82, 0x56, 0x46, 0x62, 0x92, 0xe2, 0x98, 0x0d, 0xcf, 0xce, 0x63, 0x4d,
	0x39, 0xd2, 0xed, 0x53, 0x5a, 0x3b, 0x11, 0x97, 0x32, 0x4c, 0x21, 0xa8, 0x91, 0xd2, 0x61, 0x9e,
	0x9e, 0x01, 0xb0, 0xf5, 0xf0, 0xe6, 0x52, 0xa3, 0x60, 0x72, 0x2f, 0x30, 0x6c, 0x77, 0x24, 0xc3,
	0x19, 0x5e, 0x7c, 0x9b, 0x63, 0xdd, 0xfe, 0x8d, 0xd0, 0x0a, 0x97, 0x63, 0xcd, 0xb6, 0x68, 0xed,
	0x30, 0x4e, 0xa6, 0xc2, 0xbc, 0xa7, 0xa6, 0xd7, 0xc2, 0xf7, 0x34, 0x88, 0x55, 0xa4, 0x0d, 0xcf,
	0x33, 0x1d, 0x52, 0xed, 0x45, 0xe3, 0xeb, 0xd8, 0x1c, 0x51, 0x8d, 0x67, 0x88, 0x3d, 0xa5, 0x84,
	0xa3, 0x77, 0x8d, 0x13, 0x0e, 0xed, 0x7d, 0xaf, 0x02, 0x7d, 0x8d, 0xe9, 0x56, 0xb9, 0x01, 0xf0,
	0xed, 0x91, 0x54, 0x93, 0x6b, 0x8d, 0x4f, 0xa6, 0xca, 0x33, 0x04, 0xdf, 0x1e, 0x63, 0xce, 0x55,
	0x4e, 0x8e, 0x01, 0xbd, 0xc1, 0x58, 0xab, 0x9c, 0xbc, 0x01, 0xf4, 0x16, 0x7f, 0x54, 0xaa, 0x9c,
	0xbc, 0x6d, 0x3f, 0x10, 0xfa, 0xe4, 0x5b, 0x19, 0x0f, 0x84, 0xbe, 0x66, 0xaf, 0x69, 0x05, 0x0f,
	0xd0, 0x74, 0xfc, 0x19, 0x76, 0x9c, 0x69, 0xdb, 0x5c, 0x46, 0x81, 0x4c, 0x40, 0xe6, 0x95, 0xfc,
	0x48, 0x0f, 0xe6, 0x3a, 0xb9, 0x09, 0xe4, 0x49, 0x8c, 0xe9, 0x5a, 0x7c, 0x45, 0xac, 0xa9, 0x47,
	0x2a, 0xfb, 0x09, 0x58, 0x11, 0x6b, 0xe1, 0x34, 0xff, 0x3b, 0x1c, 0xa4, 0x53, 0x67, 0x63, 0xb3,
	0x0c, 0xe1, 0x18, 0xd4, 0x7e, 0x4d, 0xe9, 0xaa, 0x23, 0x66, 0xd3, 0x2a, 0xf2, 0xad, 0x12, 0xab,
	0xd3, 0x0a, 0xf4, 0xdb, 0x22, 0x50, 0x71, 0x15, 0x4d, 0x5a, 0xd6, 0xab, 0x1d, 0x6a, 0x17, 0x7f,
	0x53, 0xec, 0xff, 0x74, 0xa3, 0x00, 0x17, 0x87, 0x6a, 0x2e, 0x83, 0x56, 0x89, 0x31, 0xda, 0x5c,
	0x91, 0xbd, 0x1b, 0x1d, 0xb7, 0xc8, 0xab, 0x0b, 0xda, 0x58, 0xeb, 0x08, 0x96, 0xac, 0xc1, 0x8b,
	0xa1, 0x67, 0x3e, 0x5b, 0xe7, 0x8e, 0xfc, 0x16, 0x01, 0xff, 0x7f, 0xae, 0x1b, 0xb5, 0xac, 0x7f,
	0x93, 0x47, 0xfe, 0xa8, 0x55, 0xde, 0xed, 0xdf, 0x3f, 0xb8, 0xa5, 0x8f, 0x0f, 0x6e, 0xe9, 0xd3,
	0x83, 0x4b, 0x7e, 0x5c, 0xba, 0xe4, 0xe7, 0xa5, 0x4b, 0x7e, 0x5f, 0xba, 0xe4, 0x7e, 0xe9, 0x92,
	0x3f, 0x96, 0x2e, 0xf9, 0x73, 0xe9, 0x96, 0x3e, 0x2d, 0x5d, 0xf2, 0xd3, 0xa3, 0x5b, 0xba, 0x7f,
	0x74, 0x4b, 0x1f, 0x1f, 0xdd, 0xd2, 0x2f, 0xd6, 0x0b, 0x91, 0xe8, 0xed, 0xa9, 0x0c, 0x94, 0xd8,
	0x9e, 0x85, 0x42, 0x5f, 0xc5, 0xc9, 0x14, 0xe2, 0xbb, 0xac, 0xe1, 0x3f, 0xb9, 0xff, 0x77, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x6b, 0x9d, 0x80, 0xa4, 0xf3, 0x07, 0x00, 0x00,
}

func (x ScaleMode) String() string {
	s, ok := ScaleMode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PointFormat) String() string {
	s, ok := PointFormat_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x GeoPath_RenderType) String() string {
	s, ok := GeoPath_RenderType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *TRS) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TRS)
	if !ok {
		that2, ok := that.(TRS)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Scale != that1.Scale {
		return false
	}
	if this.VisualScale != that1.VisualScale {
		return false
	}
	if this.Px != that1.Px {
		return false
	}
	if this.Py != that1.Py {
		return false
	}
	if this.Pz != that1.Pz {
		return false
	}
	if this.Qx != that1.Qx {
		return false
	}
	if this.Qy != that1.Qy {
		return false
	}
	if this.Qz != that1.Qz {
		return false
	}
	if this.Qw != that1.Qw {
		return false
	}
	return true
}
func (this *Matrix4X4) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Matrix4X4)
	if !ok {
		that2, ok := that.(Matrix4X4)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.M00 != that1.M00 {
		return false
	}
	if this.M01 != that1.M01 {
		return false
	}
	if this.M02 != that1.M02 {
		return false
	}
	if this.M03 != that1.M03 {
		return false
	}
	if this.M10 != that1.M10 {
		return false
	}
	if this.M11 != that1.M11 {
		return false
	}
	if this.M12 != that1.M12 {
		return false
	}
	if this.M13 != that1.M13 {
		return false
	}
	if this.M20 != that1.M20 {
		return false
	}
	if this.M21 != that1.M21 {
		return false
	}
	if this.M22 != that1.M22 {
		return false
	}
	if this.M23 != that1.M23 {
		return false
	}
	if this.M30 != that1.M30 {
		return false
	}
	if this.M31 != that1.M31 {
		return false
	}
	if this.M32 != that1.M32 {
		return false
	}
	if this.M33 != that1.M33 {
		return false
	}
	return true
}
func (this *CameraState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CameraState)
	if !ok {
		that2, ok := that.(CameraState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Placement.Equal(that1.Placement) {
		return false
	}
	if this.Pitch != that1.Pitch {
		return false
	}
	if this.Yaw != that1.Yaw {
		return false
	}
	if this.Distance != that1.Distance {
		return false
	}
	if this.Altitude != that1.Altitude {
		return false
	}
	if this.Mass != that1.Mass {
		return false
	}
	if this.NearPlane != that1.NearPlane {
		return false
	}
	if this.FarPlane != that1.FarPlane {
		return false
	}
	if this.Fov != that1.Fov {
		return false
	}
	if this.PixelsX != that1.PixelsX {
		return false
	}
	if this.PixelsY != that1.PixelsY {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	return true
}
func (this *CameraOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CameraOptions)
	if !ok {
		that2, ok := that.(CameraOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MoveSpeed != that1.MoveSpeed {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	return true
}
func (this *VisPreset) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VisPreset)
	if !ok {
		that2, ok := that.(VisPreset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AssetTag.Equal(that1.AssetTag) {
		return false
	}
	if this.Args != that1.Args {
		return false
	}
	return true
}
func (this *FileInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FileInfo)
	if !ok {
		that2, ok := that.(FileInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	if this.IsDir != that1.IsDir {
		return false
	}
	if this.DirName != that1.DirName {
		return false
	}
	if this.ItemName != that1.ItemName {
		return false
	}
	if this.ExtLen != that1.ExtLen {
		return false
	}
	if this.ContentType != that1.ContentType {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	if this.ModifiedAt != that1.ModifiedAt {
		return false
	}
	if this.ByteSize != that1.ByteSize {
		return false
	}
	return true
}
func (this *TextItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TextItem)
	if !ok {
		that2, ok := that.(TextItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Body != that1.Body {
		return false
	}
	if !this.Tags.Equal(that1.Tags) {
		return false
	}
	return true
}
func (this *Labels) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Labels)
	if !ok {
		that2, ok := that.(Labels)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Subtitle != that1.Subtitle {
		return false
	}
	if this.Help != that1.Help {
		return false
	}
	return true
}
func (this *Rect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Rect)
	if !ok {
		that2, ok := that.(Rect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Format != that1.Format {
		return false
	}
	if this.Anchor != that1.Anchor {
		return false
	}
	if this.R != that1.R {
		return false
	}
	if this.Width != that1.Width {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if this.I != that1.I {
		return false
	}
	if this.J != that1.J {
		return false
	}
	if this.K != that1.K {
		return false
	}
	return true
}
func (this *GeoPath) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GeoPath)
	if !ok {
		that2, ok := that.(GeoPath)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.ExtrudeLo != that1.ExtrudeLo {
		return false
	}
	if this.ExtrudeHi != that1.ExtrudeHi {
		return false
	}
	if this.Format != that1.Format {
		return false
	}
	if len(this.Points) != len(that1.Points) {
		return false
	}
	for i := range this.Points {
		if this.Points[i] != that1.Points[i] {
			return false
		}
	}
	return true
}
func (this *TRS) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&std.TRS{")
	s = append(s, "Scale: "+fmt.Sprintf("%#v", this.Scale)+",\n")
	s = append(s, "VisualScale: "+fmt.Sprintf("%#v", this.VisualScale)+",\n")
	s = append(s, "Px: "+fmt.Sprintf("%#v", this.Px)+",\n")
	s = append(s, "Py: "+fmt.Sprintf("%#v", this.Py)+",\n")
	s = append(s, "Pz: "+fmt.Sprintf("%#v", this.Pz)+",\n")
	s = append(s, "Qx: "+fmt.Sprintf("%#v", this.Qx)+",\n")
	s = append(s, "Qy: "+fmt.Sprintf("%#v", this.Qy)+",\n")
	s = append(s, "Qz: "+fmt.Sprintf("%#v", this.Qz)+",\n")
	s = append(s, "Qw: "+fmt.Sprintf("%#v", this.Qw)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Matrix4X4) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&std.Matrix4X4{")
	s = append(s, "M00: "+fmt.Sprintf("%#v", this.M00)+",\n")
	s = append(s, "M01: "+fmt.Sprintf("%#v", this.M01)+",\n")
	s = append(s, "M02: "+fmt.Sprintf("%#v", this.M02)+",\n")
	s = append(s, "M03: "+fmt.Sprintf("%#v", this.M03)+",\n")
	s = append(s, "M10: "+fmt.Sprintf("%#v", this.M10)+",\n")
	s = append(s, "M11: "+fmt.Sprintf("%#v", this.M11)+",\n")
	s = append(s, "M12: "+fmt.Sprintf("%#v", this.M12)+",\n")
	s = append(s, "M13: "+fmt.Sprintf("%#v", this.M13)+",\n")
	s = append(s, "M20: "+fmt.Sprintf("%#v", this.M20)+",\n")
	s = append(s, "M21: "+fmt.Sprintf("%#v", this.M21)+",\n")
	s = append(s, "M22: "+fmt.Sprintf("%#v", this.M22)+",\n")
	s = append(s, "M23: "+fmt.Sprintf("%#v", this.M23)+",\n")
	s = append(s, "M30: "+fmt.Sprintf("%#v", this.M30)+",\n")
	s = append(s, "M31: "+fmt.Sprintf("%#v", this.M31)+",\n")
	s = append(s, "M32: "+fmt.Sprintf("%#v", this.M32)+",\n")
	s = append(s, "M33: "+fmt.Sprintf("%#v", this.M33)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CameraState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&std.CameraState{")
	if this.Placement != nil {
		s = append(s, "Placement: "+fmt.Sprintf("%#v", this.Placement)+",\n")
	}
	s = append(s, "Pitch: "+fmt.Sprintf("%#v", this.Pitch)+",\n")
	s = append(s, "Yaw: "+fmt.Sprintf("%#v", this.Yaw)+",\n")
	s = append(s, "Distance: "+fmt.Sprintf("%#v", this.Distance)+",\n")
	s = append(s, "Altitude: "+fmt.Sprintf("%#v", this.Altitude)+",\n")
	s = append(s, "Mass: "+fmt.Sprintf("%#v", this.Mass)+",\n")
	s = append(s, "NearPlane: "+fmt.Sprintf("%#v", this.NearPlane)+",\n")
	s = append(s, "FarPlane: "+fmt.Sprintf("%#v", this.FarPlane)+",\n")
	s = append(s, "Fov: "+fmt.Sprintf("%#v", this.Fov)+",\n")
	s = append(s, "PixelsX: "+fmt.Sprintf("%#v", this.PixelsX)+",\n")
	s = append(s, "PixelsY: "+fmt.Sprintf("%#v", this.PixelsY)+",\n")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CameraOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&std.CameraOptions{")
	s = append(s, "MoveSpeed: "+fmt.Sprintf("%#v", this.MoveSpeed)+",\n")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VisPreset) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&std.VisPreset{")
	if this.AssetTag != nil {
		s = append(s, "AssetTag: "+fmt.Sprintf("%#v", this.AssetTag)+",\n")
	}
	s = append(s, "Args: "+fmt.Sprintf("%#v", this.Args)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FileInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&std.FileInfo{")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	s = append(s, "IsDir: "+fmt.Sprintf("%#v", this.IsDir)+",\n")
	s = append(s, "DirName: "+fmt.Sprintf("%#v", this.DirName)+",\n")
	s = append(s, "ItemName: "+fmt.Sprintf("%#v", this.ItemName)+",\n")
	s = append(s, "ExtLen: "+fmt.Sprintf("%#v", this.ExtLen)+",\n")
	s = append(s, "ContentType: "+fmt.Sprintf("%#v", this.ContentType)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "ModifiedAt: "+fmt.Sprintf("%#v", this.ModifiedAt)+",\n")
	s = append(s, "ByteSize: "+fmt.Sprintf("%#v", this.ByteSize)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TextItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&std.TextItem{")
	s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	if this.Tags != nil {
		s = append(s, "Tags: "+fmt.Sprintf("%#v", this.Tags)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Labels) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&std.Labels{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Subtitle: "+fmt.Sprintf("%#v", this.Subtitle)+",\n")
	s = append(s, "Help: "+fmt.Sprintf("%#v", this.Help)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Rect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&std.Rect{")
	s = append(s, "Format: "+fmt.Sprintf("%#v", this.Format)+",\n")
	s = append(s, "Anchor: "+fmt.Sprintf("%#v", this.Anchor)+",\n")
	s = append(s, "R: "+fmt.Sprintf("%#v", this.R)+",\n")
	s = append(s, "Width: "+fmt.Sprintf("%#v", this.Width)+",\n")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "I: "+fmt.Sprintf("%#v", this.I)+",\n")
	s = append(s, "J: "+fmt.Sprintf("%#v", this.J)+",\n")
	s = append(s, "K: "+fmt.Sprintf("%#v", this.K)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GeoPath) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&std.GeoPath{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "ExtrudeLo: "+fmt.Sprintf("%#v", this.ExtrudeLo)+",\n")
	s = append(s, "ExtrudeHi: "+fmt.Sprintf("%#v", this.ExtrudeHi)+",\n")
	s = append(s, "Format: "+fmt.Sprintf("%#v", this.Format)+",\n")
	s = append(s, "Points: "+fmt.Sprintf("%#v", this.Points)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAmpStd(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TRS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TRS) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TRS) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Qw != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Qw))))
		i--
		dAtA[i] = 0x69
	}
	if m.Qz != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Qz))))
		i--
		dAtA[i] = 0x61
	}
	if m.Qy != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Qy))))
		i--
		dAtA[i] = 0x59
	}
	if m.Qx != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Qx))))
		i--
		dAtA[i] = 0x51
	}
	if m.Pz != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Pz))))
		i--
		dAtA[i] = 0x29
	}
	if m.Py != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Py))))
		i--
		dAtA[i] = 0x21
	}
	if m.Px != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Px))))
		i--
		dAtA[i] = 0x19
	}
	if m.VisualScale != 0 {
		i = encodeVarintAmpStd(dAtA, i, uint64(m.VisualScale))
		i--
		dAtA[i] = 0x10
	}
	if m.Scale != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Scale))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Matrix4X4) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Matrix4X4) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Matrix4X4) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.M33 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.M33))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x81
	}
	if m.M32 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.M32))))
		i--
		dAtA[i] = 0x79
	}
	if m.M31 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.M31))))
		i--
		dAtA[i] = 0x71
	}
	if m.M30 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.M30))))
		i--
		dAtA[i] = 0x69
	}
	if m.M23 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.M23))))
		i--
		dAtA[i] = 0x61
	}
	if m.M22 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.M22))))
		i--
		dAtA[i] = 0x59
	}
	if m.M21 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.M21))))
		i--
		dAtA[i] = 0x51
	}
	if m.M20 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.M20))))
		i--
		dAtA[i] = 0x49
	}
	if m.M13 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.M13))))
		i--
		dAtA[i] = 0x41
	}
	if m.M12 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.M12))))
		i--
		dAtA[i] = 0x39
	}
	if m.M11 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.M11))))
		i--
		dAtA[i] = 0x31
	}
	if m.M10 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.M10))))
		i--
		dAtA[i] = 0x29
	}
	if m.M03 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.M03))))
		i--
		dAtA[i] = 0x21
	}
	if m.M02 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.M02))))
		i--
		dAtA[i] = 0x19
	}
	if m.M01 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.M01))))
		i--
		dAtA[i] = 0x11
	}
	if m.M00 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.M00))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *CameraState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CameraState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CameraState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mode) > 0 {
		i -= len(m.Mode)
		copy(dAtA[i:], m.Mode)
		i = encodeVarintAmpStd(dAtA, i, uint64(len(m.Mode)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.PixelsY != 0 {
		i = encodeVarintAmpStd(dAtA, i, uint64(m.PixelsY))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.PixelsX != 0 {
		i = encodeVarintAmpStd(dAtA, i, uint64(m.PixelsX))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Fov != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Fov))))
		i--
		dAtA[i] = 0x6d
	}
	if m.FarPlane != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FarPlane))))
		i--
		dAtA[i] = 0x5d
	}
	if m.NearPlane != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.NearPlane))))
		i--
		dAtA[i] = 0x55
	}
	if m.Mass != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Mass))))
		i--
		dAtA[i] = 0x4d
	}
	if m.Altitude != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Altitude))))
		i--
		dAtA[i] = 0x35
	}
	if m.Distance != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Distance))))
		i--
		dAtA[i] = 0x2d
	}
	if m.Yaw != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Yaw))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Pitch != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Pitch))))
		i--
		dAtA[i] = 0x15
	}
	if m.Placement != nil {
		{
			size, err := m.Placement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAmpStd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CameraOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CameraOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CameraOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mode) > 0 {
		i -= len(m.Mode)
		copy(dAtA[i:], m.Mode)
		i = encodeVarintAmpStd(dAtA, i, uint64(len(m.Mode)))
		i--
		dAtA[i] = 0x12
	}
	if m.MoveSpeed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MoveSpeed))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *VisPreset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VisPreset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VisPreset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		i -= len(m.Args)
		copy(dAtA[i:], m.Args)
		i = encodeVarintAmpStd(dAtA, i, uint64(len(m.Args)))
		i--
		dAtA[i] = 0x12
	}
	if m.AssetTag != nil {
		{
			size, err := m.AssetTag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAmpStd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FileInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ByteSize != 0 {
		i = encodeVarintAmpStd(dAtA, i, uint64(m.ByteSize))
		i--
		dAtA[i] = 0x70
	}
	if m.ModifiedAt != 0 {
		i = encodeVarintAmpStd(dAtA, i, uint64(m.ModifiedAt))
		i--
		dAtA[i] = 0x58
	}
	if m.CreatedAt != 0 {
		i = encodeVarintAmpStd(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x50
	}
	if len(m.ContentType) > 0 {
		i -= len(m.ContentType)
		copy(dAtA[i:], m.ContentType)
		i = encodeVarintAmpStd(dAtA, i, uint64(len(m.ContentType)))
		i--
		dAtA[i] = 0x42
	}
	if m.ExtLen != 0 {
		i = encodeVarintAmpStd(dAtA, i, uint64(m.ExtLen))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ItemName) > 0 {
		i -= len(m.ItemName)
		copy(dAtA[i:], m.ItemName)
		i = encodeVarintAmpStd(dAtA, i, uint64(len(m.ItemName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DirName) > 0 {
		i -= len(m.DirName)
		copy(dAtA[i:], m.DirName)
		i = encodeVarintAmpStd(dAtA, i, uint64(len(m.DirName)))
		i--
		dAtA[i] = 0x22
	}
	if m.IsDir {
		i--
		if m.IsDir {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Mode) > 0 {
		i -= len(m.Mode)
		copy(dAtA[i:], m.Mode)
		i = encodeVarintAmpStd(dAtA, i, uint64(len(m.Mode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TextItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tags != nil {
		{
			size, err := m.Tags.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAmpStd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintAmpStd(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Labels) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Labels) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Labels) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Help) > 0 {
		i -= len(m.Help)
		copy(dAtA[i:], m.Help)
		i = encodeVarintAmpStd(dAtA, i, uint64(len(m.Help)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Subtitle) > 0 {
		i -= len(m.Subtitle)
		copy(dAtA[i:], m.Subtitle)
		i = encodeVarintAmpStd(dAtA, i, uint64(len(m.Subtitle)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintAmpStd(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.K != 0 {
		i = encodeVarintAmpStd(dAtA, i, uint64(m.K))
		i--
		dAtA[i] = 0x60
	}
	if m.J != 0 {
		i = encodeVarintAmpStd(dAtA, i, uint64(m.J))
		i--
		dAtA[i] = 0x58
	}
	if m.I != 0 {
		i = encodeVarintAmpStd(dAtA, i, uint64(m.I))
		i--
		dAtA[i] = 0x50
	}
	if m.Height != 0 {
		i = encodeVarintAmpStd(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x48
	}
	if m.Width != 0 {
		i = encodeVarintAmpStd(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x40
	}
	if m.R != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.R))
		i--
		dAtA[i] = 0x19
	}
	if m.Anchor != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Anchor))
		i--
		dAtA[i] = 0x11
	}
	if m.Format != 0 {
		i = encodeVarintAmpStd(dAtA, i, uint64(m.Format))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GeoPath) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeoPath) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeoPath) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Points) > 0 {
		for iNdEx := len(m.Points) - 1; iNdEx >= 0; iNdEx-- {
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Points[iNdEx]))
		}
		i = encodeVarintAmpStd(dAtA, i, uint64(len(m.Points)*8))
		i--
		dAtA[i] = 0x7a
	}
	if m.Format != 0 {
		i = encodeVarintAmpStd(dAtA, i, uint64(m.Format))
		i--
		dAtA[i] = 0x70
	}
	if m.ExtrudeHi != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ExtrudeHi))))
		i--
		dAtA[i] = 0x2d
	}
	if m.ExtrudeLo != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ExtrudeLo))))
		i--
		dAtA[i] = 0x25
	}
	if m.Type != 0 {
		i = encodeVarintAmpStd(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAmpStd(dAtA []byte, offset int, v uint64) int {
	offset -= sovAmpStd(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TRS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scale != 0 {
		n += 9
	}
	if m.VisualScale != 0 {
		n += 1 + sovAmpStd(uint64(m.VisualScale))
	}
	if m.Px != 0 {
		n += 9
	}
	if m.Py != 0 {
		n += 9
	}
	if m.Pz != 0 {
		n += 9
	}
	if m.Qx != 0 {
		n += 9
	}
	if m.Qy != 0 {
		n += 9
	}
	if m.Qz != 0 {
		n += 9
	}
	if m.Qw != 0 {
		n += 9
	}
	return n
}

func (m *Matrix4X4) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.M00 != 0 {
		n += 9
	}
	if m.M01 != 0 {
		n += 9
	}
	if m.M02 != 0 {
		n += 9
	}
	if m.M03 != 0 {
		n += 9
	}
	if m.M10 != 0 {
		n += 9
	}
	if m.M11 != 0 {
		n += 9
	}
	if m.M12 != 0 {
		n += 9
	}
	if m.M13 != 0 {
		n += 9
	}
	if m.M20 != 0 {
		n += 9
	}
	if m.M21 != 0 {
		n += 9
	}
	if m.M22 != 0 {
		n += 9
	}
	if m.M23 != 0 {
		n += 9
	}
	if m.M30 != 0 {
		n += 9
	}
	if m.M31 != 0 {
		n += 9
	}
	if m.M32 != 0 {
		n += 9
	}
	if m.M33 != 0 {
		n += 10
	}
	return n
}

func (m *CameraState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Placement != nil {
		l = m.Placement.Size()
		n += 1 + l + sovAmpStd(uint64(l))
	}
	if m.Pitch != 0 {
		n += 5
	}
	if m.Yaw != 0 {
		n += 5
	}
	if m.Distance != 0 {
		n += 5
	}
	if m.Altitude != 0 {
		n += 5
	}
	if m.Mass != 0 {
		n += 5
	}
	if m.NearPlane != 0 {
		n += 5
	}
	if m.FarPlane != 0 {
		n += 5
	}
	if m.Fov != 0 {
		n += 5
	}
	if m.PixelsX != 0 {
		n += 2 + sovAmpStd(uint64(m.PixelsX))
	}
	if m.PixelsY != 0 {
		n += 2 + sovAmpStd(uint64(m.PixelsY))
	}
	l = len(m.Mode)
	if l > 0 {
		n += 2 + l + sovAmpStd(uint64(l))
	}
	return n
}

func (m *CameraOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MoveSpeed != 0 {
		n += 5
	}
	l = len(m.Mode)
	if l > 0 {
		n += 1 + l + sovAmpStd(uint64(l))
	}
	return n
}

func (m *VisPreset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetTag != nil {
		l = m.AssetTag.Size()
		n += 1 + l + sovAmpStd(uint64(l))
	}
	l = len(m.Args)
	if l > 0 {
		n += 1 + l + sovAmpStd(uint64(l))
	}
	return n
}

func (m *FileInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Mode)
	if l > 0 {
		n += 1 + l + sovAmpStd(uint64(l))
	}
	if m.IsDir {
		n += 2
	}
	l = len(m.DirName)
	if l > 0 {
		n += 1 + l + sovAmpStd(uint64(l))
	}
	l = len(m.ItemName)
	if l > 0 {
		n += 1 + l + sovAmpStd(uint64(l))
	}
	if m.ExtLen != 0 {
		n += 1 + sovAmpStd(uint64(m.ExtLen))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovAmpStd(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovAmpStd(uint64(m.CreatedAt))
	}
	if m.ModifiedAt != 0 {
		n += 1 + sovAmpStd(uint64(m.ModifiedAt))
	}
	if m.ByteSize != 0 {
		n += 1 + sovAmpStd(uint64(m.ByteSize))
	}
	return n
}

func (m *TextItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovAmpStd(uint64(l))
	}
	if m.Tags != nil {
		l = m.Tags.Size()
		n += 1 + l + sovAmpStd(uint64(l))
	}
	return n
}

func (m *Labels) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAmpStd(uint64(l))
	}
	l = len(m.Subtitle)
	if l > 0 {
		n += 1 + l + sovAmpStd(uint64(l))
	}
	l = len(m.Help)
	if l > 0 {
		n += 1 + l + sovAmpStd(uint64(l))
	}
	return n
}

func (m *Rect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Format != 0 {
		n += 1 + sovAmpStd(uint64(m.Format))
	}
	if m.Anchor != 0 {
		n += 9
	}
	if m.R != 0 {
		n += 9
	}
	if m.Width != 0 {
		n += 1 + sovAmpStd(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovAmpStd(uint64(m.Height))
	}
	if m.I != 0 {
		n += 1 + sovAmpStd(uint64(m.I))
	}
	if m.J != 0 {
		n += 1 + sovAmpStd(uint64(m.J))
	}
	if m.K != 0 {
		n += 1 + sovAmpStd(uint64(m.K))
	}
	return n
}

func (m *GeoPath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovAmpStd(uint64(m.Type))
	}
	if m.ExtrudeLo != 0 {
		n += 5
	}
	if m.ExtrudeHi != 0 {
		n += 5
	}
	if m.Format != 0 {
		n += 1 + sovAmpStd(uint64(m.Format))
	}
	if len(m.Points) > 0 {
		n += 1 + sovAmpStd(uint64(len(m.Points)*8)) + len(m.Points)*8
	}
	return n
}

func sovAmpStd(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAmpStd(x uint64) (n int) {
	return sovAmpStd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TRS) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TRS{`,
		`Scale:` + fmt.Sprintf("%v", this.Scale) + `,`,
		`VisualScale:` + fmt.Sprintf("%v", this.VisualScale) + `,`,
		`Px:` + fmt.Sprintf("%v", this.Px) + `,`,
		`Py:` + fmt.Sprintf("%v", this.Py) + `,`,
		`Pz:` + fmt.Sprintf("%v", this.Pz) + `,`,
		`Qx:` + fmt.Sprintf("%v", this.Qx) + `,`,
		`Qy:` + fmt.Sprintf("%v", this.Qy) + `,`,
		`Qz:` + fmt.Sprintf("%v", this.Qz) + `,`,
		`Qw:` + fmt.Sprintf("%v", this.Qw) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Matrix4X4) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Matrix4X4{`,
		`M00:` + fmt.Sprintf("%v", this.M00) + `,`,
		`M01:` + fmt.Sprintf("%v", this.M01) + `,`,
		`M02:` + fmt.Sprintf("%v", this.M02) + `,`,
		`M03:` + fmt.Sprintf("%v", this.M03) + `,`,
		`M10:` + fmt.Sprintf("%v", this.M10) + `,`,
		`M11:` + fmt.Sprintf("%v", this.M11) + `,`,
		`M12:` + fmt.Sprintf("%v", this.M12) + `,`,
		`M13:` + fmt.Sprintf("%v", this.M13) + `,`,
		`M20:` + fmt.Sprintf("%v", this.M20) + `,`,
		`M21:` + fmt.Sprintf("%v", this.M21) + `,`,
		`M22:` + fmt.Sprintf("%v", this.M22) + `,`,
		`M23:` + fmt.Sprintf("%v", this.M23) + `,`,
		`M30:` + fmt.Sprintf("%v", this.M30) + `,`,
		`M31:` + fmt.Sprintf("%v", this.M31) + `,`,
		`M32:` + fmt.Sprintf("%v", this.M32) + `,`,
		`M33:` + fmt.Sprintf("%v", this.M33) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CameraState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CameraState{`,
		`Placement:` + strings.Replace(this.Placement.String(), "TRS", "TRS", 1) + `,`,
		`Pitch:` + fmt.Sprintf("%v", this.Pitch) + `,`,
		`Yaw:` + fmt.Sprintf("%v", this.Yaw) + `,`,
		`Distance:` + fmt.Sprintf("%v", this.Distance) + `,`,
		`Altitude:` + fmt.Sprintf("%v", this.Altitude) + `,`,
		`Mass:` + fmt.Sprintf("%v", this.Mass) + `,`,
		`NearPlane:` + fmt.Sprintf("%v", this.NearPlane) + `,`,
		`FarPlane:` + fmt.Sprintf("%v", this.FarPlane) + `,`,
		`Fov:` + fmt.Sprintf("%v", this.Fov) + `,`,
		`PixelsX:` + fmt.Sprintf("%v", this.PixelsX) + `,`,
		`PixelsY:` + fmt.Sprintf("%v", this.PixelsY) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CameraOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CameraOptions{`,
		`MoveSpeed:` + fmt.Sprintf("%v", this.MoveSpeed) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VisPreset) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VisPreset{`,
		`AssetTag:` + strings.Replace(fmt.Sprintf("%v", this.AssetTag), "Tag", "amp.Tag", 1) + `,`,
		`Args:` + fmt.Sprintf("%v", this.Args) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FileInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FileInfo{`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`IsDir:` + fmt.Sprintf("%v", this.IsDir) + `,`,
		`DirName:` + fmt.Sprintf("%v", this.DirName) + `,`,
		`ItemName:` + fmt.Sprintf("%v", this.ItemName) + `,`,
		`ExtLen:` + fmt.Sprintf("%v", this.ExtLen) + `,`,
		`ContentType:` + fmt.Sprintf("%v", this.ContentType) + `,`,
		`CreatedAt:` + fmt.Sprintf("%v", this.CreatedAt) + `,`,
		`ModifiedAt:` + fmt.Sprintf("%v", this.ModifiedAt) + `,`,
		`ByteSize:` + fmt.Sprintf("%v", this.ByteSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TextItem{`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`Tags:` + strings.Replace(fmt.Sprintf("%v", this.Tags), "Tags", "amp.Tags", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Labels) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Labels{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Subtitle:` + fmt.Sprintf("%v", this.Subtitle) + `,`,
		`Help:` + fmt.Sprintf("%v", this.Help) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Rect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Rect{`,
		`Format:` + fmt.Sprintf("%v", this.Format) + `,`,
		`Anchor:` + fmt.Sprintf("%v", this.Anchor) + `,`,
		`R:` + fmt.Sprintf("%v", this.R) + `,`,
		`Width:` + fmt.Sprintf("%v", this.Width) + `,`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`I:` + fmt.Sprintf("%v", this.I) + `,`,
		`J:` + fmt.Sprintf("%v", this.J) + `,`,
		`K:` + fmt.Sprintf("%v", this.K) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GeoPath) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GeoPath{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ExtrudeLo:` + fmt.Sprintf("%v", this.ExtrudeLo) + `,`,
		`ExtrudeHi:` + fmt.Sprintf("%v", this.ExtrudeHi) + `,`,
		`Format:` + fmt.Sprintf("%v", this.Format) + `,`,
		`Points:` + fmt.Sprintf("%v", this.Points) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAmpStd(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TRS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmpStd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TRS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TRS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scale", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Scale = float64(math.Float64frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisualScale", wireType)
			}
			m.VisualScale = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VisualScale |= ScaleMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Px", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Px = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Py", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Py = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pz", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Pz = float64(math.Float64frombits(v))
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qx", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Qx = float64(math.Float64frombits(v))
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qy", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Qy = float64(math.Float64frombits(v))
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qz", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Qz = float64(math.Float64frombits(v))
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qw", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Qw = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipAmpStd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmpStd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Matrix4X4) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmpStd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Matrix4x4: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Matrix4x4: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field M00", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.M00 = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field M01", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.M01 = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field M02", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.M02 = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field M03", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.M03 = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field M10", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.M10 = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field M11", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.M11 = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field M12", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.M12 = float64(math.Float64frombits(v))
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field M13", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.M13 = float64(math.Float64frombits(v))
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field M20", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.M20 = float64(math.Float64frombits(v))
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field M21", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.M21 = float64(math.Float64frombits(v))
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field M22", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.M22 = float64(math.Float64frombits(v))
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field M23", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.M23 = float64(math.Float64frombits(v))
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field M30", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.M30 = float64(math.Float64frombits(v))
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field M31", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.M31 = float64(math.Float64frombits(v))
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field M32", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.M32 = float64(math.Float64frombits(v))
		case 16:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field M33", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.M33 = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipAmpStd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmpStd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CameraState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmpStd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CameraState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CameraState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmpStd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmpStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Placement == nil {
				m.Placement = &TRS{}
			}
			if err := m.Placement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pitch", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Pitch = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yaw", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Yaw = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distance", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Distance = float32(math.Float32frombits(v))
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Altitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Altitude = float32(math.Float32frombits(v))
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mass", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Mass = float32(math.Float32frombits(v))
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NearPlane", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.NearPlane = float32(math.Float32frombits(v))
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarPlane", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FarPlane = float32(math.Float32frombits(v))
		case 13:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fov", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Fov = float32(math.Float32frombits(v))
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PixelsX", wireType)
			}
			m.PixelsX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PixelsX |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PixelsY", wireType)
			}
			m.PixelsY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PixelsY |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmpStd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmpStd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmpStd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CameraOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmpStd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CameraOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CameraOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoveSpeed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MoveSpeed = float32(math.Float32frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmpStd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmpStd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmpStd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VisPreset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmpStd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VisPreset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VisPreset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetTag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmpStd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmpStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AssetTag == nil {
				m.AssetTag = &amp.Tag{}
			}
			if err := m.AssetTag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmpStd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmpStd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmpStd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmpStd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmpStd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDir", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDir = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmpStd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DirName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmpStd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtLen", wireType)
			}
			m.ExtLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtLen |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmpStd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedAt", wireType)
			}
			m.ModifiedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModifiedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteSize", wireType)
			}
			m.ByteSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ByteSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAmpStd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmpStd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmpStd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmpStd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmpStd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmpStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = &amp.Tags{}
			}
			if err := m.Tags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmpStd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmpStd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Labels) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmpStd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Labels: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Labels: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmpStd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmpStd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subtitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Help", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmpStd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmpStd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Help = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmpStd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmpStd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmpStd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			m.Format = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Format |= PointFormat(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Anchor", wireType)
			}
			m.Anchor = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Anchor = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
			}
			m.R = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.R = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I", wireType)
			}
			m.I = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.I |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field J", wireType)
			}
			m.J = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.J |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field K", wireType)
			}
			m.K = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.K |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAmpStd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmpStd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeoPath) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmpStd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeoPath: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeoPath: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= GeoPath_RenderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtrudeLo", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ExtrudeLo = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtrudeHi", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ExtrudeHi = float32(math.Float32frombits(v))
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			m.Format = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Format |= PointFormat(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				m.Points = append(m.Points, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAmpStd
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAmpStd
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAmpStd
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Points) == 0 {
					m.Points = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					m.Points = append(m.Points, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAmpStd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmpStd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAmpStd(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAmpStd
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAmpStd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAmpStd
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAmpStd
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAmpStd
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAmpStd        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAmpStd          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAmpStd = fmt.Errorf("proto: unexpected end of group")
)
