syntax = "proto3";
package std;

option csharp_namespace = "art.media.platform.std";
//option go_package = "github.com/art-media-platform/amp.SDK/amp/std";

import "amp/amp.core.proto";


// Specifies how scale dynamically changes based on observer position.
enum ScaleMode {
    ScaleMode_Fixed = 0;
    ScaleMode_Auto  = 1;
}


// TRS (translate rotate scale) IEEE 1207
// General purpose placement time, space, orientation, and/or geo-position.
message TRS {

    // spatial scale; if 0, scale is 1.0
    double              Scale = 1;

    // Specifies how scale dynamically changes based on observer position.
    // DEPRECATED: HUD dynamically chooses pip size (min and max)
    ScaleMode           VisualScale = 2;

    // spatial position
    double              Px = 3;
    double              Py = 4;
    double              Pz = 5;

    // spatial rotation; if all values 0, Quaternion is unit identity
    double              Qx = 10;
    double              Qy = 11;
    double              Qz = 12;
    double              Qw = 13;

}

message Matrix4x4 {

    // 16 doubles in row-major order
    double M00 = 1;
    double M01 = 2;
    double M02 = 3;
    double M03 = 4;

    double M10 = 5;
    double M11 = 6;
    double M12 = 7;
    double M13 = 8;

    double M20 = 9;
    double M21 = 10;
    double M22 = 11;
    double M23 = 12;

    double M30 = 13;
    double M31 = 14;
    double M32 = 15;
    double M33 = 16;

}

// General purpose Camera state
message CameraState {
    TRS    Placement = 1;
    float  Pitch     = 2; // degrees
    float  Yaw       = 3; // degrees
    float  Distance  = 5; // optional distance to anchor
    float  Altitude  = 6; // optional altitude above the surface
    float  Mass      = 9; // optional mass (inertia) of camera body


    float  NearPlane = 10; // optional near plane distance
    float  FarPlane  = 11; // optional far plane distance
    float  Fov       = 13; // field of view in degrees; 0 denotes orthographic camera
    int32  PixelsX   = 16; // viewport width in pixels
    int32  PixelsY   = 17; // viewport height in pixels

    string Mode      = 20; // optional camera mode description
}

message CameraOptions {
    float  MoveSpeed = 1; // movement speed multiplier
    string Mode      = 2; // camera mode description
}

message VisPreset {
    amp.Tag AssetTag = 1; // asset tag to apply the preset to
    string  Args     = 2;
}

// FileInfo a general-purpose file system meta info block.
message FileInfo {
    string Mode        = 1; // unix file mode label
    bool   IsDir       = 2; // true if item is a directory

    string DirName     = 4; // prepended to FileName forms full path
    string ItemName    = 5; // file/dir item name
    int32  ExtLen      = 6; // length of the file extension (0 if none)
    string ContentType = 8; // MIME type of the file (e.g. "image/png", "text/html", etc.);

    int64  CreatedAt   = 10; // UTC << 16
    int64  ModifiedAt  = 11; // UTC << 16
    int64  ByteSize    = 14; // data fork byte length
}


// Multi-purpose, future-proof text element / label / item
message TextItem {
    string   Body  = 1; // plain-text body as applicable
    amp.Tags Tags  = 4;
}



message Labels {
    string   Title     = 1;
    string   Subtitle  = 2;
    string   Help      = 3;
}

// General purpose lightweight set of geo tiles in the shape of a rectangle - composed rectangle given a center and width/height.
// The units are typically mid H3 resolution with rectangular dimensions in units of font glyph size.
message Rect {

    PointFormat Format = 1; // specifies the type and format of Coords
    fixed64     Anchor = 2; // S2 or H3 tile index; also implies visual
    fixed64     R      = 3; // mm altitude from globe center or UTC64

    int32       Width  = 8; // mm
    int32       Height = 9; // mm

    int32       I = 10; // center offset
    int32       J = 11; // center offset
    int32       K = 12; // center offset
}




// General purpose polygonal path of geo tiles.
message GeoPath {

    enum RenderType {
        Point = 0;
        Path  = 1;
        Ring  = 2;
    }

    RenderType Type      = 1;
    float      ExtrudeLo = 4;  // If non-zero, extrude the path to this height
    float      ExtrudeHi = 5;  // If non-zero, extrude the path to this height

    PointFormat      Format = 14; // specifies the type and format of Coords
    repeated fixed64 Points = 15; // tile indices interleaved with associated UTC64 or Rmm based on Format.

}


enum PointFormat {
    PointFormat_S2  = 0; // (S2)      (1) uint64: lat,lng, (res)
    PointFormat_H3  = 1; // (H3)      (1) uint64: lat,lng, (res)
    PointFormat_S2T = 2; // (S2, T)   (2) uint64: lat,lng, (res), UTC64
    PointFormat_H3T = 3; // (H3, T)   (2) uint64: lat,lng, (res), UTC64
}
